%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: туризм.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Andrey Magda
%%CreationDate: 3/24/2016
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.1 x35 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">С‚СѓСЂРёР·Рј</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-03-24T11:19:16+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-03-24T11:19:16+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-03-24T11:19:16+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoy3tlC/CW4jjfrxd1U/cTiq6G6tp6+hKkvGnLgwalel&#xA;aYqqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXhV/8All5Yv9B80ecdbv8AVWLalq897DZLYySmOwv54Io4HuLd5RSKBQF9Xj9GKU40v8tNL8k/&#xA;mL5WuNK1C8la/W8s7pJhaIskUVoXQP8AVre3MhDIpq5bcVxV67ih2KvM/wA2fzT1PyrqGmaPoUEF&#xA;3quoc/gkje6YPVEhhEEUsD8pWkryLbAbBiwGKWO+X/zs88Q6/wDoHzRosA1h2ihWwto5LMrLPJGs&#xA;REs81wssZEnxNRabfarsrTPG876/60lvHoEc93EG5WcOp2jTkoKsojJX4tuhpihkuiavaazpFnqt&#xA;nz+q30KTwiReDhZFDAMp6MK0IxVG4qkHnjzbB5V8vT6o8LXdxURWNkhCtPcODwTkdlWgLOx+yoJ7&#xA;Yq+ez5z82eZJ5L/zJ5o1fQIhdWUMGn6XBc2SRpdyK8lWSNy5S1dJFDsxYvtUAclLKPyv/Nnzba67&#xA;H5e81yS6pp0kj28OuSW7WrxSxzragSeosfqI8kkQ5U5L6i8zUkKq97xQ7FXimseWrjzZ+cWt6TLr&#xA;Wpada21qk8a2V1NEKrDaDjwVwgFZmJ2rXFKGtIdT8n+boY/KOsTeahd6fO93DqN+skUQjvI7ZXRp&#xA;Zo05esGi2atajFXo35Y+dLzzdoE2pXdultLFcmARx1px9GOUE1Lb/vaHfFDLsVdirsVec6/+dWh6&#xA;L5z/AMP3ESTWcSBrvUYZvUaFgCZQYVjIb0BxaUCTmqty4cQxCmnocM0M8KTQussMqh45EIZWVhUM&#xA;pGxBHQ4oX4q7FWA+XPzXfVvNr+W7ry1qumTqruLme3mMYUOyRvIfTARJfTfg5PEkUrXFWSnzZpS+&#xA;ZF8vSpcw38gJgkltpktpisYlZYbhlEUjKhqVViRQ+BxVOcVdirsVdirsVdirwPznpWu3nk65svLc&#xA;WqXWt6zquv2jQ2s8/wBUito9XvHd5YjIlsjSPxj5vvxJpWmKU78qrfTa55K1HVV1GHXLifUItVtN&#xA;SlnYJPb2cql4IZWeOFJg3qARfDQjrTFXsOKHYq8Y88flTNrv5qDUbLWH03U5LI6lYTpCr+jcWUlr&#xA;CnOrfvFIFadj/MKgqUv1b8uvOVj5t0fXL7UV8yeaLy7SZYTws4FgsGimMSMFoCQp34j5VqSqy620&#xA;3zLbeY7nzFa+RoItavEMclzJrTNCKhRy9D02iQ/AOTInI7+JqqzTyno82i+WdL0meRZp7K2ihmlQ&#xA;EIzqoDFQd+PLpXFCa4q8s/OnTp9a1jyh5fk1IaPpl/cXT3GoghJBLFCqxxRyH7LSwyzAb0boaj4S&#xA;pDBtUtv8K6q3ljTfNd3LpNvd6Td3F5cRx3jRX73ZDoG4EDhAkUnp9Nh/NTFUh1O5m1bV7q20/wA0&#xA;DUbm5vb6OOFILeOSSSd9Pt42KKodPWmo3TYRFh0OKvqrFDsVeHeYLy/t/wA0/Ny6c1st/cafHDAt&#xA;3NFbxkOuniT4pkljNI+R4lTXFKP8/SeTH1XT7OFbC602w00PHpkc1vHAyxanYn0QWV4xyWoVaAt9&#xA;kEVriqZ/849/8oZef8x5/wCoS3xUvT8UOxV4T+dut+ddB1n0YfMbnTNUj9S206kVvHEiOqSQ3U8K&#xA;R3EMczyIsdx6y0b4GoD6gUhE+UvLGg+c7Gy0izFxH5e0V0utWuDG9lN+mliEa20EVT9VNsPjm9Lq&#xA;5X4mq5Kr2PSdMtdK0qy0uzBW0sIIrW3DHkwjhQIlT3PFcUIrFXj3nyTy7r1jrOtedTNN5V0HUG0/&#xA;TtJtI1LvcxARSXEshHIMZHZUHNVAG9S1MUvKvL0nk7Qr5ILzy1Y+Y5NSQXxhmgEEtnaxRzSS2ytc&#xA;LawSPDHGrGQCshJG9Biqf6P5Dk1e41TzlpFkmk3OjLY3djpGiIYZWjnhS7ktlkRUlZ2sbjiWShaV&#xA;iPsqq4q9m0uTU9A82WmhzahPqWkaxazz6e14ed1bz2pjMkbS8VZ45Em5D1KspWlaEUUMxxV2KuxV&#xA;2KuxV5Nqf5Uee1vNYOi+aprWz1C6uL2yQXF1B9Ve7laeVBHExicepIxBoOu+KUx8sflp5mtPNljr&#xA;ut69LewaZFKLSyM9xchpp0MbyO85ooCHYKvXv2xV6Rih2Ksd8waFrkuuWGuaHc28d5awT2c9teI7&#xA;QywXDRyVDRkMjo8AoaEEE4qpWWieZ7rzBZ6rrtxZLDpscy2lrYpLVpbgBWeWSU9FRaKqr1NSe2Ks&#xA;nxV2KuxV57oX5R2aa7reu+arlfMepav6ltH9YjHow2LOGSFYmLKGHFdxTptuWLKsXk/JXz3oMph8&#xA;meYbZ9HM0E8OnatE9LdrWf6xE0bQDi5Dkg1RaqaGtFoptkX5d/kvYeWL9Nb1e/fXfMSK6xXkiCOK&#xA;D1WZ5DDGC3xO0jlnJ3LMQAWaqtvSMUOxVgfnz8ovLvmaHVL6GN7fzJewFLfUBdXccaTJGI4naKKU&#xA;RniFH7GKsG8v/kR590DU5dU0rzLHa3syGI/8fEaRs6ycI1vYbplAZFoSxbbrim3o/wCWHku98oeX&#xA;5tMvLlLqWW5M4kjrTj6MUQBqF3/dVNAMUMuxVTuJJIreSSKJp5EUskKlVZ2AqFBcqoJ9zirA9F/K&#xA;q0udau/M/nMx63rt9RRauOdjaQgMEggifZ+Cuw9RlqSSaCpqqyDyb5K0vynb39tp0kskN7dfWR67&#xA;GR41EMcEcKufiMcaQhUr0GKsgxV2KsSvfK2v2Wq3uoeW7y1S31RxNqOlajE8tu1wFVPrELxsjRsy&#xA;ovNaFWpXY1JVas/y9sbyS8vvOC2vmHU7/wBNZBNbJ9Vgih5+lFbQyGUoFMrksWLMTWvQBVqfyZqW&#xA;l6impeUbyOzkeGO2vrC/WW5t7hIa+lIZOYmSZFYrz5NVaAjYUVRWheWtWTWX8weYr6K+1b0WtbOG&#xA;1jaG1tIHZXkWJXaR3eVo1LyMewAAA3VZLirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSvzTrNxonl3UdXt7Nr+Swge4+pq/pt&#xA;IsY5OFYht+IJG2+KsM0P80fM3mLQf8QaD5Re70lkZoXlvY4JpGjX96qRGNq8ZA0Y3+IjFKcflt+Y&#xA;kXnqwv8AU7PT5bPS7e5NtZ3E7DlcBVDNIEoOC/EO5/DFDL8VdiriQASTQDck4q8y1z88tLsbmzFn&#xA;YpPY3svo2t9eXtvYLMAGrNBHMTI0FU4iVwqEkUJG+KaZp5Z81af5gt52t0ltru0cRX1hcgLPA7KH&#xA;UNxLoysrBkdGKsOhxQnOKuxV2Ksbf8xfJyeZR5cbUUGplvSpRvRE/UW5mp6YmI3EfLl7YqyTFXYq&#xA;7FUDrWvaNodi19q97DY2ikL6szhQWPRVruzHso3OKsX0786vyx1C7NrBriJKGCFrmG4tY+RNAPVu&#xA;I4o9z0+LFaZsCCKjpirsVdiqV+ZPMujeXNKm1PVrlLe2iUsAWUO5UV4RqSObGmyjFUu8pfmH5X80&#xA;yXMOl3I+tWrcZbWUoJSOKvzVVZuSUcfENq7YqyXFXYq7FXYq7FXYq7FXYq7FXYq4gEEEVB2IOKvk&#xA;O086+VPLkD6FqPkvVLq/0pza3M8Wr30EbSxyMsoEcLGNAnQcevtil9Efk3ZfVPy20ZRbtbLOs11H&#xA;E55P6d1cSTxlmq1S0cinc1xQzTFXYqlHnGwvdQ8o65p9gaX15p91BaGtKSywske/+sRirznyX5t8&#xA;paPa311qGnzwReYJI5NMljs57tbm2FqkUdipijkpJbek8RgalKEgbnFKL/KWwuYdcvwLZrOGxso7&#xA;Se3Y1MTS3lzeWlo1Krys7K5iRt/h5ce2KvUsUOxV5b+ZvmjztP5ksPI/ly2l09tVora7IGWNqxyS&#xA;tHFMoYRlY7eQsf7w0ogH2wpYf/hH8sk8ry6dLp2sSXSzPDJ5rWxcxidJjC1CSYvq/q1rGdj9on1P&#xA;jxVlf5b+ZPO+m+a7nyFr9vLqkViG9LXYwzJGgiSVVllf7YZZUC1PqKTQ8x8eKvV8UOxV4hpo8u+f&#xA;PzX1ubzTfWstn5emlsdG8uzzRrza2Z0uZ3gZg0iD0ix24mvxfYGKUovda8n+a7qXTND0XTo9L1fU&#xA;I3vr3UHjS5tYIrJBNdWsEHE20SWtpUO8oPM0K7kBVl35D6+p/T/lBNUi1m08uToNM1GKRZVezuC/&#xA;pIHQlTwEVTx2XlxGyjFS9YxQsnngt4JLieRYoIVMksrkKqooqzMTsAB1xV8/fmP+Zfl291Ga9tri&#xA;GK8OlW9vp1tqDS28tvLcaoIrpm9BhPAxtl5llIbhQ7jYqWM+UfzF0e0k+s6zcWputLvrK905oby6&#xA;u52R0uku4knvJJCOSpGCikKeQrXsq+k/KnmKPzFocWqpbS2fqS3ED2s5RpI5LW4kt5FYxs6H44j9&#xA;ljihN8VeY/nJ5u1/RtT8saZpd4lhDqcl3JfXDzx2pKWkaFYxPJBdrHyaX/fZJpTauKWKf408w/8A&#xA;V+h/8KG1/wC8Nirv8aeYf+r9D/4UNr/3hsVZ7+THmfWfMHlO4l1idbu80/ULqw+uIyuJkhYFH5ok&#xA;Kt8L05BF5UrQVxQWeYq7FXYq7FWN+drjU1j0exsL6TTm1PUUtJ7uBYmlWIwTSsI/WSVAxMQFeJpi&#xA;ry3UPy/1hbPzjf6f5p1K0tNHnu2Fmbm+PrOtql3I8hiu4ErK8rVpHil1sNIvNd8raBpGr6tf6PLJ&#xA;NZXdldz6pZQQNbQM5+qXcMNv6rRi3kAD3DrtQLvyVV6l+W+qX2q+RtGv76Y3F3PADLOaVcqxUMaU&#xA;FSBihkmKpN5w8zQeWdAn1ieBrhIWjTgGSNQ00ixK0kshCRxqzgu7bKN8VfP+rfmLqOmeYJVt006z&#xA;R9YN5FbPeo1tDevayo9zE8v1eSS1l9YPIwRV5g8K88UvQPyg87RGPTvL8liFm1Fbu8F2tws108iS&#xA;kzXGoQBVMJnc8kdGeNqgKaUxV6zih2KsR8/PfR3vlaTT41mv01O5a0hkNEeYaJqJjVjUUBagO+Kv&#xA;LjZf85Iny9LoH+G9I+ozTSTM/wBYHqgy3JuiA31nj9tqfZ6YpeneQpdTl1LzBLqsKW+qSS2DX9vE&#xA;eUcdwdMtjKiNVqqr1ANcUMxxV2Kvnzz1Z3/k/XfMmmXL/UvLHnmQNFr6wNcGzluJCbyNo0IYtMsj&#xA;rQduJFaPRSm2iedvyj8ty61rT6o2s63AwszODGz3KSW9u5EFtCscEEZYLCWZRvHRmPHFWR/kx5d1&#xA;aFNb826zaDT9S80XCzLY8SjQ2sPP0FdSFIb94RuAeIXkAagKl6VihCavpsGq6Te6ZcFlt76CW2mZ&#xA;DxYJMhRipHQ0bbFXyv5XtvP0D67a2NhZ6pfaZcSPrl9LPffWUdGntwks0N5bO8SjTSyB+XHnt9rF&#xA;KL1y683ah5e1S7k0fT18svIdPmvbqfULgQ+rNFa+pS4vpIxJG1wHRjEePHl2xV7b+SOkXenflvpU&#xA;l3LJJc6mH1SRZJZJeH11jMqqZWdh8LBm33csepOKCzvFWHeZZYo/zG8m+o6p6keqRpyIHJzFEQor&#xA;1NFJpiqN8pad53tJblvMmqxajG6oLZIo0Tgy15k8YovtbeOKvKLfzt+ebalCj2V+Z2dfWsG0bhaL&#xA;Obz02tlvK0NuLer/AFjl2G+9Apel/lnJHLZa/NEwkik17U2jkUgqw9cioI2O4xQzDFXYq7FXYql+&#xA;t+X9D16yFlrNjDqFmHEgguEEic1BAajdxU4qxx/yY/Kp2LHyvYAnwi4j7gQMVty/kz+VavzHlewr&#xA;4GIEb/5J2xW2YQwwwQpDCixQxKEjjQBVVVFAqgbAAdBiq/FWmVXUo4DKwoyncEHqCMVYzd/ld+W9&#xA;3N61x5Y0t5Tuz/VIQSf8qiiv04qnOk6DoWjxNDpGnWunQtu0dpDHAp+YjVRiqOxV2KpdrvlzQdft&#xA;Es9bsINRtY5BMkFygkQSKpUOA3cK5H04qkX/ACqH8r/+pW0z/pGj/piqd6D5Z8veX7aS20TTrfTb&#xA;eV/Ulito1jVnoF5EL3oAMVTPFXYqpXVra3du9tdQpcW8o4yQyqHRh4MrAg4qkmmfl95E0q9F9pvl&#xA;7TrO8U8kuIbWFHQ/5DBap/saYqyDFXYq7FWMa1+WP5fa3fPqGq+X7K6vZP724aJQ7kd3Zacj7nFU&#xA;JB+Tf5WQTJKnljT+aGq8oQ6191aqn6RitsxREjRURQiIAqqooABsAAMVbxVL9b8vaFr1mLPWtPt9&#xA;RtQwkWG5jWVQ46MAwNDv1GKpD/yqH8r/APqVtM/6Ro/6Yq7/AJVD+V//AFK2mf8ASNH/AExVkum6&#xA;bp2mWMNhp1tFZ2UA4w20CLHGgJqeKqABua4qicVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYl+avm++8o+RdS1ywg9e8t1&#xA;RIeSlo42lcJ6slP2U5V9zQd8VT/QtTOq6LYamYHtje28VwbeT7cZkQNwb3WtMVR2KuxV2KobUdT0&#xA;/TbOa8v7iO1tbeNppppWCqsafaY17CuKvPbrz15rjvNP1v0Fj0fU7lLLSfK7xEanexOavegn+6ZF&#xA;+MRvRRHXmysRxUvS8UOxVA6/q0ejaFqOryxmWPTrWa7eJftMsEbSFR13PHFXiY1/84ZtKbzmutQx&#xA;6cl4bJrACEw+qLsWZYRGAyegstU4+t6rL8YYGiYpezeVtcXXvLWl60sfojUrWG59GteBlQMVr3oT&#xA;SuKE0xV2KsNk/Njyr+krjTraLUr64tmdZPqWm3l0h9KRoXZXhidWUSxsnIGnIEYqqaL+aPlbWJ7C&#xA;O2W+hi1QhdOvLqxura1nYo0irHcSxpEzOqEqOW/bFWXYq7FXYqxDVvzc/LrSNcudD1PWo7TUrMot&#xA;zHLHMqIZUEiAzcPS3RgftYqnOl+b/KerSCLS9asL+U9EtbqGZvHpGzHFU2xV2KuxV2KuxV2KuxV2&#xA;KuxV2KsX8/xeaHsLNtEM7W0dwratBYGJL+W3ANFtZJysSnnx5gkErWjA9VXkf5vyaq35c6yG07zX&#xA;AvCLlLqdxYvaBfXjr6qxXEjnbpRTvTFLIPL0mtjy9pofSvObyi0gDPBc6cIi3pLUxhroEJX7NR0x&#xA;V6R5Ji8zReWbJPM0iSawEPrlaFgtT6aysoCPKEoJGQBS1aCmKE8xVD6hqFjptjPf386W1nbIZbi4&#xA;lIVERRUkk4q+d9Rk0Pznr2t6Z5puL3QfMN9/pnlHXb4NawrYL8dvAIWbgi1TmankzfESsihQpZZ5&#xA;J83+X9K8u2XnbzfqMt7r2rO1hFfSIpAtoJTGzWqIFC23werJJxUv1IrxXFXsmKHYqh9Sk0+PT7lt&#xA;SeKPTxGwu3uCqxCIij+oWooWnWuKvmFrXTxeejZ+u/k1UeRPNC/WjZrbpdpb/XzD/dveQLytxJwr&#xA;XjP0FQpfTWivpDaTZ/od4ZNKWJEsmtmV4fSQcUCMpIKgCmKEZirz785fzD1Pyb5fkm02zjuLme1u&#xA;ZFuJJjH6BRoYUdUEcvqkSXStxJUUB3xVIvy1h82x2tprWl6TpJs7zSbOwsrS41W4SdUspLhpJZCu&#xA;nuHeaS4JfbqOprilA+V4PPGtflrpflWPQrW2kt9NtZbLVLi7vLdoZ4lR7eZa6dJGJopArGNZD0Ir&#xA;iqf+b/zQ81eStJguvMGk6TLK9IuFpqV48kkojLnjENNbgG4GnJqD+bFWf6Fq0OsaJp+rwKyQ6jbQ&#xA;3cSN9pVnjEig07gNihEXt5bWVlcXt04jtrWN5p5D0VI1LMx+QGKvmzyVqfmC38/azcw3htNR80R/&#xA;Vp5i0ZW01K/tDqWmB0cOGMfGW34sPbFKZz3/AJMls9IvPMN3oerTarJbW2saZfabawarAbkrFKyT&#xA;wmJg9u7jl+7+yCcVep/lJf3Uvk6PSr6T1NS8t3E2h3zgEBnsW4RMK7nnAY3r3rihmeKvMfPNr5Jb&#xA;zrc3nmvSl1W3t9JtFtYjatduHkuLoniqq3AEJuzUUdyMUpH5P8tfl/5q/Lxb/SvKennzMmnwvKs2&#xA;nLHC15JDXlH6npRSRs6n7Mm3QkHFUl/wb9W0rX31Tynplhqemw2M2nSQ2cdtSZpVDsLmKS7X4ita&#xA;KKqDTfFXsflfzJqmp6lrGmapp8FjeaRJAj/Vbl7uKQXEImUh3gtWFAaEccUMhxV2KuxV2KuxV45+&#xA;dnmrV9T8u+YfJ1h5U1u6uJRFFBqENlNLayUaOYskkauCOq/MYpDK/wAuPOd3q0NvpFx5d1bSWsbK&#xA;PndahayW8LtGEjKI0irVj1p4DFDOMVdirBPzF0zXZNS0nVItPfzDotgxaby5EyRM14SPq10xc8JU&#xA;ibYo2yV9T4iuyqybyZL+htU1vzLpsXmrzNeQfFp1ENvHGjCSOztVmIVY0cBmY/E7DkewCl4TY/lx&#xA;+YPmvzHeRXGjy6bDqEtx9dmktZrOCCO6lDzFDMkXq8SileNST8PHieaqvrKKNYokjT7CKFWu+wFB&#xA;ihdiryTz/B5x8/atL5e8v2og8t2CuLnWbtmiglvxVUMSqDJOtqasOPweqByNEoylB2lt5mstRtvL&#xA;S+TbmSyh0CTRTbidf0XJykQeu95RRRow3KsXq1r8B64qiPJFr5z/AC91eDSdctUuPK+oJGj6tZM0&#xA;kFvfBQplmjZVeFbin7xqcOfx1HNgFXr+KGI/mN+XGm+eNKNld3dxZyJDNFDJAU4n1TG/7xXVuSiS&#xA;BGoCDt1xV8+XP5WfmBpuqxaZHp88+rQUSw1e2jYxKwEvoSR3Yt+MKRl4DT1ouPB/3bF91L00fl1+&#xA;dtBXzjIT3IvABX/uH4q83tfyz/MW+8xiymtLm31iSRRd668UgCtWEXE7XYij9VGVJ9hcsXDovBOP&#xA;wqvqDRtMh0rR7HS4WZ4bC3itYnenJlhQIpalNyF3xQxD82rzVf0Va6RDplzeaRrEq22r3dlFNdTQ&#xA;W4kjeVTbwRyOyzQCWPl2anjUKvKtasL2XQ7DULHTNXXzTdJcXmqcdG1KsOoCf9KWTKzW6ofRnj+q&#xA;VQ7LJX7IxS9c0H8zbe80qG51bRdY0q/k5mWw/ROrXBjAchKyx2YQkoAx47AmlT1xQk3l/Vb4fmxq&#xA;D6PpV/JoPmG2guNTvb60vbCO2urOOSH92LqCIO0yeiKA9ia7UxS9NxQw7z55Uuru11XWdNv7y31H&#xA;9FyWwsYIbO5huhCJZYo5Ibq2uWbk8hFFIr0xVglvf+YdNtmtNGvddhtI40a1hGkSWimVyDMrRQ+W&#xA;JkjUVYgqz8vatQpX3mo+Yb9jZahf+YLnSXuYhMjafdKz2yuHZisflmNuY4j4FlFf5xirNfI08t75&#xA;m816p9Uura0vZbL6u13a3NoX9K0VJOCXUcEhCuCK8cUM0xV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpmVFLuQqqKsx2AA&#xA;6knFXKyuodCGVhVWG4IPQg4q3irsVdirsVdirsVdirsVdirsVdirsVdiriQOppXYYq7FXYq7FWmZ&#xA;VUsxAUCpJ2AAxVBaLrmk65psOp6RdJe2E/L0biI1VuDFGp8mUjFUdirsVaZlVSzEBQKknYADFWP3&#xA;/wCYnkawlMFxrtn9ZH/HrFKs0/8AyJi5yf8AC4qt0rz9oOp6r+jYVu7eVoWuIpb20nso5UR1RvT+&#xA;spEz7yDoMVZHirsVdirsVdiqVeaPMEOgaHc6pJG07xBUtrVPtz3ErCOGFP8AKkkZVHzxVgGr+cdQ&#xA;8xaPovla5tpLPWtcv5NI8yw23W2S0T1b302LVCTxcfTbf92/Lc0qpRXlvzppvlLSPMOla9LNFY+T&#xA;7uKztbqZeUktndBXs1ABLOyK/CvdVDeNFXpEUsUsSSxOskUiho5FIZWVhUEEbEEYoXYqlnmDzFp2&#xA;hWa3N56jtM4htLWBDLcTzMCVihjXdmIUnwABJoATirzr8wfNvny4sbW1tdKvPLFreyfV59SupbdQ&#xA;onIiTlcWkl39W2djyZVo3Hi9RxZSh9N1Lzv5R89WOi6xf/pW11Zg68TNIv8ApFw5dggjleL0pJT3&#xA;4spWrosfHFXsGKHYqwK08zeetV0zVNcsBptrpVrcX0VnBNDcXFxJHYSyQM7lJYUVneFqKAaCm+Ks&#xA;EX87/PbQCYQaKFKh+BkiD0IrQqb+tfbFNM2ufNfnzTvLmneZ7pdMutMuDZyXlnHDcW9ykF4yJVGa&#xA;aZC8ZlHwkUO++KHoWKuxVjPm3z9pPlm+060u45JTeNyupIhVbS1DLGbuf+WJZZI0J9yf2TirEPMm&#xA;rXfnrW5tN8qXTxSeUS9+ZyCkVxqkUjRWtuGYASQVinWUqaV27YpeieXdbttd0Oy1e2UpFeRLJ6Tf&#xA;bjc7PE/+XG4KN7jFCY4q7FUk89EjyT5hI6/o28/5MPiqU/lpBDBb67FBGsUS6n8MaAKorY2rGgG2&#xA;5NcVZjirsVSPz1/yhHmH/tmXn/UO+KvHvzF/MXU/K2p6f5c8peno6W1jBe6g9pYpcSTl1NIePEpG&#xA;qoORc+PUU3Uo7Xr2LzVo+g67q1lA97JoBvI+UasIpzfWSmWHlzKcgTxINeJ64q9vxQ7FXYq7FXYq&#xA;wPz3C+tecvKXl0QwXdpDcSa1qkMm7xx2ilLeT7LAAzy0G4LEU+zyxVC+X/LthP8Am9rnmPSR6Fpa&#xA;W4sNSKrEUuNRl4SS8Dw5r6UaR+qQ3xMQP2WqpXeYtDs4fzT0vV9XPr6Xq1qdMtEdITFDfxepJFzJ&#xA;TmWkiklETcvhbkv7YGKEZ+UE1xD5Xn0G5Egn8t31zpIM7K0rQQvytmYKSFrBIlPbcbYqzjFWGard&#xA;QP8Amz5ftm5XBh0vUG9KNGcW0s0lv6U8zKCsYkjhmjRmI3qo64ql+r+YPMvmDQNVubTQLe88qOlz&#xA;ayW81w0d/eW8ZaKaWCP0miSvFvSWR6tQH4a4pY/f2/5ep5c03zT5WujcXWnajp6ILiea4M8s88Sm&#xA;K4juWf8AelJuaSU5IfiU0rir2PFDsVYb+WJlXyQ5hUNMNQ1oxqehb9K3VAdx3xV5MqiSzXX7mKAf&#xA;7iXurvzWbuZdVi1oceVuqiE8JUueUS2YfgV/4EqXqf5hyXsv5YNJfIIr5/0a11GvRZTdwF1HyauK&#xA;GcYqxf8AMLzFqei6Io0q1ubjUb6QW0M9vaXF4lqrfbupkt0lYrEu4WnxNQeJCrzR/L2gS3NnF+XU&#xA;N9J5ulRZNQ1m6lu7VoIOTxNPd294vFzM8sjiIRqXo7KRSuKUbrnlHyofKHmDXNBtriz1by1A+l6P&#xA;qizvGwk0wGs0ZjI+1PJIkpapYhq9cVZGunzflvKtzb3Mlx5JurknUobgtLNYSXARfrfruzvJE8wZ&#xA;puX2S5etAcUPQwQRUdMVUry6itLSe7mqIbeNpZCBU8UUsaD5DFXkOr/m5b+ZtLvdNs2stG06/tZY&#xA;5b7UpjPcLDKhRnW1shKgopJ/eTqR3GKUS/nRPJ+ralDbXmnarZXVyk0ts8ktldxSm1hTgHdJbeSq&#xA;xq3xPHTl1xVn3k3zfp3mvRhqthHJDEJZIJIpvTLLJEaOOUTyxsPAqxGKE8xVI/PX/KEeYf8AtmXn&#xA;/UO+KsD8z+UfJXmy7gmubLWptQ0+CGC8GnRzW0VysUTzpbvNMscMgO68o5BQsoLDailT83yyuY1f&#xA;S5NGSLRZYoNPlaFmSKPULFU/3neWMCg6BjTFXrmKHYq7FXYq7FWL+bPy80HzDDqEzR/VtavbR7SH&#xA;VkMnqQngyxOFV4w3pM/ILUb4qlurflH5X1PQJrWbStGj1ydQZNYi0uIVm5hzJ6bO0p5U+Ks9Tv8A&#xA;FiqFh/Jfy3D5Sl0uKx0mPXpFn9PX00yNHhknlZxJCqyCVGhV6RET1Wimu1MU2yPyn5F0Pyx60tj6&#xA;8l9eRwpqF3Pc3Nw07QKVVytxLMF+0fs/LFDIcVYh5k8la3e3+o32ga6NFuNXs0sb8vbG5oIhIIp4&#xA;GWa2eKVBM2/Ir0+GuKrNF8r+d9F0yDTNN1jRoLK2BWGL9E3jU5MWO7aoSasxOKpZd/lx5sv73WLm&#xA;/wBd0q4/TdvBZ3cbaM5CQ2/q8fRD3zrz/ft8Ugft2FMVZ7ptklhp1rYo7yJawxwLJIeTsI1Cgse5&#xA;NN8VRGKvObj8tfOcIktdE84/o3SfrV3eW9r9Sd5EN7KZ3jaaO6g5qkrOyVWo5GtdqKV8X5ceZEMV&#xA;y+oaBPrUUKwjX5dAZtRZlTh6zXAvwfU/aqBSvbFCjF+WPnWeE2Os+dDqOlTS2kt3b/UWWVxaSGXj&#xA;HNJdTiP1W48yEP2RSm9VL0nFDsVYzdflx5VuNWudWMd5BqN4we6uLXUdQtTIQvFeQt54h8KjiNth&#xA;sMVSa/8AyquU0O60XQPMd5p2m3aypJY3aR6hAPWYs7KZOFyGZmLH9/ucVTEfl1Z35EnmnULrzHJ1&#xA;NtdMIrAHwFlB6cLD/jKHPvirLIooookiiRY4o1CxxqAqqqigAA2AAxVdirGPPflLUvM1pa2lrqa2&#xA;NrFIz31pLFNNDdoVoIphBcWcnAHcrzo3RgRiqF8u+S9d03zPPrd1q1s0N1CUu9OsLS4tYZpQEWOZ&#xA;1mvbyMOiR8aoikjqTQYqzHFXYqgde0w6roWo6WJfQN/azWomK8+HrRsnLjVeXHlWlRirB7vyH+a9&#xA;wI41/MKO2tY1C/VrfSEjBCigrILr1h9DjFKhF+U/mILMLjzBbXMtyiw3N5Pa6jPcmESpMUja51Se&#xA;OPk0S/Zjp7Yq9NxQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs1/zLoXl60ju9ZvEsreaUQRSSVo0rKzhBxBNeKMfoxV&#xA;E6ZqdhqlhBqGnzrc2VyvOCdK8WWtKiuKorFXYq7FXnev/m7FZeZBoOnaXPeXVrepa3w9WwQyK8PM&#xA;LapNeQStIXkjA5JQ/F3xSzLy5rsGu6PDqkEE1qkzSobe5CCVHhlaF1cRtIlQ8Z6McUJlirsVdirs&#xA;VYfr/wCanlTRdesdHuJWnN04iuru3Algs5JCq263TKf3ZnZqJ8iTQb4qzDFXYq7FXYq7FXYq7FVA&#xA;X9ibv6mLmL63Tl9X5r6nHx4V5UxV11fWNpw+tXEVv6rcY/VdU5N4LyIqcVV8VdirsVdirsVdirsV&#xA;dirsVdirB/zk1zWNK8ian+jNJuNTa7trm3nktZBE9rG9vJW5rxY/B7b4q84T/nHTzDdxQXC+c5Jo&#xA;9preQwg05KaOtRseLdffFNpX5q/JTzN5T8t3Gsx+ZZ71LExMmnwKIGlaSZECKwGxZnxW3v3lfVtR&#xA;1fQrbUNS0uXRr2fn6umzsHki4SMi8mAUHkqhunfFCa4q8+/M/VJLPVNFSbVb3StKFvqV3qMlg6Ry&#xA;strFE67urDbkcVeReRp9U1rz02qaPFf6xoZ12CurTyXRcIgg5GX6vC9uSq7nk67daDfFL0jyL+ZF&#xA;vb6VHZDT3mjGqzWss8dzZs8ZvdXa2jeS39b6wq+pOoNU9+mKvVsUOxV5v5a8rfpTy5FrOoeYtcSW&#xA;b1pJvS1CZEULK4oqLWgAXYDFKHh0TR9VsbmKw1PzBfX/ANV+sLoWpXk9sZ4ZXeFPWiuQv7mQxnnU&#xA;V4ndakAqpV+U/wCWl9pWrTWOr3drqemeXJJEgso7f0o7fU7yKG6kZKljOiW9wFjkk+IcmFAKYq9l&#xA;xQ7FWP8AnHzppvli0hedTc315IILCwR443llatKvKyJGgp8TsaD5kAqsU0z80vMNnbSS+adCJWW+&#xA;n0+wm0Zjcq1zHM0KWsiyGNg7stEl+w3fh0xSq6Z+ZHmi21HUz5p0SKy0a0vobA3dlMbl7SWe3t54&#xA;1u1oOat9bVfUiFFbYinxlQ9GxVCazb3tzpF9bWE31a+mt5Y7W43HpyuhCPUVPwsQcVfK1x+Xfmex&#xA;8s2mt3Wo6TaQ3Fwgt7iS5aO+M5uBEZ1la3D80Y+ozCSoFTilNpfJnmbzX541mC01/RdXvEWFluLm&#xA;5EpkhdDSOACCf4YuPxhdqmvfFXsH5GWuo2/5b6aL2YS+q0slsoZnEUJchIgWC7LQ0FKAbDFBZ9ir&#xA;D/zU843flTys2oWklvDczSGGG4u/7mNhDLMOS8k5F/R4KOQ+Jh16FV4Kv5beWvNdla635l8/aNY6&#xA;tdiWa6huokS55yylv3rm+idqCgQEAKuwGKV3+HtP/LiKy1ryj540fUboX6xzi3hRmWGaFlk9dlvZ&#xA;S8C8A3Ftg3xAjFX0h5P11te8tafq7iMPdx8m9FuURKsVLRn+VuNV9sUJxirsVdirsVQuq3VjaaZe&#xA;XWoFVsLeCSW7ZxVRCiFpCw8OINcVeNeRPP8A5x8uflpF5h1nRhP5RjP+4spccb+2sXlEVussco4S&#xA;xqHAR/UDcACQeuKUR5u82ebZNV8l6tr+mQ2HkS81CBri3SYzzCaReVnLeMFREjjlKuFUsOS/Efsj&#xA;FXs+KHYq83/MHW/K9v548vwa3cQraQ2uoDUIpQSPTukjSMMoB5BzGw2+nFKWfll5w8iaTJ5vtLW6&#xA;jgtI9Sn1OCKCKVkFmbWEBhwRhUmCSkf2zxJ40xVg/lWXyNp+inVRr0j6xf6vaz3Gnu6NbR2sOvxX&#xA;Zli4xBq/VofU3kPcUrtir6PtrmC5tormBxJBOiyROOjI45Kd/EHFCpiryzQ7rUtQ/Lf9AzaBczvq&#xA;CX9taSxyKbVqMzRyTTRuksKu78fsVqp7UJUpvq3m638u+cbMeYpbmL69aWun2BhhY2Vxe3EzmTgQ&#xA;WKuCi7P9le++KE38p/8AHe85/wDbZh/7o+n4qyXFXEgCp6Yq+f59K/KXzF5u8y6r5416GWX6wYtO&#xA;T656Fu9migp9XlikpP8ACyo8SmquCeNX3Usg027t7nyL5Z+qy87KLzTDHYRM4eWC0XUJPq0EoqSj&#xA;xw8Bwb4lFFO4xVEeaLm2l0X8xEilSR01/TOaqwJX/RtKTcDp8SMPmD4Yq9YxQ7FXg2t+X/OclncW&#xA;L31gumeVNYt7GCe3jvIL5k1D6pM/7xLn0/sX/A1TsTtil2u6f5l8reaPNWvaBdQXFr5VsIbmG21d&#xA;r27YC4gdpRGVuI1Bb0+rA9qYq9f8maBN5e8r6fo0063MtlHwedFKKxLFiQpLEdfHFCdYqg9YvobD&#xA;Sby9mnS2it4ZJHuJGVEQKpPJmbYAe+KvkqzvPy60mHTX1KSHX2udMsrgRpfrbG0uZYB9bif0Y5au&#xA;ZBVg1DXdgWqxUpnoGq+Qv0zba1p19baHFp2p6T6WnSXscpf6xfqLu5Msqwtxjt1ZWNCQrGrBKLir&#xA;6uxQ7FXYq7FXYqlvmTy/Y+YdFuNHvzILK74C4WJuDOiSK7RlqH4ZOPFv8knp1xVQ81eVrHzD5Vvv&#xA;Lcp+rWd7b/Vw0Sj92opxKL0+GgoMVV9c8u6Treg3Wg6jCJdNu4TbyxdwtPhKk1oykAqexFcVRtpb&#xA;/V7WG39R5vRRY/WlIMj8QBycgAFjSp2xVVxVSvIp5bSeK3m+r3EkbLDccQ/puQQr8G2bid6HrirH&#xA;9N8h6Zp1rp8NtNL61pe/pG8vJDznvLlopIne4f8AaLerXwFAAABiqJ0DyrbaDfX76dO8Wl3rCZNJ&#xA;oPQt52JMrwd0WWoJjHwhqkdTiqeYq7FWF2nk/wA6aVCbLQ/MtvBpiSSPbQXunG6ljWWQyen6qXNt&#xA;yVSxAqtad8VdceWPzEueP1nzHpE3A1T1NDZ6EENtW/NPiUH6MVV/KflTzVpGvarqWqa/BqVtqxWa&#xA;axgsPqircpFFAsyu1xcN/cwKpXp327qstxVIvPHlmfzP5ZvNEh1KXSmvAqtdQAMeAYF42Ulao6/C&#xA;wDDbFUDB+Wfly38pWPlS3a4g0ezcPLHDKY5LivIyLNIoD8ZWclxGV8Nl2xVC65+UPk3U2tXt4ptF&#xA;e1aFi2kyfU/VW3NY0lCDieP7LgB1/ZYYq7V/yg8k31lbW9rZ/omW04CG5sD6MjJHIJfTnp/fozry&#xA;YSVNdwQ2+Ks1xV2KvG9e/Ifzbqes6tfw/mBeWdtqt81+bFYJjGjBlMAIW8jRzCkUaK3Doi+GKbd5&#xA;p/IXzNrur6ter56urS11cLHdWIgmZGiROCxycbuNZFFT1XvitvW9Ltbi00y0tLi4a8uLeGOKa7cU&#xA;aV0QK0jAlqFyK9TihE4qgdc0i11nR73Srrl9XvYXglKkqwDilQVII+g4qwHyv+T2r2H1j/EPnXWt&#xA;a5rEtt6V7qFl6ZTl6jNxvJuZk5L4AU2G+KVHXfyT1DUtUX0fOOrxeXZRFHqGiz3V/devEGP1iP1n&#xA;u1os8Z4GsbU7Yrb1LFDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqV+Z/MVh5c0K61q/WR7S0CGRIQGkPqOsahQxUfacd8VY&#xA;Gv8AzkN5KZQy2l+VIqCBaEEH/o4xTSb+Wvzl8la9ey2aTNp0sa8lN+9vEr7gFUKyyVYcgSPDFDOF&#xA;ZXUOhDKwqrDcEHoQcVbxV2Ksc/MHzJfeWvK11rdmlpK9lxkkgvZhbJJGD8aRynYSsPsV6nbFUk0P&#xA;88Py+1OWwsp786brN+EA0u7ilSRJZG4CP1OHpE8thRt8Vpn2KuxVItJ88+UtWsbzULHU4pLHT972&#xA;5flFHEKE1ZpQgAoDviqXD80/J5UT874aeRUaqdOvxYkV6/WjB6XHvz5cffFU51jzV5e0jy9L5ivr&#xA;6JNGijEpvUb1EZWICcCnLnzJAXj1xVNcVdirEbr82vy+trqa1k1YNLbu0UvpQXEyB0PFl5xRuhKk&#xA;UNDiql/yuL8u/wDq6P8A9Il5/wBUcVZVpmp2Op2MN9Yyia1nUPHIAVJBFRVWAZT7EVxVE4q7FUo8&#xA;2eY4PLegXOszW014lsYlFtbL6k0jTSrCioo6nlIMVS3yV59j80T6hbnSNQ0e404QtLDqUD27stxz&#xA;4MquFan7o9sVZTirsVdirGvP3nI+VdCfUILVNRvfVghh08zi3LmeURg8+EpAHKv2cVWeQvOr+Z9P&#xA;nmu7SLTr6CcwPZR3Iuf90xzV5enCagS0I47EHfFWUYq7FXYq7FXYqwf86/8AyWWs/wDRt/1FxYqH&#xA;in5q+cdXt4vy90PSr+Wwe30iyuZJLeWSFnkuljjjUlOK/AICd3H2sUsw86QwS+ZvzIV4UlmfSlgt&#xA;i6hik1xbWsMbrXowaTYjFXuMUSRRJEgokahVHXZRQYoXYq7FXl3/ADkNB5ci8h3OqanbR3Wo2yGD&#xA;SRM5pHJcsiSSpET6bSRx1ZWKkim3XFIb/LP8tNR8ratp+q2+oyXllfaMltrUM8zSUvImR4Xgry/d&#xA;gPKgWvwj54q9QxQ7FXzfpmkafa3tzoem3gS0Os3YAmH1uM3EV/a2Fh6sVKMkH14yUb4S/AsNsUvb&#xA;JPy88qNCRFatBecZhFqqSSG/ja5HGV0upC83Jvdj92KHg/nnUDZeVdb8rXQ+o2dy73kUM3GNEnjj&#xA;1VG4/wB0ii6n0qOaNFWhaX4RuBil9OYodirwPR/yDs9e0y31a21d7FLiCZPqzwtcBJhczMHVjMlI&#xA;vjJMYXrU8t6YptK9T/Kbylp2qz6NP5wZtXhjt5ZLW30ue6eJCv7wyLBJJT1Go0dSOI6861xVnP5J&#xA;W9ro2o+ZfL9veT3VotxFfacbi1mtGaGWNVdgswFSrqEZhSpFaDFS9XxQw/8AOD1f+VX+ZzE5jkXT&#xA;5nDqSCOK8jQj5Yq8yi8oeXfKV/pvk7WdMTX5dYmtZb++lv5Lf0nvJzAiWttHGOccf1fmavyqeuKW&#xA;T+Zvyq0q0ns9N8ueXFbT9YMltrWoJdzLcW0bJxWWMySMoKK7urFX+JQnH4uQVTT8m/Ls/luy8yaH&#xA;NOLhrHWOCyitGV9NspQaGlCfUq1BStabYoL0LFXYq+VvzBe11f8AMbzPf6lPDdafA66fpk7C1WGG&#xA;WCFJeMk9zbXSOtZJP3UPKUsKEAUOKUL5GNhp/m3yhrWnzwWSJcRwavckWpgc3kYHpxy21rb+k3Fn&#xA;DxXBBBHwF6McVfWeKHYq7FXYq7FWO/mF5evvMXlC/wBHsfR+tXPomMXLvHEfSnSUh3jWR1qEIqFO&#xA;KvGNT8geZYryKV/yw+utbGOOC8i8z3zlFhosRTnMsoVB9mi7DFKI07TvMM+qmO78uXunPqtzpkVz&#xA;zfVdTLLFf2008k93eQsiKtvDwA9SmKvoHFDsVYt+YXnL/DOgX1zDbzyXq2V1cWky200trHJBEWU3&#xA;EsaskYrT7RHLoMVeVaRouieYLkXdz5fu/NWnzRiDV771NLv5nvI+TNIl/a6iXiDiRKwBQirT4d64&#xA;pTp9Wi0HzTp02heUdX8tRSOkutwiCFrCazkkEDMbewlugLhHcOpRQ9AeVU3Cr2TFDsVeKeWfyt8y&#xA;nRfMLyR/o3Wm8wapdad6shRLnT7+OFJImkgLPGs3pAq4+JHRWptQqU8GqfmqbUWH6LvfVWWNQWSx&#xA;DNAiEOkl+L0j95sTMluHG9I60oqkPnf8ptbH5R6lpen2yah5jv5LIm3tyBFFDauqx28DTFWKRR8q&#xA;sx5OxZju1MVe24odiryvyx+aPlvQdFi0bUEnjv7AXAuom9GErKtxIPS4zyRMWIowNOJB+1ilIL/W&#xA;/wAuZfOF15ysNT1PStcuYoILh7WTSJFdXiVSVS8+tBWjWNUkK06bV3OKsp/LC9k1nzT5j1R9VvNW&#xA;t7D0dO0+4u1sl5QsvrSMDZRRI1ZPsnrTqK4q9KxQxH83Y7mX8svMsVrE088thMiRIpdm5LxNFXcm&#xA;hxVIvKX5maDrmnx6h5h0qa01q0kMJf8ARt3Ip4gOJIHEUrqh57BiGqDilj81/aaf5tk81LPcXNvZ&#xA;3N7qH1aGx1UXVxHJZyRR2lJI1twA7BgTQVxVln5PazqGuWfmPWr63NrLf6v6ixGKWEBE06ziFFm+&#xA;Lb0+JPQsDTbFDP8AFUPqN9HYWM15JHNNHAvJoraJ55WHgkUYZ3PsBir568raz+WWl6fcWWuW9/qO&#xA;o6QZ00gz2k88VvaxOTC8dtHGBayJ8IlMiepzFSxBGKUv1PzF+WV75LtrLRvrem+Z7qztbLVrq3tp&#xA;4o3QxpFcm4iZDHdcVB4qql+W6kbtir6YtIoorWGKFSkUaKsaEUIUAAAg9NsUKuKuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqH1Cx5M31aLk9eZ4LU1&#xA;612xVaNM00GotIa/8Y1/piqJxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:8415bc8a-12c4-ec48-ada1-e7013400cd2c</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:8415bc8a-12c4-ec48-ada1-e7013400cd2c</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:e8b047c4-aae1-a847-8d50-50a898873f29</stRef:instanceID>
            <stRef:documentID>xmp.did:e8b047c4-aae1-a847-8d50-50a898873f29</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a98864d1-7e9e-cd40-83b8-ff5582b44791</stEvt:instanceID>
                  <stEvt:when>2016-03-22T15:32:27+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8415bc8a-12c4-ec48-ada1-e7013400cd2c</stEvt:instanceID>
                  <stEvt:when>2016-03-24T11:19:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
0 0 mo
450 0 li
450 450 li
0 450 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
110.095 49.0674 mo
108.271 49.0674 106.787 50.5513 106.787 52.3755 cv
106.787 73.2368 li
106.787 75.061 108.271 76.5449 110.095 76.5449 cv
117.277 76.5449 li
119.101 76.5449 120.585 75.061 120.585 73.2368 cv
120.585 52.3755 li
120.585 50.5513 119.101 49.0674 117.277 49.0674 cv
110.095 49.0674 li
cp
117.277 78.0449 mo
110.095 78.0449 li
107.444 78.0449 105.287 75.8882 105.287 73.2368 cv
105.287 52.3755 li
105.287 49.7241 107.444 47.5674 110.095 47.5674 cv
117.277 47.5674 li
119.928 47.5674 122.085 49.7241 122.085 52.3755 cv
122.085 73.2368 li
122.085 75.8882 119.928 78.0449 117.277 78.0449 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
113.686 51.0923 mo
110.578 51.0923 108.048 53.6216 108.048 56.73 cv
108.048 59.8384 110.578 62.3677 113.686 62.3677 cv
116.794 62.3677 119.324 59.8384 119.324 56.73 cv
119.324 53.6216 116.794 51.0923 113.686 51.0923 cv
cp
113.686 63.8677 mo
109.75 63.8677 106.548 60.6655 106.548 56.73 cv
106.548 52.7944 109.75 49.5923 113.686 49.5923 cv
117.622 49.5923 120.824 52.7944 120.824 56.73 cv
120.824 60.6655 117.622 63.8677 113.686 63.8677 cv
cp
f
113.686 53.0205 mo
111.641 53.0205 109.977 54.6846 109.977 56.73 cv
109.977 58.7759 111.641 60.4399 113.686 60.4399 cv
115.731 60.4399 117.396 58.7759 117.396 56.73 cv
117.396 54.6846 115.731 53.0205 113.686 53.0205 cv
cp
113.686 61.9399 mo
110.813 61.9399 108.477 59.6025 108.477 56.73 cv
108.477 53.8574 110.813 51.5205 113.686 51.5205 cv
116.559 51.5205 118.896 53.8574 118.896 56.73 cv
118.896 59.6025 116.559 61.9399 113.686 61.9399 cv
cp
f
103.998 61.1211 mo
105.287 61.1211 li
105.287 56.896 li
103.998 56.896 li
103.998 61.1211 li
cp
106.787 62.6211 mo
102.498 62.6211 li
102.498 55.396 li
106.787 55.396 li
106.787 62.6211 li
cp
f
124.173 64.1592 mo
137.635 64.1592 li
139.587 64.1592 141.175 62.5713 141.175 60.6191 cv
141.175 55.2559 li
141.175 53.3037 139.587 51.7158 137.635 51.7158 cv
124.173 51.7158 li
124.173 64.1592 li
cp
137.635 65.6592 mo
122.673 65.6592 li
122.673 50.2158 li
137.635 50.2158 li
140.415 50.2158 142.675 52.4766 142.675 55.2559 cv
142.675 60.6191 li
142.675 63.3984 140.415 65.6592 137.635 65.6592 cv
cp
f
136.432 56.896 mo
128.917 56.896 li
128.917 55.396 li
136.432 55.396 li
136.432 56.896 li
cp
f
135.108 59.3496 mo
130.241 59.3496 li
130.241 57.8496 li
135.108 57.8496 li
135.108 59.3496 li
cp
f
122.586 112.049 mo
119.331 112.049 116.682 114.698 116.682 117.955 cv
116.682 121.21 119.331 123.859 122.586 123.859 cv
125.843 123.859 128.492 121.21 128.492 117.955 cv
128.492 114.698 125.843 112.049 122.586 112.049 cv
cp
122.586 125.359 mo
118.503 125.359 115.182 122.038 115.182 117.955 cv
115.182 113.871 118.503 110.549 122.586 110.549 cv
126.67 110.549 129.992 113.871 129.992 117.955 cv
129.992 122.038 126.67 125.359 122.586 125.359 cv
cp
f
122.586 107.719 mo
116.943 107.719 112.351 112.311 112.351 117.955 cv
112.351 122.905 120.335 133.52 122.586 136.414 cv
124.837 133.52 132.822 122.905 132.822 117.955 cv
132.822 112.311 128.23 107.719 122.586 107.719 cv
cp
122.586 138.819 mo
122.003 138.097 li
121.547 137.533 110.851 124.214 110.851 117.955 cv
110.851 111.483 116.116 106.219 122.586 106.219 cv
129.058 106.219 134.322 111.483 134.322 117.955 cv
134.322 124.214 123.625 137.533 123.17 138.097 cv
122.586 138.819 li
cp
f
123.336 137.625 mo
121.836 137.625 li
121.836 124.609 li
123.336 124.609 li
123.336 137.625 li
cp
f
123.336 111.299 mo
121.836 111.299 li
121.836 106.985 li
123.336 106.985 li
123.336 111.299 li
cp
f
122.586 140.52 mo
118.96 140.52 115.057 139.614 115.057 137.625 cv
115.057 136.461 116.337 135.584 118.76 135.089 cv
119.061 136.559 li
117.134 136.952 116.587 137.517 116.556 137.636 cv
116.66 138.001 118.673 139.02 122.586 139.02 cv
126.5 139.02 128.513 138.001 128.618 137.615 cv
128.585 137.518 128.039 136.953 126.112 136.559 cv
126.413 135.089 li
128.836 135.584 130.117 136.461 130.117 137.625 cv
130.117 139.614 126.213 140.52 122.586 140.52 cv
cp
f
122.586 142.533 mo
115.682 142.533 108.691 140.847 108.691 137.625 cv
108.691 135.557 111.78 133.869 116.953 133.11 cv
117.17 134.594 li
112.637 135.259 110.191 136.652 110.191 137.625 cv
110.191 139.015 115.02 141.033 122.586 141.033 cv
130.153 141.033 134.982 139.015 134.982 137.625 cv
134.982 136.652 132.536 135.259 128.002 134.594 cv
128.22 133.11 li
133.394 133.869 136.482 135.557 136.482 137.625 cv
136.482 140.847 129.492 142.533 122.586 142.533 cv
cp
f
202.476 142.533 mo
177.713 142.533 li
177.713 122.283 li
179.213 122.283 li
179.213 141.033 li
200.976 141.033 li
200.976 122.283 li
202.476 122.283 li
202.476 142.533 li
cp
f
185.827 132.594 mo
194.362 132.594 li
194.362 124.059 li
185.827 124.059 li
185.827 132.594 li
cp
195.862 134.094 mo
184.327 134.094 li
184.327 122.559 li
195.862 122.559 li
195.862 134.094 li
cp
f
183.404 134.818 mo
196.785 134.818 li
196.785 134.094 li
183.404 134.094 li
183.404 134.818 li
cp
198.285 136.318 mo
181.904 136.318 li
181.904 132.594 li
198.285 132.594 li
198.285 136.318 li
cp
f
190.095 111.731 mo
204.475 123.363 li
205.252 122.4 li
190.095 110.141 li
174.937 122.401 li
175.715 123.362 li
190.095 111.731 li
cp
204.697 125.472 mo
190.095 113.661 li
175.492 125.472 li
172.828 122.178 li
190.095 108.211 li
207.362 122.178 li
204.697 125.472 li
cp
f
257.603 110.679 mo
249.234 110.679 242.426 117.487 242.426 125.856 cv
242.426 134.225 249.234 141.033 257.603 141.033 cv
265.971 141.033 272.779 134.225 272.779 125.856 cv
272.779 117.487 265.971 110.679 257.603 110.679 cv
cp
257.603 142.533 mo
248.407 142.533 240.926 135.052 240.926 125.856 cv
240.926 116.66 248.407 109.179 257.603 109.179 cv
266.798 109.179 274.279 116.66 274.279 125.856 cv
274.279 135.052 266.798 142.533 257.603 142.533 cv
cp
f
257.603 112.781 mo
250.394 112.781 244.528 118.646 244.528 125.856 cv
244.528 133.065 250.394 138.93 257.603 138.93 cv
264.813 138.93 270.678 133.065 270.678 125.856 cv
270.678 118.646 264.813 112.781 257.603 112.781 cv
cp
257.603 140.43 mo
249.566 140.43 243.028 133.892 243.028 125.856 cv
243.028 117.819 249.566 111.281 257.603 111.281 cv
265.64 111.281 272.178 117.819 272.178 125.856 cv
272.178 133.892 265.64 140.43 257.603 140.43 cv
cp
f
257.603 125.009 mo
257.136 125.009 256.757 125.389 256.757 125.856 cv
256.757 126.323 257.136 126.702 257.603 126.702 cv
258.069 126.702 258.449 126.323 258.449 125.856 cv
258.449 125.389 258.069 125.009 257.603 125.009 cv
cp
257.603 128.202 mo
256.31 128.202 255.257 127.149 255.257 125.856 cv
255.257 124.562 256.31 123.509 257.603 123.509 cv
258.896 123.509 259.949 124.562 259.949 125.856 cv
259.949 127.149 258.896 128.202 257.603 128.202 cv
cp
f
255.306 123.558 mo
251.787 131.672 li
259.9 128.153 li
263.419 120.04 li
255.306 123.558 li
cp
248.9 134.559 mo
254.165 122.417 li
266.306 117.153 li
261.041 129.294 li
248.9 134.559 li
cp
f
248.98 126.606 mo
243.778 126.606 li
243.778 125.106 li
248.98 125.106 li
248.98 126.606 li
cp
f
258.353 117.233 mo
256.853 117.233 li
256.853 112.031 li
258.353 112.031 li
258.353 117.233 li
cp
f
271.428 126.606 mo
266.226 126.606 li
266.226 125.106 li
271.428 125.106 li
271.428 126.606 li
cp
f
258.353 139.68 mo
256.853 139.68 li
256.853 134.479 li
258.353 134.479 li
258.353 139.68 li
cp
f
54.7905 205.417 mo
55.3667 205.417 li
55.3667 180.023 li
54.7905 180.023 li
54.7905 205.417 li
cp
56.8667 206.917 mo
53.2905 206.917 li
53.2905 178.523 li
56.8667 178.523 li
56.8667 206.917 li
cp
f
47.1274 207.493 mo
63.0293 207.493 li
63.0293 206.917 li
47.1274 206.917 li
47.1274 207.493 li
cp
64.5293 208.993 mo
45.6274 208.993 li
45.6274 205.417 li
64.5293 205.417 li
64.5293 208.993 li
cp
f
40.2988 191.97 mo
53.2905 191.97 li
53.2905 187.01 li
40.2993 187.01 li
37.8696 189.49 li
40.2988 191.97 li
cp
54.7905 193.47 mo
39.6689 193.47 li
35.77 189.49 li
39.6685 185.51 li
54.7905 185.51 li
54.7905 193.47 li
cp
f
56.8667 191.97 mo
69.8579 191.97 li
72.2871 189.49 li
69.8574 187.01 li
56.8667 187.01 li
56.8667 191.97 li
cp
70.4878 193.47 mo
55.3667 193.47 li
55.3667 185.51 li
70.4883 185.51 li
74.3867 189.49 li
70.4878 193.47 li
cp
f
54.0508 178.523 mo
56.106 178.523 li
55.0786 176.468 li
54.0508 178.523 li
cp
58.5327 180.023 mo
51.624 180.023 li
55.0786 173.114 li
58.5327 180.023 li
cp
f
319.113 272.543 mo
331.109 272.543 li
331.109 271.519 li
326.577 269 li
326.577 264.546 li
340.174 265.251 li
340.174 264.172 li
326.577 259.841 li
326.577 240.591 li
325.111 238.459 li
323.646 240.591 li
323.646 259.841 li
310.049 264.172 li
310.049 265.251 li
323.646 264.546 li
323.646 269 li
319.113 271.519 li
319.113 272.543 li
cp
332.609 274.043 mo
317.613 274.043 li
317.613 270.636 li
322.146 268.117 li
322.146 266.126 li
308.549 266.831 li
308.549 263.076 li
322.146 258.745 li
322.146 240.126 li
325.111 235.811 li
328.077 240.126 li
328.077 258.745 li
341.674 263.076 li
341.674 266.831 li
328.077 266.126 li
328.077 268.117 li
332.609 270.636 li
332.609 274.043 li
cp
f
322.09 330.625 mo
310.409 330.625 li
310.409 315.869 li
322.09 315.869 li
322.09 322.946 li
320.59 322.946 li
320.59 317.369 li
311.909 317.369 li
311.909 329.125 li
320.59 329.125 li
320.59 326.481 li
322.09 326.481 li
322.09 330.625 li
cp
f
314.633 339.989 mo
320.59 339.989 li
320.59 330.625 li
314.633 330.625 li
314.633 339.989 li
cp
322.09 341.489 mo
313.133 341.489 li
313.133 329.125 li
322.09 329.125 li
322.09 341.489 li
cp
f
309.835 315.869 mo
322.664 315.869 li
322.664 313.867 li
309.835 313.867 li
309.835 315.869 li
cp
324.164 317.369 mo
308.335 317.369 li
308.335 312.367 li
324.164 312.367 li
324.164 317.369 li
cp
f
313.009 342.605 mo
322.215 342.605 li
322.215 341.489 li
313.009 341.489 li
313.009 342.605 li
cp
323.715 344.105 mo
311.509 344.105 li
311.509 339.989 li
323.715 339.989 li
323.715 344.105 li
cp
f
323.245 313.117 mo
321.745 313.117 li
321.745 311.8 319.488 310.332 316.249 310.332 cv
313.011 310.332 310.754 311.8 310.754 313.117 cv
309.254 313.117 li
309.254 310.714 312.326 308.832 316.249 308.832 cv
320.172 308.832 323.245 310.714 323.245 313.117 cv
cp
f
339.813 330.625 mo
328.132 330.625 li
328.132 326.481 li
329.632 326.481 li
329.632 329.125 li
338.313 329.125 li
338.313 317.369 li
329.632 317.369 li
329.632 322.946 li
328.132 322.946 li
328.132 315.869 li
339.813 315.869 li
339.813 330.625 li
cp
f
329.632 339.989 mo
335.589 339.989 li
335.589 330.625 li
329.632 330.625 li
329.632 339.989 li
cp
337.089 341.489 mo
328.132 341.489 li
328.132 329.125 li
337.089 329.125 li
337.089 341.489 li
cp
f
327.558 315.869 mo
340.388 315.869 li
340.388 313.867 li
327.558 313.867 li
327.558 315.869 li
cp
341.888 317.369 mo
326.058 317.369 li
326.058 312.367 li
341.888 312.367 li
341.888 317.369 li
cp
f
328.008 342.605 mo
337.213 342.605 li
337.213 341.489 li
328.008 341.489 li
328.008 342.605 li
cp
338.713 344.105 mo
326.508 344.105 li
326.508 339.989 li
338.713 339.989 li
338.713 344.105 li
cp
f
340.968 313.117 mo
339.468 313.117 li
339.468 311.8 337.211 310.332 333.973 310.332 cv
330.734 310.332 328.478 311.8 328.478 313.117 cv
326.978 313.117 li
326.978 310.714 330.05 308.832 333.973 308.832 cv
337.896 308.832 340.968 310.714 340.968 313.117 cv
cp
f
318.861 325.73 mo
331.36 325.73 li
331.36 323.695 li
318.861 323.695 li
318.861 325.73 li
cp
332.86 327.23 mo
317.361 327.23 li
317.361 322.195 li
332.86 322.195 li
332.86 327.23 li
cp
f
234.147 200.142 mo
236.836 200.142 li
236.836 191.351 li
234.147 191.351 li
234.147 200.142 li
cp
238.336 201.642 mo
232.647 201.642 li
232.647 189.851 li
238.336 189.851 li
238.336 201.642 li
cp
f
247.15 198.185 mo
244.584 198.185 242.496 200.273 242.496 202.839 cv
242.496 205.405 244.584 207.493 247.15 207.493 cv
249.717 207.493 251.805 205.405 251.805 202.839 cv
251.805 200.273 249.717 198.185 247.15 198.185 cv
cp
247.15 208.993 mo
243.757 208.993 240.996 206.232 240.996 202.839 cv
240.996 199.446 243.757 196.685 247.15 196.685 cv
250.544 196.685 253.305 199.446 253.305 202.839 cv
253.305 206.232 250.544 208.993 247.15 208.993 cv
cp
f
273.48 198.185 mo
270.914 198.185 268.826 200.273 268.826 202.839 cv
268.826 205.405 270.914 207.493 273.48 207.493 cv
276.046 207.493 278.134 205.405 278.134 202.839 cv
278.134 200.273 276.046 198.185 273.48 198.185 cv
cp
273.48 208.993 mo
270.087 208.993 267.326 206.232 267.326 202.839 cv
267.326 199.446 270.087 196.685 273.48 196.685 cv
276.873 196.685 279.634 199.446 279.634 202.839 cv
279.634 206.232 276.873 208.993 273.48 208.993 cv
cp
f
238.75 189.93 mo
266.811 189.93 li
261.768 180.712 li
242.933 180.712 li
238.75 189.93 li
cp
269.342 191.43 mo
236.422 191.43 li
241.966 179.212 li
262.656 179.212 li
269.342 191.43 li
cp
f
245.445 190.774 mo
243.957 190.586 li
245.308 179.869 li
246.796 180.056 li
245.445 190.774 li
cp
f
254.908 190.68 mo
253.408 190.68 li
253.408 179.962 li
254.908 179.962 li
254.908 190.68 li
cp
f
254.908 195.994 mo
253.408 195.994 li
253.408 190.68 li
254.908 190.68 li
254.908 195.994 li
cp
f
261.363 194.672 mo
257.311 194.672 li
257.311 193.172 li
261.363 193.172 li
261.363 194.672 li
cp
f
277.244 195.717 mo
281.058 195.717 li
281.058 194.763 li
277.244 194.763 li
277.244 195.717 li
cp
282.558 197.217 mo
275.744 197.217 li
275.744 193.263 li
282.558 193.263 li
282.558 197.217 li
cp
f
238.336 197.732 mo
239.831 197.732 li
239.831 193.761 li
238.336 193.761 li
238.336 197.732 li
cp
241.331 199.232 mo
236.836 199.232 li
236.836 192.261 li
241.331 192.261 li
241.331 199.232 li
cp
f
268.219 204.827 mo
252.409 204.827 li
252.409 203.327 li
268.219 203.327 li
268.219 204.827 li
cp
f
279.27 204.61 mo
278.213 203.544 li
281.058 200.725 li
281.058 193.292 li
281.058 192.266 280.223 191.43 279.196 191.43 cv
237.586 191.43 li
237.586 189.93 li
279.196 189.93 li
281.05 189.93 282.558 191.438 282.558 193.292 cv
282.558 201.35 li
279.27 204.61 li
cp
f
241.891 204.827 mo
239.36 204.827 li
236.836 201.277 li
236.836 190.68 li
238.336 190.68 li
238.336 200.798 li
240.134 203.327 li
241.891 203.327 li
241.891 204.827 li
cp
f
242.058 201.788 mo
237.586 201.788 li
237.586 200.288 li
242.058 200.288 li
242.058 201.788 li
cp
f
268.386 201.788 mo
252.245 201.788 li
252.245 200.288 li
268.386 200.288 li
268.386 201.788 li
cp
f
268.386 201.788 mo
252.245 201.788 li
252.245 200.288 li
268.386 200.288 li
268.386 201.788 li
cp
f
242.058 201.788 mo
237.586 201.788 li
237.586 200.288 li
242.058 200.288 li
242.058 201.788 li
cp
f
281.808 200.797 mo
278.117 200.797 li
278.117 199.297 li
281.808 199.297 li
281.808 200.797 li
cp
f
247.15 201.04 mo
246.158 201.04 245.351 201.847 245.351 202.839 cv
245.351 203.831 246.158 204.638 247.15 204.638 cv
248.143 204.638 248.95 203.831 248.95 202.839 cv
248.95 201.847 248.143 201.04 247.15 201.04 cv
cp
247.15 206.138 mo
245.331 206.138 243.851 204.658 243.851 202.839 cv
243.851 201.02 245.331 199.54 247.15 199.54 cv
248.97 199.54 250.45 201.02 250.45 202.839 cv
250.45 204.658 248.97 206.138 247.15 206.138 cv
cp
f
273.48 201.04 mo
272.488 201.04 271.681 201.847 271.681 202.839 cv
271.681 203.831 272.488 204.638 273.48 204.638 cv
274.473 204.638 275.279 203.831 275.279 202.839 cv
275.279 201.847 274.473 201.04 273.48 201.04 cv
cp
273.48 206.138 mo
271.661 206.138 270.181 204.658 270.181 202.839 cv
270.181 201.02 271.661 199.54 273.48 199.54 cv
275.3 199.54 276.779 201.02 276.779 202.839 cv
276.779 204.658 275.3 206.138 273.48 206.138 cv
cp
f
244.942 71.9688 mo
259.888 71.9688 li
259.888 45.3262 li
244.942 45.3262 li
244.942 71.9688 li
cp
261.388 73.4688 mo
243.442 73.4688 li
243.442 43.8262 li
261.388 43.8262 li
261.388 73.4688 li
cp
f
260.637 71.1196 mo
245.792 71.1196 li
245.792 46.1758 li
260.637 46.1758 li
260.637 47.6758 li
247.292 47.6758 li
247.292 69.6196 li
260.637 69.6196 li
260.637 71.1196 li
cp
f
271.764 78.0449 mo
251.273 78.0449 li
251.273 72.7188 li
252.773 72.7188 li
252.773 76.5449 li
270.264 76.5449 li
270.264 49.9023 li
260.637 49.9023 li
260.637 48.4023 li
271.764 48.4023 li
271.764 78.0449 li
cp
f
269.414 75.6958 mo
256.33 75.6958 li
256.33 74.1958 li
267.914 74.1958 li
267.914 52.252 li
260.637 52.252 li
260.637 50.752 li
269.414 50.752 li
269.414 75.6958 li
cp
f
252.375 77.957 mo
251.672 76.6328 li
260.286 72.0566 li
260.989 73.3809 li
252.375 77.957 li
cp
f
264.877 56.5586 mo
264.599 56.5586 264.373 56.7847 264.373 57.063 cv
264.373 57.3413 264.599 57.5674 264.877 57.5674 cv
265.155 57.5674 265.382 57.3413 265.382 57.063 cv
265.382 56.7847 265.155 56.5586 264.877 56.5586 cv
cp
264.877 59.0674 mo
263.772 59.0674 262.873 58.1685 262.873 57.063 cv
262.873 55.9575 263.772 55.0586 264.877 55.0586 cv
265.982 55.0586 266.882 55.9575 266.882 57.063 cv
266.882 58.1685 265.982 59.0674 264.877 59.0674 cv
cp
f
251.18 63.9736 mo
250.901 63.9736 250.676 64.1997 250.676 64.478 cv
250.676 64.7563 250.901 64.9824 251.18 64.9824 cv
251.458 64.9824 251.685 64.7563 251.685 64.478 cv
251.685 64.1997 251.458 63.9736 251.18 63.9736 cv
cp
251.18 66.4824 mo
250.075 66.4824 249.176 65.5835 249.176 64.478 cv
249.176 63.3726 250.075 62.4736 251.18 62.4736 cv
252.285 62.4736 253.185 63.3726 253.185 64.478 cv
253.185 65.5835 252.285 66.4824 251.18 66.4824 cv
cp
f
252.263 61.9873 mo
250.769 61.8506 li
250.837 61.105 250.959 60.3989 251.132 59.7524 cv
252.581 60.1401 li
252.43 60.7046 252.323 61.3257 252.263 61.9873 cv
cp
f
253.392 58.1807 mo
252.106 57.4063 li
253.047 55.8481 254.448 54.7739 256.16 54.3008 cv
256.561 55.7461 li
255.206 56.1211 254.14 56.9399 253.392 58.1807 cv
cp
f
260.415 55.8691 mo
259.825 55.6865 259.226 55.5762 258.631 55.5405 cv
258.721 54.0435 li
259.435 54.0859 260.154 54.2183 260.858 54.4365 cv
260.415 55.8691 li
cp
f
261.439 70.1763 mo
260.633 69.6528 260.074 68.9233 259.906 68.1743 cv
261.369 67.8462 li
261.451 68.21 261.782 68.6108 262.256 68.9185 cv
261.439 70.1763 li
cp
f
265.269 66.562 mo
265.114 66.0767 264.832 65.5757 264.533 65.0449 cv
264.248 64.5381 263.953 64.0137 263.715 63.4199 cv
265.107 62.8613 li
265.309 63.3638 265.579 63.8447 265.841 64.3096 cv
266.163 64.8823 266.496 65.4741 266.698 66.105 cv
265.269 66.562 li
cp
263.727 70.8882 mo
263.639 70.8882 263.549 70.8853 263.46 70.8784 cv
263.573 69.3823 li
264.165 69.4268 264.626 69.2212 264.909 68.7764 cv
265.104 68.4697 265.242 68.1719 265.319 67.8901 cv
266.767 68.2856 li
266.649 68.7124 266.451 69.1489 266.175 69.582 cv
265.638 70.4243 264.769 70.8882 263.727 70.8882 cv
cp
f
263.267 61.4346 mo
263.232 60.7046 263.34 59.9727 263.594 59.1958 cv
265.02 59.6621 li
264.823 60.2632 264.739 60.8203 264.765 61.3652 cv
263.267 61.4346 li
cp
f
319.063 67.73 mo
314.609 73.7983 li
320.678 69.3447 li
319.063 67.73 li
cp
307.615 80.7915 mo
318.888 65.4331 li
322.975 69.5195 li
307.615 80.7915 li
cp
f
314.999 61.5454 mo
326.862 73.4077 li
327.32 71.1069 li
317.3 61.0864 li
314.999 61.5454 li
cp
327.784 76.4517 mo
311.956 60.6226 li
317.794 59.4585 li
328.949 70.6138 li
327.784 76.4517 li
cp
f
319.883 61.5483 mo
326.859 68.5239 li
333.872 58.1455 li
330.262 54.5356 li
319.883 61.5483 li
cp
327.084 70.8706 mo
317.537 61.3237 li
330.447 52.6001 li
335.808 57.96 li
327.084 70.8706 li
cp
f
336.69 58.8433 mo
337.06 59.2124 337.704 59.2124 338.073 58.8433 cv
338.258 58.6587 338.359 58.4131 338.359 58.1519 cv
338.359 57.8906 338.258 57.645 338.073 57.4604 cv
330.947 50.334 li
330.578 49.9648 329.934 49.9648 329.564 50.334 cv
329.38 50.5186 329.278 50.7642 329.278 51.0254 cv
329.278 51.2866 329.38 51.5322 329.564 51.7168 cv
336.69 58.8433 li
cp
337.382 60.6284 mo
336.747 60.6284 336.113 60.3867 335.63 59.9038 cv
328.504 52.7773 li
327.538 51.8115 327.538 50.2393 328.504 49.2734 cv
329.471 48.3076 331.041 48.3076 332.008 49.2734 cv
339.134 56.3999 li
340.1 57.3657 340.1 58.938 339.134 59.9038 cv
338.65 60.3867 338.017 60.6284 337.382 60.6284 cv
cp
f
327.687 60.0361 mo
326.741 58.8711 li
328.266 57.6353 li
329.211 58.8003 li
327.687 60.0361 li
cp
f
321.825 64.7871 mo
320.88 63.6221 li
325.225 60.0996 li
326.17 61.2646 li
321.825 64.7871 li
cp
f
129.422 334.08 mo
127.922 334.08 li
127.922 305.998 li
117.251 305.998 li
117.251 334.08 li
115.751 334.08 li
115.751 304.498 li
129.422 304.498 li
129.422 334.08 li
cp
f
117.251 334.08 mo
115.751 334.08 li
115.751 313.895 li
107.833 313.895 li
107.833 334.08 li
106.333 334.08 li
106.333 312.395 li
117.251 312.395 li
117.251 334.08 li
cp
f
138.84 334.08 mo
137.34 334.08 li
137.34 319.474 li
129.422 319.474 li
129.422 334.08 li
127.922 334.08 li
127.922 317.974 li
138.84 317.974 li
138.84 334.08 li
cp
f
123.336 305.248 mo
121.836 305.248 li
121.836 300.611 li
123.336 300.611 li
123.336 305.248 li
cp
f
124.47 309.621 mo
116.501 309.621 li
116.501 308.121 li
124.47 308.121 li
124.47 309.621 li
cp
f
124.47 312.446 mo
116.501 312.446 li
116.501 310.946 li
124.47 310.946 li
124.47 312.446 li
cp
f
124.47 315.271 mo
116.501 315.271 li
116.501 313.771 li
124.47 313.771 li
124.47 315.271 li
cp
f
124.47 318.097 mo
116.501 318.097 li
116.501 316.597 li
124.47 316.597 li
124.47 318.097 li
cp
f
124.47 320.923 mo
116.501 320.923 li
116.501 319.423 li
124.47 319.423 li
124.47 320.923 li
cp
f
116.501 320.923 mo
110.633 320.923 li
110.633 319.423 li
116.501 319.423 li
116.501 320.923 li
cp
f
116.501 323.24 mo
110.633 323.24 li
110.633 321.74 li
116.501 321.74 li
116.501 323.24 li
cp
f
116.501 325.559 mo
110.633 325.559 li
110.633 324.059 li
116.501 324.059 li
116.501 325.559 li
cp
f
134.541 323.965 mo
128.672 323.965 li
128.672 322.465 li
134.541 322.465 li
134.541 323.965 li
cp
f
134.541 326.283 mo
128.672 326.283 li
128.672 324.783 li
134.541 324.783 li
134.541 326.283 li
cp
f
134.541 328.602 mo
128.672 328.602 li
128.672 327.102 li
134.541 327.102 li
134.541 328.602 li
cp
f
119.058 336.788 mo
103.46 336.788 li
103.46 335.288 li
118.437 335.288 li
119.593 334.132 li
120.654 335.192 li
119.058 336.788 li
cp
f
119.277 336.568 mo
118.217 335.508 li
119.593 334.132 li
120.654 335.192 li
119.277 336.568 li
cp
f
141.712 336.788 mo
126.116 336.788 li
124.52 335.192 li
125.58 334.132 li
126.737 335.288 li
141.712 335.288 li
141.712 336.788 li
cp
f
111.96 343.886 mo
110.899 342.825 li
118.217 335.508 li
119.277 336.568 li
111.96 343.886 li
cp
f
133.213 343.886 mo
125.896 336.568 li
126.957 335.508 li
134.274 342.825 li
133.213 343.886 li
cp
f
123.336 336.038 mo
121.836 336.038 li
121.836 335.35 li
123.336 335.35 li
123.336 336.038 li
cp
f
123.336 338.574 mo
121.836 338.574 li
121.836 336.727 li
123.336 336.727 li
123.336 338.574 li
cp
f
123.336 343.355 mo
121.836 343.355 li
121.836 339.335 li
123.336 339.335 li
123.336 343.355 li
cp
f
46.0884 267.306 mo
66.4258 267.306 li
60.5781 256.822 li
63.1689 256.822 li
58.5908 248.615 li
60.4385 248.615 li
56.2573 241.119 li
52.0757 248.615 li
53.9233 248.615 li
49.3452 256.822 li
51.936 256.822 li
46.0884 267.306 li
cp
68.9805 268.806 mo
43.5337 268.806 li
49.3813 258.322 li
46.7905 258.322 li
51.3687 250.115 li
49.521 250.115 li
56.2573 238.039 li
62.9932 250.115 li
61.1455 250.115 li
65.7236 258.322 li
63.1328 258.322 li
68.9805 268.806 li
cp
f
55.1421 272.543 mo
57.6704 272.543 li
57.6704 268.806 li
55.1421 268.806 li
55.1421 272.543 li
cp
59.1704 274.043 mo
53.6421 274.043 li
53.6421 267.306 li
59.1704 267.306 li
59.1704 274.043 li
cp
f
43.0098 269.794 mo
32.3267 269.794 li
37.0703 261.291 li
34.9692 261.291 li
38.6826 254.633 li
37.1836 254.633 li
42.8892 244.406 li
48.5942 254.633 li
47.0957 254.633 li
47.4536 255.275 li
46.144 256.006 li
44.541 253.133 li
46.0396 253.133 li
42.8892 247.484 li
39.7383 253.133 li
41.2363 253.133 li
37.5229 259.791 li
39.625 259.791 li
34.8813 268.294 li
43.0098 268.294 li
43.0098 269.794 li
cp
f
44.644 274.043 mo
40.626 274.043 li
40.626 269.044 li
42.126 269.044 li
42.126 272.543 li
44.644 272.543 li
44.644 274.043 li
cp
f
77.8301 270.411 mo
68.7188 270.411 li
68.7188 268.911 li
75.2754 268.911 li
71.2202 261.642 li
73.0171 261.642 li
69.8423 255.95 li
71.1235 255.95 li
68.6152 251.454 li
66.5015 255.243 li
65.1919 254.513 li
68.6152 248.374 li
73.6782 257.45 li
72.397 257.45 li
75.5718 263.142 li
73.7749 263.142 li
77.8301 270.411 li
cp
f
70.8657 274.043 mo
67.3218 274.043 li
67.3218 272.543 li
69.3657 272.543 li
69.3657 269.661 li
70.8657 269.661 li
70.8657 274.043 li
cp
f
174.51 246.37 mo
173.101 246.37 171.954 247.518 171.954 248.928 cv
171.954 269.986 li
171.954 271.396 173.101 272.543 174.51 272.543 cv
205.679 272.543 li
207.089 272.543 208.236 271.396 208.236 269.986 cv
208.236 248.928 li
208.236 247.518 207.089 246.37 205.679 246.37 cv
174.51 246.37 li
cp
205.679 274.043 mo
174.51 274.043 li
172.273 274.043 170.454 272.224 170.454 269.986 cv
170.454 248.928 li
170.454 246.69 172.273 244.87 174.51 244.87 cv
205.679 244.87 li
207.917 244.87 209.736 246.69 209.736 248.928 cv
209.736 269.986 li
209.736 272.224 207.917 274.043 205.679 274.043 cv
cp
f
183.661 251.114 mo
196.529 251.114 li
196.529 248.822 li
183.661 248.822 li
183.661 251.114 li
cp
198.029 252.614 mo
182.161 252.614 li
182.161 247.322 li
198.029 247.322 li
198.029 252.614 li
cp
f
177.843 272.543 mo
182.645 272.543 li
182.645 271.496 li
177.843 271.496 li
177.843 272.543 li
cp
184.145 274.043 mo
176.343 274.043 li
176.343 269.996 li
184.145 269.996 li
184.145 274.043 li
cp
f
197.544 272.543 mo
202.347 272.543 li
202.347 271.496 li
197.544 271.496 li
197.544 272.543 li
cp
203.847 274.043 mo
196.044 274.043 li
196.044 269.996 li
203.847 269.996 li
203.847 274.043 li
cp
f
190.095 254.947 mo
186.681 254.947 183.904 257.725 183.904 261.139 cv
183.904 264.552 186.681 267.329 190.095 267.329 cv
193.508 267.329 196.286 264.552 196.286 261.139 cv
196.286 257.725 193.508 254.947 190.095 254.947 cv
cp
190.095 268.829 mo
185.854 268.829 182.404 265.379 182.404 261.139 cv
182.404 256.897 185.854 253.447 190.095 253.447 cv
194.335 253.447 197.786 256.897 197.786 261.139 cv
197.786 265.379 194.335 268.829 190.095 268.829 cv
cp
f
190.845 264.589 mo
189.345 264.589 li
189.345 257.688 li
190.845 257.688 li
190.845 264.589 li
cp
f
193.545 261.889 mo
186.644 261.889 li
186.644 260.389 li
193.545 260.389 li
193.545 261.889 li
cp
f
45.6792 72.9341 mo
64.4775 72.9341 li
64.4775 47.0278 li
45.6792 47.0278 li
45.6792 72.9341 li
cp
65.9775 74.4341 mo
44.1792 74.4341 li
44.1792 45.5278 li
65.9775 45.5278 li
65.9775 74.4341 li
cp
f
65.9775 46.2778 mo
64.4775 46.2778 li
64.4775 44.7002 63.1938 43.4165 61.6162 43.4165 cv
48.5405 43.4165 li
46.9629 43.4165 45.6792 44.7002 45.6792 46.2778 cv
44.1792 46.2778 li
44.1792 43.873 46.1357 41.9165 48.5405 41.9165 cv
61.6162 41.9165 li
64.021 41.9165 65.9775 43.873 65.9775 46.2778 cv
cp
f
61.6162 78.0449 mo
48.5405 78.0449 li
46.1357 78.0449 44.1792 76.0889 44.1792 73.6841 cv
45.6792 73.6841 li
45.6792 75.2617 46.9629 76.5449 48.5405 76.5449 cv
61.6162 76.5449 li
63.1938 76.5449 64.4775 75.2617 64.4775 73.6841 cv
65.9775 73.6841 li
65.9775 76.0889 64.021 78.0449 61.6162 78.0449 cv
cp
f
55.0786 75.2891 mo
54.9678 75.2891 54.8779 75.3789 54.8779 75.4893 cv
54.8779 75.7104 55.2788 75.7114 55.2788 75.4893 cv
55.2788 75.3789 55.189 75.2891 55.0786 75.2891 cv
cp
55.0786 77.1899 mo
54.1406 77.1899 53.3779 76.4272 53.3779 75.4893 cv
53.3779 74.5518 54.1406 73.7891 55.0786 73.7891 cv
56.0161 73.7891 56.7788 74.5518 56.7788 75.4893 cv
56.7788 76.4272 56.0161 77.1899 55.0786 77.1899 cv
cp
f
57.7583 45.2222 mo
52.3984 45.2222 li
52.3984 43.7222 li
57.7583 43.7222 li
57.7583 45.2222 li
cp
f
61.3589 44.0542 mo
59.8589 44.0542 li
59.8589 42.6665 li
61.3589 42.6665 li
61.3589 44.0542 li
cp
f
55.0786 59.7441 mo
52.1611 66.1465 li
55.0786 64.9346 li
57.9956 66.1465 li
55.0786 59.7441 li
cp
60.9419 68.9951 mo
55.0786 66.5586 li
49.2148 68.9951 li
55.0786 56.126 li
60.9419 68.9951 li
cp
f
55.8286 65.7466 mo
54.3286 65.7466 li
54.3286 57.9351 li
55.8286 57.9351 li
55.8286 65.7466 li
cp
f
55.8286 55.5527 mo
54.3286 55.5527 li
54.3286 51.0483 li
55.8286 51.0483 li
55.8286 55.5527 li
cp
f
63.1177 59.8374 mo
58.6133 59.8374 li
58.6133 58.3374 li
63.1177 58.3374 li
63.1177 59.8374 li
cp
f
51.5435 59.8374 mo
47.0391 59.8374 li
47.0391 58.3374 li
51.5435 58.3374 li
51.5435 59.8374 li
cp
f
193.753 78.0449 mo
189.457 78.0449 185.377 76.4155 182.265 73.457 cv
183.298 72.3701 li
186.131 75.062 189.843 76.5449 193.753 76.5449 cv
202.122 76.5449 208.93 69.7368 208.93 61.3682 cv
208.93 52.9995 202.122 46.1914 193.753 46.1914 cv
186.645 46.1914 180.404 51.2275 178.915 58.1665 cv
177.448 57.8521 li
179.085 50.2261 185.942 44.6914 193.753 44.6914 cv
202.949 44.6914 210.43 52.1724 210.43 61.3682 cv
210.43 70.564 202.949 78.0449 193.753 78.0449 cv
cp
f
193.753 78.0449 mo
190.358 78.0449 187.183 76.2773 184.812 73.0674 cv
186.018 72.1758 li
188.099 74.9932 190.846 76.5449 193.753 76.5449 cv
199.837 76.5449 204.787 69.7368 204.787 61.3682 cv
204.787 52.9995 199.837 46.1914 193.753 46.1914 cv
188.992 46.1914 184.783 50.3726 183.278 56.5952 cv
181.82 56.2427 li
183.49 49.3335 188.286 44.6914 193.753 44.6914 cv
200.664 44.6914 206.287 52.1724 206.287 61.3682 cv
206.287 70.564 200.664 78.0449 193.753 78.0449 cv
cp
f
193.753 78.0449 mo
191.377 78.0449 189.176 75.8706 187.714 72.0791 cv
189.114 71.5391 li
190.34 74.7202 192.031 76.5449 193.753 76.5449 cv
196.805 76.5449 200.073 70.4463 200.073 61.3682 cv
200.073 52.29 196.805 46.1914 193.753 46.1914 cv
191.042 46.1914 188.495 50.7754 187.696 57.0918 cv
186.208 56.9033 li
187.131 49.5991 190.164 44.6914 193.753 44.6914 cv
198.138 44.6914 201.573 52.0166 201.573 61.3682 cv
201.573 70.7197 198.138 78.0449 193.753 78.0449 cv
cp
f
194.503 77.2949 mo
193.003 77.2949 li
193.003 45.4414 li
194.503 45.4414 li
194.503 77.2949 li
cp
f
209.672 62.1182 mo
190.864 62.1182 li
190.864 60.6182 li
209.672 60.6182 li
209.672 62.1182 li
cp
f
193.753 55.0483 mo
188.689 55.0483 183.976 54.0205 180.823 52.228 cv
181.564 50.9243 li
184.499 52.5918 188.941 53.5483 193.753 53.5483 cv
198.565 53.5483 203.007 52.5918 205.941 50.9248 cv
206.682 52.2285 li
203.529 54.0205 198.817 55.0483 193.753 55.0483 cv
cp
f
205.941 71.8115 mo
203.007 70.1445 198.564 69.1885 193.753 69.1885 cv
192.687 69.1885 191.624 69.2363 190.593 69.3306 cv
190.457 67.8364 li
191.533 67.7383 192.642 67.6885 193.753 67.6885 cv
198.816 67.6885 203.529 68.7158 206.682 70.5078 cv
205.941 71.8115 li
cp
f
183.25 58.7622 mo
181.766 58.7622 180.282 59.3271 179.152 60.457 cv
178.057 61.5513 177.455 63.0068 177.455 64.5547 cv
177.455 66.103 178.057 67.5581 179.152 68.6528 cv
181.412 70.9126 185.088 70.9126 187.348 68.6528 cv
188.443 67.5581 189.045 66.103 189.045 64.5547 cv
189.045 63.0068 188.443 61.5513 187.348 60.457 cv
186.218 59.3271 184.734 58.7622 183.25 58.7622 cv
cp
183.25 71.8467 mo
181.382 71.8467 179.514 71.1357 178.091 69.7134 cv
176.713 68.3354 175.955 66.5034 175.955 64.5547 cv
175.955 62.606 176.713 60.7739 178.091 59.3965 cv
180.936 56.5518 185.564 56.5518 188.409 59.3965 cv
189.787 60.7739 190.545 62.606 190.545 64.5547 cv
190.545 66.5034 189.787 68.3354 188.409 69.7134 cv
186.986 71.1357 185.118 71.8467 183.25 71.8467 cv
cp
f
179.568 64.4497 mo
178.069 64.4077 li
178.106 63.0796 178.645 61.8306 179.585 60.8901 cv
180.564 59.9111 181.866 59.3716 183.25 59.3716 cv
184.634 59.3716 185.936 59.9111 186.915 60.8901 cv
185.854 61.9507 li
184.463 60.5596 182.038 60.5586 180.646 61.9507 cv
179.978 62.6191 179.595 63.5063 179.568 64.4497 cv
cp
f
176.04 72.8262 mo
174.979 71.7656 li
177.035 69.7095 li
178.096 70.77 li
176.04 72.8262 li
cp
f
171.57 75.6821 mo
172.123 76.2344 li
175.255 73.1021 li
174.703 72.5498 li
171.57 75.6821 li
cp
172.123 78.3555 mo
169.449 75.6821 li
174.703 70.4287 li
177.376 73.1021 li
172.123 78.3555 li
cp
f
190.095 176.529 mo
187.839 176.529 186.004 178.364 186.004 180.62 cv
186.004 182.876 187.839 184.711 190.095 184.711 cv
192.351 184.711 194.186 182.876 194.186 180.62 cv
194.186 178.364 192.351 176.529 190.095 176.529 cv
cp
190.095 186.211 mo
187.012 186.211 184.504 183.703 184.504 180.62 cv
184.504 177.537 187.012 175.029 190.095 175.029 cv
193.178 175.029 195.686 177.537 195.686 180.62 cv
195.686 183.703 193.178 186.211 190.095 186.211 cv
cp
f
190.095 173.379 mo
186.102 173.379 182.854 176.627 182.854 180.62 cv
182.854 183.75 187.635 190.553 190.095 193.721 cv
192.554 190.553 197.336 183.75 197.336 180.62 cv
197.336 176.627 194.088 173.379 190.095 173.379 cv
cp
190.095 196.124 mo
189.511 195.401 li
189.178 194.988 181.354 185.246 181.354 180.62 cv
181.354 175.8 185.275 171.879 190.095 171.879 cv
194.915 171.879 198.836 175.8 198.836 180.62 cv
198.836 185.246 191.011 194.988 190.678 195.401 cv
190.095 196.124 li
cp
f
190.845 194.93 mo
189.345 194.93 li
189.345 185.461 li
190.845 185.461 li
190.845 194.93 li
cp
f
190.845 175.779 mo
189.345 175.779 li
189.345 172.641 li
190.845 172.641 li
190.845 175.779 li
cp
f
190.845 208.243 mo
189.345 208.243 li
189.345 198.041 li
190.845 198.041 li
190.845 208.243 li
cp
f
182.109 203.597 mo
180.747 202.97 li
184.759 194.248 li
186.121 194.875 li
182.109 203.597 li
cp
f
181.333 197.775 mo
175.441 205.845 li
180.847 202.751 li
183.78 196.375 li
181.333 197.775 li
cp
199.342 202.751 mo
204.749 205.845 li
198.856 197.775 li
196.41 196.375 li
199.342 202.751 li
cp
210.107 210.64 mo
198.761 204.147 li
190.095 209.107 li
181.428 204.147 li
170.083 210.64 li
180.311 196.633 li
187.1 192.748 li
182.396 202.973 li
190.095 207.378 li
197.793 202.973 li
193.09 192.748 li
199.879 196.633 li
210.107 210.64 li
cp
f
116.206 188.464 mo
124.859 197.117 li
128.857 193.12 li
120.203 184.466 li
116.206 188.464 li
cp
124.859 199.238 mo
114.084 188.464 li
120.203 182.345 li
130.978 193.12 li
124.859 199.238 li
cp
f
106.251 202.397 mo
110.246 206.391 li
119.583 197.054 li
115.589 193.06 li
106.251 202.397 li
cp
110.246 208.512 mo
104.13 202.397 li
115.589 190.939 li
121.704 197.054 li
110.246 208.512 li
cp
f
124.799 183.85 mo
128.793 187.843 li
138.131 178.506 li
134.137 174.512 li
124.799 183.85 li
cp
128.793 189.964 mo
122.678 183.85 li
134.137 172.391 li
140.252 178.506 li
128.793 189.964 li
cp
f
118.646 195.057 mo
117.586 193.997 li
119.132 192.451 li
120.192 193.511 li
118.646 195.057 li
cp
f
125.25 188.453 mo
124.19 187.392 li
125.736 185.847 li
126.796 186.907 li
125.25 188.453 li
cp
f
128.86 198.181 mo
126.858 196.179 li
127.918 195.119 li
129.921 197.121 li
128.86 198.181 li
cp
f
130.725 197.848 mo
130.421 197.848 130.136 197.966 129.921 198.181 cv
129.477 198.625 129.477 199.347 129.921 199.791 cv
130.351 200.221 131.101 200.22 131.53 199.791 cv
131.974 199.347 131.974 198.625 131.53 198.181 cv
131.315 197.966 131.029 197.848 130.725 197.848 cv
cp
130.725 201.624 mo
130.021 201.624 129.358 201.349 128.86 200.851 cv
127.832 199.823 127.832 198.149 128.86 197.121 cv
129.856 196.125 131.594 196.124 132.59 197.121 cv
133.619 198.149 133.619 199.823 132.59 200.851 cv
132.092 201.35 131.43 201.624 130.725 201.624 cv
cp
f
130.725 204.129 mo
129.408 204.129 128.09 203.627 127.087 202.624 cv
128.147 201.563 li
129.525 202.939 131.926 202.94 133.303 201.563 cv
134.725 200.142 134.725 197.83 133.303 196.408 cv
134.364 195.348 li
135.335 196.319 135.871 197.611 135.871 198.986 cv
135.871 200.36 135.335 201.652 134.364 202.624 cv
133.361 203.627 132.043 204.129 130.725 204.129 cv
cp
f
130.725 206.592 mo
128.693 206.592 126.784 205.8 125.347 204.364 cv
126.408 203.303 li
127.561 204.457 129.094 205.092 130.725 205.092 cv
132.356 205.092 133.89 204.457 135.043 203.303 cv
137.423 200.922 137.423 197.049 135.043 194.668 cv
136.104 193.608 li
137.54 195.044 138.331 196.954 138.331 198.986 cv
138.331 201.018 137.54 202.927 136.104 204.364 cv
134.667 205.801 132.757 206.592 130.725 206.592 cv
cp
f
130.725 208.988 mo
128.163 208.988 125.6 208.013 123.649 206.062 cv
124.71 205.001 li
128.027 208.317 133.423 208.318 136.741 205.001 cv
140.057 201.685 140.057 196.288 136.741 192.971 cv
137.801 191.91 li
141.703 195.812 141.703 202.16 137.801 206.062 cv
135.851 208.013 133.288 208.988 130.725 208.988 cv
cp
f
244.336 268.699 mo
254.876 269.26 li
266.04 272.504 li
279.842 267.43 li
274.021 259.162 li
271.675 259.318 li
263.579 242.275 li
259.191 252.321 li
257.192 250.909 li
250.815 263.086 li
249.174 261.989 li
244.336 268.699 li
cp
266.095 274.082 mo
254.541 270.725 li
241.508 270.057 li
248.803 259.938 li
250.261 260.912 li
256.659 248.696 li
258.553 250.034 li
263.522 238.658 li
272.593 257.754 li
274.764 257.609 li
282.193 268.164 li
266.095 274.082 li
cp
f
243.186 265.666 mo
232.757 265.079 li
241.509 253.265 li
244.049 254.701 li
248.969 246.559 li
252.898 252.673 li
251.637 253.483 li
249.008 249.395 li
244.58 256.725 li
241.925 255.224 li
235.618 263.737 li
243.27 264.168 li
243.186 265.666 li
cp
f
258.354 257.788 mo
258.122 251.204 li
259.622 251.151 li
259.749 254.767 li
261.941 253.026 li
266.132 255.963 li
269.785 254.139 li
270.455 255.48 li
266.003 257.703 li
261.998 254.897 li
258.354 257.788 li
cp
f
265.858 274.014 mo
265.125 273.801 265.049 273.779 265.317 256.821 cv
266.817 256.845 li
266.725 262.691 266.632 272.271 266.779 273.087 cv
266.092 273.21 li
265.858 274.014 li
cp
f
255.378 270.218 mo
253.956 269.743 li
256.816 261.179 li
258.238 261.653 li
255.378 270.218 li
cp
f
249.792 258.335 mo
248.046 255.753 li
244.457 256.449 li
244.172 254.977 li
248.733 254.091 li
251.034 257.495 li
249.792 258.335 li
cp
f
311.877 123.146 mo
310.377 123.146 li
310.377 121.536 li
311.877 121.536 li
311.877 123.146 li
cp
f
317.404 125.999 mo
315.891 125.999 314.588 127.078 314.307 128.566 cv
312.656 137.293 li
312.481 138.219 312.726 139.167 313.326 139.892 cv
313.928 140.617 314.813 141.033 315.754 141.033 cv
334.468 141.033 li
335.409 141.033 336.294 140.617 336.896 139.892 cv
337.496 139.167 337.74 138.219 337.565 137.293 cv
335.915 128.566 li
335.634 127.078 334.331 125.999 332.817 125.999 cv
317.404 125.999 li
cp
334.468 142.533 mo
315.754 142.533 li
314.364 142.533 313.059 141.919 312.172 140.849 cv
311.284 139.779 310.924 138.381 311.182 137.015 cv
312.832 128.288 li
313.247 126.092 315.17 124.499 317.404 124.499 cv
332.817 124.499 li
335.052 124.499 336.975 126.092 337.39 128.288 cv
339.04 137.015 li
339.298 138.381 338.938 139.779 338.05 140.849 cv
337.163 141.919 335.857 142.533 334.468 142.533 cv
cp
f
334.718 125.427 mo
333.218 125.427 li
333.218 116.434 li
333.218 114.404 331.566 112.752 329.536 112.752 cv
320.687 112.752 li
318.656 112.752 317.005 114.404 317.005 116.434 cv
317.005 125.427 li
315.505 125.427 li
315.505 116.434 li
315.505 113.577 317.829 111.252 320.687 111.252 cv
329.536 111.252 li
332.394 111.252 334.718 113.577 334.718 116.434 cv
334.718 125.427 li
cp
f
328.791 112.002 mo
327.291 112.002 li
327.291 109.814 li
322.931 109.814 li
322.931 112.002 li
321.431 112.002 li
321.431 108.314 li
328.791 108.314 li
328.791 112.002 li
cp
f
329.409 115.885 mo
320.813 115.885 li
320.813 114.385 li
329.409 114.385 li
329.409 115.885 li
cp
f
333.518 129.54 mo
316.704 129.54 li
316.704 128.04 li
333.518 128.04 li
333.518 129.54 li
cp
f
324.211 141.783 mo
322.711 141.783 li
322.711 133.458 li
316.013 133.458 li
316.013 141.783 li
314.513 141.783 li
314.513 131.958 li
324.211 131.958 li
324.211 141.783 li
cp
f
317.404 125.999 mo
315.891 125.999 314.588 127.078 314.307 128.566 cv
312.656 137.293 li
312.481 138.219 312.726 139.167 313.326 139.892 cv
313.928 140.617 314.813 141.033 315.754 141.033 cv
334.468 141.033 li
335.409 141.033 336.294 140.617 336.896 139.892 cv
337.496 139.167 337.74 138.219 337.565 137.293 cv
335.915 128.566 li
335.634 127.078 334.331 125.999 332.817 125.999 cv
317.404 125.999 li
cp
334.468 142.533 mo
315.754 142.533 li
314.364 142.533 313.059 141.919 312.172 140.849 cv
311.284 139.779 310.924 138.381 311.182 137.015 cv
312.832 128.288 li
313.247 126.092 315.17 124.499 317.404 124.499 cv
332.817 124.499 li
335.052 124.499 336.975 126.092 337.39 128.288 cv
339.04 137.015 li
339.298 138.381 338.938 139.779 338.05 140.849 cv
337.163 141.919 335.857 142.533 334.468 142.533 cv
cp
f
335.709 141.783 mo
334.209 141.783 li
334.209 133.458 li
327.511 133.458 li
327.511 141.783 li
326.011 141.783 li
326.011 131.958 li
335.709 131.958 li
335.709 141.783 li
cp
f
321.563 124.499 mo
328.659 124.499 li
328.659 118.946 li
321.563 118.946 li
321.563 124.499 li
cp
330.159 125.999 mo
320.063 125.999 li
320.063 117.446 li
330.159 117.446 li
330.159 125.999 li
cp
f
323.461 135.965 mo
315.263 135.965 li
315.263 134.465 li
323.461 134.465 li
323.461 135.965 li
cp
f
329.21 121.421 mo
321.012 121.421 li
321.012 119.921 li
329.21 119.921 li
329.21 121.421 li
cp
f
334.959 135.965 mo
326.761 135.965 li
326.761 134.465 li
334.959 134.465 li
334.959 135.965 li
cp
f
331.61 137.69 mo
330.11 137.69 li
330.11 135.215 li
331.61 135.215 li
331.61 137.69 li
cp
f
320.111 137.69 mo
318.611 137.69 li
318.611 135.215 li
320.111 135.215 li
320.111 137.69 li
cp
f
325.861 123.146 mo
324.361 123.146 li
324.361 120.671 li
325.861 120.671 li
325.861 123.146 li
cp
f
311.22 137.426 mo
307.734 128.447 li
313.424 128.447 li
313.424 129.947 li
309.926 129.947 li
312.618 136.883 li
311.22 137.426 li
cp
f
339.002 137.426 mo
337.604 136.883 li
340.297 129.947 li
336.799 129.947 li
336.799 128.447 li
342.488 128.447 li
339.002 137.426 li
cp
f
314.174 128.79 mo
312.674 128.79 li
312.674 125.664 li
312.674 124.811 311.979 124.117 311.127 124.117 cv
310.274 124.117 309.58 124.811 309.58 125.664 cv
309.58 128.79 li
308.08 128.79 li
308.08 125.664 li
308.08 123.984 309.447 122.617 311.127 122.617 cv
312.807 122.617 314.174 123.984 314.174 125.664 cv
314.174 128.79 li
cp
f
337.746 128.447 mo
339.34 128.447 li
339.34 122.658 li
337.746 122.658 li
337.746 128.447 li
cp
340.84 129.947 mo
336.246 129.947 li
336.246 121.158 li
340.84 121.158 li
340.84 129.947 li
cp
f
249.271 323.797 mo
247.696 323.797 246.124 324.396 244.926 325.594 cv
242.531 327.989 242.531 331.887 244.926 334.282 cv
247.322 336.678 251.22 336.676 253.614 334.282 cv
256.009 331.887 256.009 327.989 253.614 325.594 cv
252.417 324.396 250.843 323.797 249.271 323.797 cv
cp
249.271 337.577 mo
247.313 337.577 245.355 336.832 243.865 335.343 cv
240.886 332.362 240.886 327.514 243.865 324.533 cv
246.846 321.554 251.694 321.552 254.675 324.533 cv
257.654 327.514 257.654 332.362 254.675 335.343 cv
254.675 335.343 li
253.185 336.832 251.228 337.577 249.271 337.577 cv
cp
f
245.354 329.826 mo
243.854 329.783 li
243.893 328.396 244.455 327.089 245.438 326.106 cv
247.552 323.995 250.988 323.993 253.102 326.106 cv
252.041 327.167 li
250.513 325.64 248.025 325.64 246.499 327.167 cv
245.788 327.878 245.382 328.822 245.354 329.826 cv
cp
f
241.647 338.621 mo
240.587 337.561 li
242.753 335.395 li
243.813 336.455 li
241.647 338.621 li
cp
f
236.913 341.657 mo
237.551 342.295 li
240.906 338.939 li
240.269 338.302 li
236.913 341.657 li
cp
237.551 344.416 mo
234.792 341.657 li
240.269 336.181 li
243.027 338.939 li
237.551 344.416 li
cp
f
280.104 343.399 mo
271.615 337.67 li
263.878 342.894 li
256.14 337.67 li
248.821 342.61 li
247.981 341.366 li
256.14 335.859 li
263.878 341.083 li
271.615 335.859 li
278.604 340.577 li
278.604 321.447 li
271.615 316.73 li
263.878 321.954 li
256.14 316.73 li
248.821 321.671 li
247.981 320.427 li
256.14 314.92 li
263.878 320.144 li
271.615 314.92 li
280.104 320.65 li
280.104 343.399 li
cp
f
264.628 341.988 mo
263.128 341.988 li
263.128 321.049 li
264.628 321.049 li
264.628 341.988 li
cp
f
272.365 336.765 mo
270.865 336.765 li
270.865 315.825 li
272.365 315.825 li
272.365 336.765 li
cp
f
256.89 323.045 mo
255.39 323.045 li
255.39 315.825 li
256.89 315.825 li
256.89 323.045 li
cp
f
201.981 339.29 mo
200.481 339.29 li
200.481 318.873 li
201.981 318.873 li
201.981 339.29 li
cp
f
171.233 339.29 mo
169.733 339.29 li
169.733 311.857 li
195.819 311.857 li
195.819 313.357 li
171.233 313.357 li
171.233 339.29 li
cp
f
205.296 344.105 mo
174.548 344.105 li
174.548 342.605 li
205.296 342.605 li
205.296 344.105 li
cp
f
174.548 344.105 mo
171.893 344.105 169.733 341.945 169.733 339.29 cv
171.233 339.29 li
171.233 341.118 172.72 342.605 174.548 342.605 cv
174.548 344.105 li
cp
f
205.296 344.105 mo
202.641 344.105 200.481 341.945 200.481 339.29 cv
201.981 339.29 li
201.981 341.118 203.468 342.605 205.296 342.605 cv
205.296 344.105 li
cp
f
183.22 322.069 mo
182.094 321.079 li
182.771 320.31 183.623 319.76 184.558 319.49 cv
185.092 319.337 185.656 319.273 186.242 319.303 cv
186.167 320.801 li
185.969 320.796 li
185.623 320.796 185.288 320.842 184.973 320.932 cv
184.305 321.124 183.715 321.508 183.22 322.069 cv
cp
189.551 323.857 mo
189.322 322.348 188.456 321.598 187.769 321.234 cv
188.47 319.908 li
189.872 320.649 190.782 321.973 191.034 323.633 cv
189.551 323.857 li
cp
181.312 327.506 mo
180.951 326.906 180.58 326.149 180.566 325.079 cv
180.566 324.375 180.695 323.686 180.94 323.024 cv
182.347 323.546 li
182.163 324.042 182.066 324.551 182.066 325.019 cv
182.075 325.73 182.284 326.213 182.597 326.732 cv
181.312 327.506 li
cp
189.815 329.807 mo
188.403 329.301 li
188.99 327.697 li
189.257 326.969 189.44 326.273 189.533 325.631 cv
191.018 325.846 li
190.909 326.592 190.701 327.388 190.398 328.213 cv
189.815 329.807 li
cp
182.032 332.995 mo
181.003 331.903 li
181.714 331.232 182.114 330.518 182.189 329.779 cv
182.198 329.697 182.202 329.619 182.202 329.543 cv
182.202 329.377 182.183 329.222 182.145 329.069 cv
183.599 328.7 li
183.667 328.972 183.702 329.255 183.702 329.543 cv
183.702 329.668 183.695 329.799 183.682 329.934 cv
183.568 331.039 183.013 332.069 182.032 332.995 cv
cp
173.775 333.874 mo
172.262 333.348 170.925 332.653 170.013 331.92 cv
170.953 330.75 li
171.724 331.37 172.932 331.992 174.269 332.458 cv
173.775 333.874 li
cp
178.037 334.692 mo
177.357 334.692 176.603 334.607 175.795 334.439 cv
176.1 332.971 li
177.58 333.279 178.856 333.262 179.559 332.923 cv
180.209 334.274 li
179.633 334.552 178.902 334.692 178.037 334.692 cv
cp
189.173 335.645 mo
188.465 334.866 188.014 334.011 187.833 333.101 cv
187.766 332.766 187.733 332.455 187.733 332.149 cv
187.733 331.886 187.757 331.622 187.805 331.342 cv
189.283 331.596 li
189.25 331.788 189.233 331.969 189.233 332.149 cv
189.233 332.358 189.256 332.567 189.303 332.808 cv
189.431 333.446 189.76 334.061 190.282 334.635 cv
189.173 335.645 li
cp
f
194.726 338.554 mo
190.361 334.188 li
191.421 333.128 li
195.786 337.493 li
194.726 338.554 li
cp
f
191.421 338.554 mo
190.361 337.493 li
194.726 333.128 li
195.786 334.188 li
191.421 338.554 li
cp
f
194.121 319.887 mo
199.409 311.855 li
202.152 314.597 li
194.121 319.887 li
cp
f
198.273 310.718 mo
203.288 315.733 li
203.345 315.445 li
202.604 314.703 li
207.436 307.551 li
208.747 308.862 li
208.793 308.911 208.873 308.909 208.921 308.862 cv
208.969 308.814 208.969 308.735 208.92 308.687 cv
205.319 305.086 li
205.271 305.039 205.192 305.039 205.144 305.086 cv
205.103 305.127 205.103 305.219 205.144 305.26 cv
206.455 306.57 li
199.303 311.402 li
198.561 310.66 li
198.273 310.718 li
cp
204.211 318.778 mo
195.229 309.796 li
199.054 309.033 li
199.489 309.467 li
204.108 306.346 li
204.083 306.32 li
203.451 305.688 203.451 304.658 204.083 304.025 cv
204.716 303.393 205.746 303.393 206.379 304.025 cv
209.981 307.627 li
210.614 308.261 210.614 309.291 209.981 309.923 cv
209.349 310.556 208.319 310.556 207.686 309.923 cv
207.661 309.898 li
204.539 314.518 li
204.973 314.951 li
204.211 318.778 li
cp
f
116.425 249.132 mo
116.111 249.132 115.795 249.147 115.478 249.178 cv
111.001 249.616 107.373 253.179 106.85 257.647 cv
106.584 259.918 107.095 262.127 108.328 264.036 cv
108.945 264.993 li
107.823 265.183 li
105.977 265.494 104.651 267.143 104.74 269.016 cv
104.832 270.96 106.583 272.543 108.642 272.543 cv
138.008 272.543 li
138.733 272.543 139.416 272.223 139.879 271.663 cv
140.35 271.096 140.532 270.376 140.392 269.635 cv
140.241 268.83 139.631 268.124 138.839 267.836 cv
138.297 267.638 137.758 267.633 137.234 267.818 cv
136.882 267.945 136.484 267.816 136.27 267.506 cv
136.055 267.193 136.077 266.772 136.324 266.482 cv
137.636 264.947 138.165 262.995 137.814 260.982 cv
137.335 258.232 135.069 256.024 132.303 255.611 cv
130.404 255.327 128.546 255.832 127.077 257.033 cv
126.143 257.797 li
125.871 256.621 li
124.854 252.215 120.886 249.132 116.425 249.132 cv
cp
138.008 274.043 mo
108.642 274.043 li
105.794 274.043 103.371 271.819 103.242 269.086 cv
103.134 266.813 104.51 264.776 106.56 263.982 cv
105.507 261.987 105.093 259.757 105.359 257.474 cv
105.964 252.309 110.158 248.191 115.332 247.686 cv
120.548 247.17 125.391 250.364 127.033 255.227 cv
128.662 254.225 130.577 253.84 132.525 254.127 cv
135.921 254.635 138.704 257.348 139.292 260.725 cv
139.625 262.635 139.283 264.563 138.348 266.2 cv
138.685 266.23 139.021 266.306 139.352 266.426 cv
139.353 266.426 li
140.652 266.899 141.615 268.022 141.867 269.357 cv
142.086 270.527 141.783 271.717 141.034 272.62 cv
140.284 273.524 139.181 274.043 138.008 274.043 cv
cp
f
113.445 269.632 mo
113.356 269.632 113.268 269.64 113.178 269.655 cv
112.601 269.756 112.111 270.245 112.011 270.819 cv
111.935 271.261 112.047 271.688 112.329 272.023 cv
112.606 272.354 113.012 272.543 113.443 272.543 cv
129.148 272.543 li
130.113 272.543 131.021 272.117 131.64 271.374 cv
132.267 270.621 132.512 269.663 132.331 268.678 cv
132.114 267.508 131.187 266.506 130.021 266.184 cv
130.021 266.184 li
128.917 265.881 128.031 266.209 127.483 266.538 cv
126.511 267.126 li
126.353 266.001 li
125.94 263.058 123.386 260.935 120.415 261.069 cv
117.531 261.198 115.13 263.557 114.949 266.438 cv
114.897 267.268 115.021 268.08 115.318 268.854 cv
115.51 269.352 li
114.686 270.091 li
114.172 269.828 li
113.949 269.698 113.701 269.632 113.445 269.632 cv
cp
129.148 274.043 mo
113.443 274.043 li
112.568 274.043 111.744 273.659 111.181 272.989 cv
110.617 272.319 110.381 271.435 110.534 270.562 cv
110.742 269.366 111.723 268.386 112.92 268.178 cv
113.134 268.141 113.349 268.125 113.56 268.134 cv
113.45 267.549 113.414 266.95 113.452 266.345 cv
113.681 262.709 116.71 259.733 120.348 259.571 cv
123.768 259.422 126.734 261.621 127.634 264.816 cv
128.526 264.505 129.475 264.476 130.421 264.738 cv
130.421 264.738 li
132.154 265.217 133.482 266.657 133.805 268.406 cv
134.065 269.816 133.696 271.248 132.792 272.334 cv
131.888 273.42 130.56 274.043 129.148 274.043 cv
cp
f
134.341 253.463 mo
132.942 252.922 li
133.114 252.478 133.219 252.01 133.255 251.529 cv
133.451 248.87 131.448 246.547 128.789 246.351 cv
126.873 246.215 125.047 247.219 124.15 248.924 cv
122.823 248.225 li
123.999 245.991 126.389 244.668 128.899 244.854 cv
132.383 245.112 135.008 248.156 134.751 251.641 cv
134.704 252.269 134.566 252.882 134.341 253.463 cv
cp
f
129.731 243.781 mo
128.235 243.67 li
128.454 240.703 li
129.95 240.814 li
129.731 243.781 li
cp
f
125.681 244.19 mo
124.872 241.328 li
126.315 240.92 li
127.124 243.782 li
125.681 244.19 li
cp
f
123.458 245.553 mo
121.72 243.139 li
122.937 242.262 li
124.675 244.676 li
123.458 245.553 li
cp
f
121.836 247.593 mo
119.376 245.92 li
120.22 244.68 li
122.68 246.353 li
121.836 247.593 li
cp
f
138.37 254.466 mo
135.486 253.734 li
135.855 252.281 li
138.739 253.013 li
138.37 254.466 li
cp
f
135.938 251.168 mo
135.787 249.676 li
138.746 249.376 li
138.897 250.868 li
135.938 251.168 li
cp
f
135.483 248.602 mo
134.831 247.25 li
137.51 245.957 li
138.162 247.309 li
135.483 248.602 li
cp
f
134.179 246.345 mo
133.104 245.298 li
135.178 243.167 li
136.253 244.214 li
134.179 246.345 li
cp
f
132.181 244.671 mo
130.813 244.056 li
132.033 241.343 li
133.401 241.958 li
132.181 244.671 li
cp
f
306.096 207.493 mo
322.979 207.493 li
314.193 182.777 li
306.096 207.493 li
cp
324.571 207.493 mo
344.427 207.493 li
336.993 184.802 li
315.293 181.394 li
324.571 207.493 li
cp
346.497 208.993 mo
304.025 208.993 li
313.65 179.617 li
338.134 183.462 li
346.497 208.993 li
cp
f
310.499 207.493 mo
318.576 207.493 li
314.373 195.669 li
310.499 207.493 li
cp
320.701 208.993 mo
308.429 208.993 li
314.314 191.028 li
320.701 208.993 li
cp
f
315.094 193.349 mo
313.594 193.349 li
313.594 180.873 li
315.094 180.873 li
315.094 193.349 li
cp
f
324.571 207.493 mo
344.427 207.493 li
336.993 184.802 li
315.293 181.394 li
324.571 207.493 li
cp
346.497 208.993 mo
323.977 208.993 li
323.977 208.266 li
323.335 208.494 li
313.035 179.521 li
338.134 183.462 li
346.497 208.993 li
cp
f
325.797 194.753 mo
334.653 195.078 li
332.873 189.644 li
323.455 188.165 li
325.797 194.753 li
cp
336.749 196.656 mo
324.79 196.218 li
324.591 195.82 li
321.197 186.292 li
334.012 188.304 li
336.749 196.656 li
cp
f
304.403 208.604 mo
302.144 204.488 li
303.458 203.766 li
305.718 207.882 li
304.403 208.604 li
cp
f
345.818 208.604 mo
344.504 207.882 li
346.764 203.766 li
348.078 204.488 li
345.818 208.604 li
cp
f
324.789 208.604 mo
323.475 207.882 li
325.734 203.766 li
327.049 204.488 li
324.789 208.604 li
cp
f
377.85 60.0313 mo
373.297 60.0313 369.593 63.7354 369.593 68.2881 cv
369.593 72.8408 373.297 76.5449 377.85 76.5449 cv
382.402 76.5449 386.106 72.8408 386.106 68.2881 cv
386.106 63.7354 382.402 60.0313 377.85 60.0313 cv
cp
377.85 78.0449 mo
372.47 78.0449 368.093 73.668 368.093 68.2881 cv
368.093 62.9082 372.47 58.5313 377.85 58.5313 cv
383.229 58.5313 387.606 62.9082 387.606 68.2881 cv
387.606 73.668 383.229 78.0449 377.85 78.0449 cv
cp
f
407.389 60.0313 mo
402.836 60.0313 399.132 63.7354 399.132 68.2881 cv
399.132 72.8408 402.836 76.5449 407.389 76.5449 cv
411.941 76.5449 415.646 72.8408 415.646 68.2881 cv
415.646 63.7354 411.941 60.0313 407.389 60.0313 cv
cp
407.389 78.0449 mo
402.009 78.0449 397.632 73.668 397.632 68.2881 cv
397.632 62.9082 402.009 58.5313 407.389 58.5313 cv
412.769 58.5313 417.146 62.9082 417.146 68.2881 cv
417.146 73.668 412.769 78.0449 407.389 78.0449 cv
cp
f
386.594 58.0308 mo
374.365 58.0308 li
374.365 56.5308 li
386.594 56.5308 li
386.594 58.0308 li
cp
f
385.871 57.48 mo
384.819 53.667 li
386.265 53.2686 li
387.316 57.0815 li
385.871 57.48 li
cp
f
393.978 66.6543 mo
392.905 65.6045 li
400.325 58.0308 li
386.594 58.0308 li
386.594 56.5308 li
403.894 56.5308 li
393.978 66.6543 li
cp
f
388.303 69.0381 mo
379.852 69.0381 li
379.852 67.5381 li
388.303 67.5381 li
388.303 69.0381 li
cp
f
379.678 67.1919 mo
378.504 66.2593 li
386.007 56.8145 li
387.181 57.7471 li
379.678 67.1919 li
cp
f
391.327 66.0137 mo
390.073 66.0137 389.053 67.0342 389.053 68.2881 cv
389.053 69.542 390.073 70.5625 391.327 70.5625 cv
392.581 70.5625 393.602 69.542 393.602 68.2881 cv
393.602 67.0342 392.581 66.0137 391.327 66.0137 cv
cp
391.327 72.0625 mo
389.246 72.0625 387.553 70.3691 387.553 68.2881 cv
387.553 66.207 389.246 64.5137 391.327 64.5137 cv
393.408 64.5137 395.102 66.207 395.102 68.2881 cv
395.102 70.3691 393.408 72.0625 391.327 72.0625 cv
cp
f
377.85 67.0352 mo
377.159 67.0352 376.597 67.5972 376.597 68.2881 cv
376.597 68.979 377.159 69.541 377.85 69.541 cv
378.54 69.541 379.103 68.979 379.103 68.2881 cv
379.103 67.5972 378.54 67.0352 377.85 67.0352 cv
cp
377.85 71.041 mo
376.332 71.041 375.097 69.8062 375.097 68.2881 cv
375.097 66.77 376.332 65.5352 377.85 65.5352 cv
379.367 65.5352 380.603 66.77 380.603 68.2881 cv
380.603 69.8062 379.367 71.041 377.85 71.041 cv
cp
f
396.258 73.2178 mo
393.431 73.2178 li
393.431 71.7178 li
396.258 71.7178 li
396.258 73.2178 li
cp
f
390.735 64.2109 mo
387.908 64.2109 li
387.908 62.7109 li
390.735 62.7109 li
390.735 64.2109 li
cp
f
406.683 68.5396 mo
401.58 54.2178 li
397.33 54.2178 li
397.33 52.7178 li
402.639 52.7178 li
408.095 68.0366 li
406.683 68.5396 li
cp
f
382.382 52.7178 mo
387.613 52.7178 li
386.627 51.6445 li
382.382 51.6445 li
382.382 52.7178 li
cp
391.031 54.2178 mo
380.882 54.2178 li
380.882 50.1445 li
387.285 50.1445 li
391.031 54.2178 li
cp
f
44.439 121.859 mo
57.4653 121.859 li
57.4653 115.569 li
44.439 115.569 li
44.439 121.859 li
cp
58.9653 123.359 mo
42.939 123.359 li
42.939 114.069 li
58.9653 114.069 li
58.9653 123.359 li
cp
f
46.0181 123.917 mo
55.8867 123.917 li
55.8867 123.359 li
46.0181 123.359 li
46.0181 123.917 li
cp
57.3867 125.417 mo
44.5181 125.417 li
44.5181 121.859 li
57.3867 121.859 li
57.3867 125.417 li
cp
f
46.0181 128.654 mo
55.8867 128.654 li
55.8867 125.417 li
46.0181 125.417 li
46.0181 128.654 li
cp
57.3867 130.154 mo
44.5181 130.154 li
44.5181 123.917 li
57.3867 123.917 li
57.3867 130.154 li
cp
f
44.1816 114.069 mo
57.7227 114.069 li
60.4424 107.78 li
59.9849 107.78 li
57.1069 113.273 li
55.0142 107.78 li
46.8901 107.78 li
44.7969 113.273 li
41.9199 107.78 li
41.4624 107.78 li
44.1816 114.069 li
cp
58.708 115.569 mo
43.1963 115.569 li
39.1792 106.28 li
42.8271 106.28 li
44.5811 109.628 li
45.8569 106.28 li
56.0483 106.28 li
57.3237 109.628 li
59.0776 106.28 li
62.7256 106.28 li
58.708 115.569 li
cp
f
46.9653 122.609 mo
45.4653 122.609 li
45.4653 119.907 li
46.9653 119.907 li
46.9653 122.609 li
cp
f
49.334 122.609 mo
47.834 122.609 li
47.834 119.907 li
49.334 119.907 li
49.334 122.609 li
cp
f
51.7021 122.609 mo
50.2021 122.609 li
50.2021 119.907 li
51.7021 119.907 li
51.7021 122.609 li
cp
f
54.0708 122.609 mo
52.5708 122.609 li
52.5708 119.907 li
54.0708 119.907 li
54.0708 122.609 li
cp
f
56.439 122.609 mo
54.939 122.609 li
54.939 119.907 li
56.439 119.907 li
56.439 122.609 li
cp
f
39.0532 141.033 mo
69.8242 141.033 li
70.5298 141.033 71.1035 140.459 71.1035 139.753 cv
71.1035 131.078 li
71.1035 130.373 70.5298 129.799 69.8242 129.799 cv
65.6138 129.799 li
64.9155 129.799 64.3569 130.35 64.3423 131.054 cv
64.3228 131.98 li
56.5488 130.154 li
45.3877 130.154 li
39.0532 132.215 li
39.0532 141.033 li
cp
69.8242 142.533 mo
37.5532 142.533 li
37.5532 131.125 li
45.2686 128.654 li
56.8071 128.674 li
63.0103 130.131 li
63.4014 129.065 64.4277 128.299 65.6138 128.299 cv
69.8242 128.299 li
71.3569 128.299 72.6035 129.545 72.6035 131.078 cv
72.6035 139.753 li
72.6035 141.286 71.3569 142.533 69.8242 142.533 cv
cp
f
46.9673 141.033 mo
54.937 141.033 li
54.937 133.063 li
46.9673 133.063 li
46.9673 141.033 li
cp
56.437 142.533 mo
45.4673 142.533 li
45.4673 131.563 li
56.437 131.563 li
56.437 142.533 li
cp
f
65.6304 133.401 mo
65.1489 133.401 64.7573 133.793 64.7573 134.274 cv
64.7573 134.756 65.1489 135.147 65.6304 135.147 cv
66.1118 135.147 66.5039 134.756 66.5039 134.274 cv
66.5039 133.793 66.1118 133.401 65.6304 133.401 cv
cp
65.6304 136.647 mo
64.3218 136.647 63.2573 135.583 63.2573 134.274 cv
63.2573 132.966 64.3218 131.901 65.6304 131.901 cv
66.939 131.901 68.0039 132.966 68.0039 134.274 cv
68.0039 135.583 66.939 136.647 65.6304 136.647 cv
cp
f
59.1235 141.033 mo
65.1509 141.033 li
65.1509 139.015 li
59.1235 139.015 li
59.1235 141.033 li
cp
66.6509 142.533 mo
57.6235 142.533 li
57.6235 137.515 li
66.6509 137.515 li
66.6509 142.533 li
cp
f
42.1411 316.66 mo
42.1411 318.951 li
42.1411 326.084 47.9448 331.888 55.0786 331.888 cv
62.2119 331.888 68.0156 326.084 68.0156 318.951 cv
68.0156 316.66 li
42.1411 316.66 li
cp
55.0786 333.388 mo
47.1177 333.388 40.6411 326.911 40.6411 318.951 cv
40.6411 315.16 li
69.5156 315.16 li
69.5156 318.951 li
69.5156 326.911 63.0391 333.388 55.0786 333.388 cv
cp
f
42.1411 312.803 mo
68.0156 312.803 li
68.0156 311.87 li
42.1411 311.87 li
42.1411 312.803 li
cp
69.5156 314.303 mo
40.6411 314.303 li
40.6411 310.37 li
69.5156 310.37 li
69.5156 314.303 li
cp
f
58.8066 311.12 mo
57.3066 311.12 li
57.3066 308.525 li
52.8501 308.525 li
52.8501 311.12 li
51.3501 311.12 li
51.3501 307.025 li
58.8066 307.025 li
58.8066 311.12 li
cp
f
38.1108 318.982 mo
40.6411 318.982 li
40.6411 318.408 li
38.1108 318.408 li
38.1108 318.982 li
cp
42.1411 320.482 mo
36.6108 320.482 li
36.6108 316.908 li
42.1411 316.908 li
42.1411 320.482 li
cp
f
69.5156 318.982 mo
72.0459 318.982 li
72.0459 318.408 li
69.5156 318.408 li
69.5156 318.982 li
cp
73.5459 320.482 mo
68.0156 320.482 li
68.0156 316.908 li
73.5459 316.908 li
73.5459 320.482 li
cp
f
40.0054 342.547 mo
38.6816 341.855 li
44.3472 327.974 li
45.7358 328.54 li
43.0786 335.051 li
46.5405 329.713 li
47.7993 330.529 li
40.0054 342.547 li
cp
f
70.1514 342.547 mo
62.3574 330.529 li
63.6162 329.713 li
67.0781 335.051 li
64.4209 328.54 li
65.8096 327.974 li
71.4751 341.855 li
70.1514 342.547 li
cp
f
55.8213 343.46 mo
54.3359 343.46 li
52.812 332.657 li
54.2974 332.448 li
55.0786 337.986 li
55.8599 332.448 li
57.3452 332.657 li
55.8213 343.46 li
cp
f
406.783 274.043 mo
379.206 274.043 li
379.206 272.543 li
405.283 272.543 li
405.283 240.425 li
401.271 240.425 li
401.271 238.925 li
406.783 238.925 li
406.783 274.043 li
cp
f
379.956 240.298 mo
379.956 272.39 li
400.521 268.538 li
400.521 236.446 li
379.956 240.298 li
cp
378.456 274.196 mo
378.456 239.052 li
402.021 234.64 li
402.021 269.784 li
378.456 274.196 li
cp
f
391.223 244.324 mo
390.963 244.324 390.697 244.359 390.426 244.43 cv
387.935 245.071 385.908 248.323 385.908 251.68 cv
385.908 253.504 386.51 255.017 387.559 255.829 cv
388.271 256.38 389.132 256.55 390.051 256.311 cv
392.541 255.669 394.567 252.416 394.567 249.061 cv
394.567 247.236 393.966 245.724 392.917 244.911 cv
392.415 244.522 391.84 244.324 391.223 244.324 cv
cp
389.258 257.915 mo
388.31 257.915 387.407 257.609 386.641 257.015 cv
385.222 255.916 384.408 253.971 384.408 251.68 cv
384.408 247.614 386.887 243.792 390.051 242.977 cv
391.419 242.626 392.76 242.891 393.836 243.725 cv
395.254 244.824 396.067 246.769 396.067 249.061 cv
396.067 253.125 393.589 256.947 390.426 257.764 cv
390.032 257.864 389.642 257.915 389.258 257.915 cv
cp
f
390.354 244.426 mo
389.935 244.612 388.973 247.06 388.973 250.89 cv
388.973 254.382 389.784 256.161 390.122 256.314 cv
390.542 256.128 391.504 253.681 391.504 249.851 cv
391.504 246.358 390.692 244.579 390.354 244.426 cv
cp
390.081 257.808 mo
389.766 257.808 389.453 257.697 389.178 257.483 cv
387.921 256.51 387.473 253.438 387.473 250.89 cv
387.473 247.398 388.279 243.434 390.051 242.977 cv
390.479 242.868 390.923 242.965 391.299 243.257 cv
392.556 244.23 393.004 247.302 393.004 249.851 cv
393.004 253.342 392.197 257.307 390.426 257.764 cv
390.312 257.793 390.196 257.808 390.081 257.808 cv
cp
f
385.346 252.406 mo
384.971 250.953 li
395.13 248.334 li
395.505 249.787 li
385.346 252.406 li
cp
f
382.796 265.764 mo
382.521 264.289 li
386.319 263.578 li
386.595 265.053 li
382.796 265.764 li
cp
f
388.188 264.754 mo
387.913 263.279 li
390.101 262.87 li
390.376 264.345 li
388.188 264.754 li
cp
f
392.391 263.967 mo
392.115 262.492 li
397.68 261.45 li
397.955 262.925 li
392.391 263.967 li
cp
f
373.089 200.626 mo
405.283 200.626 li
405.283 184.584 li
373.089 184.584 li
373.089 200.626 li
cp
406.783 202.126 mo
371.589 202.126 li
371.589 183.084 li
406.783 183.084 li
406.783 202.126 li
cp
f
413.649 208.993 mo
378.455 208.993 li
378.455 201.376 li
379.955 201.376 li
379.955 207.493 li
412.149 207.493 li
412.149 191.451 li
406.033 191.451 li
406.033 189.951 li
413.649 189.951 li
413.649 208.993 li
cp
f
381.339 197.17 mo
379.839 197.17 li
379.839 187.271 li
381.339 187.271 li
381.339 197.17 li
cp
f
383.324 197.92 mo
377.854 197.92 li
377.854 196.42 li
383.324 196.42 li
383.324 197.92 li
cp
f
375.218 195.741 mo
374.671 194.345 li
380.315 192.13 li
380.862 193.527 li
375.218 195.741 li
cp
f
385.96 195.741 mo
380.315 193.527 li
380.862 192.13 li
386.507 194.345 li
385.96 195.741 li
cp
f
395.569 189.535 mo
391.574 189.535 li
391.574 188.035 li
395.569 188.035 li
395.569 189.535 li
cp
f
401.214 192.487 mo
391.574 192.487 li
391.574 190.987 li
401.214 190.987 li
401.214 192.487 li
cp
f
401.214 189.535 mo
397.219 189.535 li
397.219 188.035 li
401.214 188.035 li
401.214 189.535 li
cp
f
401.214 195.44 mo
398.479 195.44 li
398.479 193.94 li
401.214 193.94 li
401.214 195.44 li
cp
f
387.981 205.6 mo
383.981 205.6 li
383.981 204.1 li
387.981 204.1 li
387.981 205.6 li
cp
393.981 205.6 mo
389.981 205.6 li
389.981 204.1 li
393.981 204.1 li
393.981 205.6 li
cp
399.981 205.6 mo
395.981 205.6 li
395.981 204.1 li
399.981 204.1 li
399.981 205.6 li
cp
405.981 205.6 mo
401.981 205.6 li
401.981 204.1 li
405.981 204.1 li
405.981 205.6 li
cp
408.123 205.6 mo
407.981 205.6 li
407.981 204.1 li
408.123 204.1 li
408.123 205.6 li
cp
f
377.393 117.092 mo
376.02 117.092 374.902 118.209 374.902 119.583 cv
374.902 138.542 li
374.902 139.916 376.02 141.033 377.393 141.033 cv
407.846 141.033 li
409.219 141.033 410.336 139.916 410.336 138.542 cv
410.336 119.583 li
410.336 118.209 409.219 117.092 407.846 117.092 cv
377.393 117.092 li
cp
407.846 142.533 mo
377.393 142.533 li
375.192 142.533 373.402 140.743 373.402 138.542 cv
373.402 119.583 li
373.402 117.382 375.192 115.592 377.393 115.592 cv
407.846 115.592 li
410.046 115.592 411.836 117.382 411.836 119.583 cv
411.836 138.542 li
411.836 140.743 410.046 142.533 407.846 142.533 cv
cp
f
374.902 124.443 mo
410.336 124.443 li
410.336 121.321 li
374.902 121.321 li
374.902 124.443 li
cp
411.836 125.943 mo
373.402 125.943 li
373.402 119.821 li
411.836 119.821 li
411.836 125.943 li
cp
f
398.011 132.101 mo
396.579 132.101 395.415 133.265 395.415 134.695 cv
395.415 136.126 396.579 137.291 398.011 137.291 cv
399.441 137.291 400.605 136.126 400.605 134.695 cv
400.605 133.265 399.441 132.101 398.011 132.101 cv
cp
398.011 138.791 mo
395.752 138.791 393.915 136.954 393.915 134.695 cv
393.915 132.438 395.752 130.601 398.011 130.601 cv
400.269 130.601 402.105 132.438 402.105 134.695 cv
402.105 136.954 400.269 138.791 398.011 138.791 cv
cp
f
403.106 138.791 mo
401.904 138.791 400.767 138.265 399.985 137.348 cv
401.128 136.375 li
401.623 136.957 402.344 137.291 403.106 137.291 cv
404.537 137.291 405.701 136.126 405.701 134.695 cv
405.701 133.265 404.537 132.101 403.106 132.101 cv
402.344 132.101 401.623 132.434 401.129 133.015 cv
399.986 132.043 li
400.766 131.126 401.903 130.601 403.106 130.601 cv
405.364 130.601 407.201 132.438 407.201 134.695 cv
407.201 136.954 405.364 138.791 403.106 138.791 cv
cp
f
382.653 132.101 mo
379.841 132.101 li
379.841 130.601 li
382.653 130.601 li
382.653 132.101 li
cp
f
386.901 132.101 mo
383.566 132.101 li
383.566 130.601 li
386.901 130.601 li
386.901 132.101 li
cp
f
386.901 134.381 mo
379.841 134.381 li
379.841 132.881 li
386.901 132.881 li
386.901 134.381 li
cp
f
379.038 339.646 mo
406.2 339.646 li
406.2 337.473 li
379.038 337.473 li
379.038 339.646 li
cp
407.7 341.146 mo
377.538 341.146 li
377.538 335.973 li
407.7 335.973 li
407.7 341.146 li
cp
f
381.054 335.973 mo
404.185 335.973 li
404.185 327.7 li
404.185 325.599 402.476 323.889 400.374 323.889 cv
384.865 323.889 li
382.764 323.889 381.054 325.599 381.054 327.7 cv
381.054 335.973 li
cp
405.685 337.473 mo
379.554 337.473 li
379.554 327.7 li
379.554 324.771 381.937 322.389 384.865 322.389 cv
400.374 322.389 li
403.303 322.389 405.685 324.771 405.685 327.7 cv
405.685 337.473 li
cp
f
384.637 326.449 mo
383.939 326.449 383.372 327.017 383.372 327.714 cv
383.372 328.411 383.939 328.979 384.637 328.979 cv
385.334 328.979 385.901 328.411 385.901 327.714 cv
385.901 327.017 385.334 326.449 384.637 326.449 cv
cp
384.637 330.479 mo
383.112 330.479 381.872 329.238 381.872 327.714 cv
381.872 326.189 383.112 324.949 384.637 324.949 cv
386.161 324.949 387.401 326.189 387.401 327.714 cv
387.401 329.238 386.161 330.479 384.637 330.479 cv
cp
f
400.602 326.449 mo
399.904 326.449 399.337 327.017 399.337 327.714 cv
399.337 328.411 399.904 328.979 400.602 328.979 cv
401.299 328.979 401.866 328.411 401.866 327.714 cv
401.866 327.017 401.299 326.449 400.602 326.449 cv
cp
400.602 330.479 mo
399.077 330.479 397.837 329.238 397.837 327.714 cv
397.837 326.189 399.077 324.949 400.602 324.949 cv
402.126 324.949 403.366 326.189 403.366 327.714 cv
403.366 329.238 402.126 330.479 400.602 330.479 cv
cp
f
400.602 332.721 mo
384.637 332.721 li
384.637 331.221 li
400.602 331.221 li
400.602 332.721 li
cp
f
400.602 335.229 mo
384.637 335.229 li
384.637 333.729 li
400.602 333.729 li
400.602 335.229 li
cp
f
389.133 325.761 mo
396.106 325.761 li
397.119 323.889 li
388.119 323.889 li
389.133 325.761 li
cp
397.001 327.261 mo
388.238 327.261 li
385.602 322.389 li
399.637 322.389 li
397.001 327.261 li
cp
f
381.054 342.605 mo
384.799 342.605 li
384.799 341.146 li
381.054 341.146 li
381.054 342.605 li
cp
386.299 344.105 mo
379.554 344.105 li
379.554 339.646 li
386.299 339.646 li
386.299 344.105 li
cp
f
400.439 342.605 mo
404.185 342.605 li
404.185 341.146 li
400.439 341.146 li
400.439 342.605 li
cp
405.685 344.105 mo
398.939 344.105 li
398.939 339.646 li
405.685 339.646 li
405.685 344.105 li
cp
f
404.62 324.407 mo
403.12 324.407 li
403.12 316.104 li
382.118 316.104 li
382.118 324.407 li
380.618 324.407 li
380.618 314.604 li
404.62 314.604 li
404.62 324.407 li
cp
f
382.118 314.604 mo
403.12 314.595 li
403.12 312.643 401.531 311.055 399.579 311.055 cv
385.659 311.055 li
383.707 311.055 382.118 312.643 382.118 314.595 cv
382.118 314.604 li
cp
404.62 316.104 mo
380.618 316.104 li
380.618 314.595 li
380.618 311.815 382.88 309.555 385.659 309.555 cv
399.579 309.555 li
402.358 309.555 404.62 311.815 404.62 314.595 cv
404.62 316.104 li
cp
f
387.401 314.604 mo
397.837 314.604 li
397.837 313.069 li
387.401 313.069 li
387.401 314.604 li
cp
399.337 316.104 mo
385.901 316.104 li
385.901 311.569 li
399.337 311.569 li
399.337 316.104 li
cp
f
376.492 321.756 mo
378.642 321.756 li
378.642 316.104 li
377.569 316.104 li
376.976 316.104 376.492 316.588 376.492 317.182 cv
376.492 321.756 li
cp
380.142 323.256 mo
374.992 323.256 li
374.992 317.182 li
374.992 315.761 376.148 314.604 377.569 314.604 cv
380.142 314.604 li
380.142 323.256 li
cp
f
381.368 316.104 mo
379.392 316.104 li
379.392 314.604 li
381.368 314.604 li
381.368 316.104 li
cp
f
406.598 321.756 mo
408.746 321.756 li
408.746 317.182 li
408.746 316.588 408.263 316.104 407.669 316.104 cv
406.598 316.104 li
406.598 321.756 li
cp
410.246 323.256 mo
405.098 323.256 li
405.098 314.604 li
407.669 314.604 li
409.09 314.604 410.246 315.761 410.246 317.182 cv
410.246 323.256 li
cp
f
405.848 316.104 mo
403.87 316.104 li
403.87 314.604 li
405.848 314.604 li
405.848 316.104 li
cp
f
386.08 404.224 mo
402.096 404.224 li
406.02 401.313 406.645 396.365 406.744 394.913 cv
394.088 387.256 li
381.432 394.913 li
381.534 396.367 382.169 401.321 386.08 404.224 cv
cp
402.577 405.724 mo
385.599 405.724 li
385.404 405.586 li
379.975 401.753 379.912 394.796 379.912 394.502 cv
379.912 394.079 li
394.088 385.502 li
408.263 394.079 li
408.263 394.502 li
408.263 394.796 408.2 401.753 402.771 405.586 cv
402.577 405.724 li
cp
f
394.838 404.974 mo
393.338 404.974 li
393.338 386.379 li
394.838 386.379 li
394.838 404.974 li
cp
f
390.102 392.63 mo
389.551 392.63 389.104 393.077 389.104 393.628 cv
389.104 394.179 389.551 394.626 390.102 394.626 cv
390.652 394.626 391.1 394.179 391.1 393.628 cv
391.1 393.077 390.652 392.63 390.102 392.63 cv
cp
390.102 396.126 mo
388.725 396.126 387.604 395.005 387.604 393.628 cv
387.604 392.251 388.725 391.13 390.102 391.13 cv
391.479 391.13 392.6 392.251 392.6 393.628 cv
392.6 395.005 391.479 396.126 390.102 396.126 cv
cp
f
398.073 392.63 mo
397.522 392.63 397.075 393.077 397.075 393.628 cv
397.075 394.179 397.522 394.626 398.073 394.626 cv
398.624 394.626 399.071 394.179 399.071 393.628 cv
399.071 393.077 398.624 392.63 398.073 392.63 cv
cp
398.073 396.126 mo
396.696 396.126 395.575 395.005 395.575 393.628 cv
395.575 392.251 396.696 391.13 398.073 391.13 cv
399.45 391.13 400.571 392.251 400.571 393.628 cv
400.571 395.005 399.45 396.126 398.073 396.126 cv
cp
f
381.908 399.659 mo
381.131 398.376 li
388.313 394.031 li
389.09 395.314 li
381.908 399.659 li
cp
f
392.065 393.514 mo
391.288 392.23 li
393.699 390.771 li
394.477 392.055 li
392.065 393.514 li
cp
f
406.267 399.659 mo
399.086 395.314 li
399.863 394.031 li
407.044 398.376 li
406.267 399.659 li
cp
f
396.109 393.514 mo
393.699 392.055 li
394.477 390.771 li
396.887 392.23 li
396.109 393.514 li
cp
f
383.28 405.724 mo
382.191 405.724 li
382.191 404.224 li
383.28 404.224 li
383.28 405.724 li
cp
f
381.156 405.724 mo
377.236 405.724 li
377.236 404.224 li
381.156 404.224 li
381.156 405.724 li
cp
f
408.002 405.724 mo
404.996 405.724 li
404.996 404.224 li
408.002 404.224 li
408.002 405.724 li
cp
f
406.953 408.083 mo
391.29 408.083 li
391.29 406.583 li
406.953 406.583 li
406.953 408.083 li
cp
f
388.948 408.083 mo
381.222 408.083 li
381.222 406.583 li
388.948 406.583 li
388.948 408.083 li
cp
f
405.128 392.605 mo
403.628 392.605 li
403.628 384.52 li
384.547 384.52 li
384.547 392.605 li
383.047 392.605 li
383.047 383.02 li
405.128 383.02 li
405.128 392.605 li
cp
f
386.167 383.02 mo
402.008 383.02 li
402.008 381.022 li
386.167 381.022 li
386.167 383.02 li
cp
403.508 384.52 mo
384.667 384.52 li
384.667 379.522 li
403.508 379.522 li
403.508 384.52 li
cp
f
391.342 379.522 mo
396.834 379.522 li
396.834 374.311 li
391.342 374.311 li
391.342 379.522 li
cp
398.334 381.022 mo
389.842 381.022 li
389.842 372.811 li
398.334 372.811 li
398.334 381.022 li
cp
f
395.696 376.688 mo
390.592 376.688 li
390.592 375.188 li
395.696 375.188 li
395.696 376.688 li
cp
f
387.795 386.477 mo
383.797 386.477 li
383.797 384.977 li
387.795 384.977 li
387.795 386.477 li
cp
f
387.795 388.47 mo
383.797 388.47 li
383.797 386.97 li
387.795 386.97 li
387.795 388.47 li
cp
f
404.378 386.477 mo
400.381 386.477 li
400.381 384.977 li
404.378 384.977 li
404.378 386.477 li
cp
f
404.378 388.47 mo
400.381 388.47 li
400.381 386.97 li
404.378 386.97 li
404.378 388.47 li
cp
f
308.98 404.957 mo
341.242 404.957 li
341.242 382.261 li
308.98 382.261 li
308.98 404.957 li
cp
342.742 406.457 mo
307.48 406.457 li
307.48 380.761 li
342.742 380.761 li
342.742 406.457 li
cp
f
308.98 386.023 mo
310.085 386.023 li
310.085 383.366 li
312.742 383.366 li
312.742 382.261 li
308.98 382.261 li
308.98 386.023 li
cp
311.585 387.523 mo
307.48 387.523 li
307.48 380.761 li
314.242 380.761 li
314.242 384.866 li
311.585 384.866 li
311.585 387.523 li
cp
f
308.98 404.957 mo
312.742 404.957 li
312.742 403.853 li
310.085 403.853 li
310.085 401.195 li
308.98 401.195 li
308.98 404.957 li
cp
314.242 406.457 mo
307.48 406.457 li
307.48 399.695 li
311.585 399.695 li
311.585 402.353 li
314.242 402.353 li
314.242 406.457 li
cp
f
340.137 386.023 mo
341.242 386.023 li
341.242 382.261 li
337.479 382.261 li
337.479 383.366 li
340.137 383.366 li
340.137 386.023 li
cp
342.742 387.523 mo
338.637 387.523 li
338.637 384.866 li
335.979 384.866 li
335.979 380.761 li
342.742 380.761 li
342.742 387.523 li
cp
f
337.479 404.957 mo
341.242 404.957 li
341.242 401.195 li
340.137 401.195 li
340.137 403.853 li
337.479 403.853 li
337.479 404.957 li
cp
342.742 406.457 mo
335.979 406.457 li
335.979 402.353 li
338.637 402.353 li
338.637 399.695 li
342.742 399.695 li
342.742 406.457 li
cp
f
321.934 380.761 mo
328.289 380.761 li
328.289 377.707 li
321.934 377.707 li
321.934 380.761 li
cp
329.789 382.261 mo
320.434 382.261 li
320.434 376.207 li
329.789 376.207 li
329.789 382.261 li
cp
f
321.934 376.207 mo
328.289 376.207 li
328.289 375.515 li
321.934 375.515 li
321.934 376.207 li
cp
329.789 377.707 mo
320.434 377.707 li
320.434 374.015 li
329.789 374.015 li
329.789 377.707 li
cp
f
316.654 393.091 mo
319.405 393.091 li
319.405 388.486 li
316.654 388.486 li
316.654 393.091 li
cp
320.905 394.591 mo
315.154 394.591 li
315.154 386.986 li
320.905 386.986 li
320.905 394.591 li
cp
f
327.609 399.968 mo
332.213 399.968 li
332.213 396.28 li
327.609 396.28 li
327.609 399.968 li
cp
333.713 401.468 mo
326.109 401.468 li
326.109 394.78 li
333.713 394.78 li
333.713 401.468 li
cp
f
332.963 386.47 mo
332.175 386.47 331.533 387.111 331.533 387.9 cv
331.533 388.688 332.175 389.33 332.963 389.33 cv
333.752 389.33 334.394 388.688 334.394 387.9 cv
334.394 387.111 333.752 386.47 332.963 386.47 cv
cp
332.963 390.83 mo
331.348 390.83 330.033 389.516 330.033 387.9 cv
330.033 386.284 331.348 384.97 332.963 384.97 cv
334.579 384.97 335.894 386.284 335.894 387.9 cv
335.894 389.516 334.579 390.83 332.963 390.83 cv
cp
f
273.068 407.171 mo
243.733 407.171 li
243.733 405.671 li
271.568 405.671 li
271.568 398.091 li
273.068 398.091 li
273.068 407.171 li
cp
f
273.068 391.597 mo
271.568 391.597 li
271.568 384.017 li
243.733 384.017 li
243.733 382.517 li
273.068 382.517 li
273.068 391.597 li
cp
f
243.733 384.017 mo
241.764 384.017 240.161 382.414 240.161 380.444 cv
240.161 378.475 241.764 376.872 243.733 376.872 cv
243.733 378.372 li
242.591 378.372 241.661 379.302 241.661 380.444 cv
241.661 381.587 242.591 382.517 243.733 382.517 cv
243.733 384.017 li
cp
f
243.733 407.171 mo
241.764 407.171 240.161 405.568 240.161 403.599 cv
241.661 403.599 li
241.661 404.741 242.591 405.671 243.733 405.671 cv
243.733 407.171 li
cp
f
241.661 403.599 mo
240.161 403.599 li
240.161 380.444 li
241.661 380.444 li
241.661 403.599 li
cp
f
269.021 378.372 mo
243.733 378.372 li
243.733 376.872 li
269.021 376.872 li
269.021 378.372 li
cp
f
260.722 392.347 mo
259.345 392.347 258.225 393.467 258.225 394.844 cv
258.225 396.221 259.345 397.341 260.722 397.341 cv
273.545 397.341 li
273.545 392.347 li
260.722 392.347 li
cp
275.045 398.841 mo
260.722 398.841 li
258.518 398.841 256.725 397.048 256.725 394.844 cv
256.725 392.64 258.518 390.847 260.722 390.847 cv
275.045 390.847 li
275.045 398.841 li
cp
f
260.726 394.285 mo
260.418 394.285 260.167 394.536 260.167 394.844 cv
260.167 395.151 260.418 395.402 260.726 395.402 cv
261.033 395.402 261.284 395.151 261.284 394.844 cv
261.284 394.536 261.033 394.285 260.726 394.285 cv
cp
260.726 396.902 mo
259.591 396.902 258.667 395.979 258.667 394.844 cv
258.667 393.709 259.591 392.785 260.726 392.785 cv
261.86 392.785 262.784 393.709 262.784 394.844 cv
262.784 395.979 261.86 396.902 260.726 396.902 cv
cp
f
245.5 382.517 mo
270.466 382.517 li
270.466 380.938 li
245.5 380.938 li
245.5 382.517 li
cp
271.966 384.017 mo
244 384.017 li
244 379.438 li
271.966 379.438 li
271.966 384.017 li
cp
f
248.559 386.531 mo
244.559 386.531 li
244.559 385.031 li
248.559 385.031 li
248.559 386.531 li
cp
254.559 386.531 mo
250.559 386.531 li
250.559 385.031 li
254.559 385.031 li
254.559 386.531 li
cp
260.559 386.531 mo
256.559 386.531 li
256.559 385.031 li
260.559 385.031 li
260.559 386.531 li
cp
266.559 386.531 mo
262.559 386.531 li
262.559 385.031 li
266.559 385.031 li
266.559 386.531 li
cp
272.318 386.531 mo
268.559 386.531 li
268.559 385.031 li
272.318 385.031 li
272.318 386.531 li
cp
f
248.559 404.656 mo
244.559 404.656 li
244.559 403.156 li
248.559 403.156 li
248.559 404.656 li
cp
254.559 404.656 mo
250.559 404.656 li
250.559 403.156 li
254.559 403.156 li
254.559 404.656 li
cp
260.559 404.656 mo
256.559 404.656 li
256.559 403.156 li
260.559 403.156 li
260.559 404.656 li
cp
266.559 404.656 mo
262.559 404.656 li
262.559 403.156 li
266.559 403.156 li
266.559 404.656 li
cp
272.318 404.656 mo
268.559 404.656 li
268.559 403.156 li
272.318 403.156 li
272.318 404.656 li
cp
f
192.808 381.82 mo
191.809 381.453 190.759 381.268 189.688 381.268 cv
189.551 381.275 189.348 381.272 189.179 381.281 cv
189.097 379.783 li
189.293 379.772 189.488 379.734 189.688 379.768 cv
190.936 379.768 192.16 379.984 193.325 380.412 cv
192.808 381.82 li
cp
184.075 383.201 mo
183.149 382.021 li
184.292 381.125 185.58 380.484 186.976 380.116 cv
187.358 381.567 li
186.16 381.883 185.056 382.433 184.075 383.201 cv
cp
197.13 385.151 mo
196.418 384.134 195.522 383.284 194.465 382.628 cv
195.257 381.354 li
196.487 382.118 197.531 383.106 198.36 384.292 cv
197.13 385.151 li
cp
180.985 387.699 mo
179.551 387.262 li
179.973 385.88 180.663 384.618 181.601 383.511 cv
182.746 384.481 li
181.939 385.432 181.347 386.515 180.985 387.699 cv
cp
200.085 392.319 mo
198.61 392.044 li
198.714 391.49 198.767 390.923 198.767 390.355 cv
198.767 389.106 198.519 387.897 198.029 386.763 cv
199.406 386.169 li
199.977 387.492 200.267 388.901 200.267 390.355 cv
200.267 391.015 200.206 391.676 200.085 392.319 cv
cp
179.604 393.617 mo
179.264 392.566 179.091 391.469 179.091 390.355 cv
179.091 390.022 179.106 389.694 179.136 389.369 cv
180.63 389.508 li
180.604 389.786 180.591 390.069 180.591 390.355 cv
180.591 391.313 180.739 392.254 181.031 393.156 cv
179.604 393.617 li
cp
197.084 397.923 mo
196.035 396.851 li
196.925 395.979 197.616 394.956 198.088 393.81 cv
199.475 394.38 li
198.925 395.716 198.121 396.908 197.084 397.923 cv
cp
183.288 398.798 mo
182.134 397.924 181.186 396.843 180.47 395.585 cv
181.774 394.843 li
182.388 395.924 183.203 396.852 184.193 397.603 cv
183.288 398.798 li
cp
191.416 400.802 mo
191.172 399.321 li
192.397 399.119 193.548 398.675 194.593 398.001 cv
195.405 399.263 li
194.187 400.048 192.845 400.565 191.416 400.802 cv
cp
189.274 400.935 mo
187.824 400.882 186.427 400.538 185.123 399.915 cv
185.769 398.562 li
186.888 399.096 188.085 399.391 189.33 399.437 cv
189.274 400.935 li
cp
f
189.679 377.555 mo
182.621 377.555 176.878 383.297 176.878 390.355 cv
176.878 397.414 182.621 403.156 189.679 403.156 cv
196.738 403.156 202.48 397.414 202.48 390.355 cv
202.48 383.297 196.738 377.555 189.679 377.555 cv
cp
189.679 404.656 mo
181.793 404.656 175.378 398.241 175.378 390.355 cv
175.378 382.47 181.793 376.055 189.679 376.055 cv
197.564 376.055 203.98 382.47 203.98 390.355 cv
203.98 398.241 197.564 404.656 189.679 404.656 cv
cp
f
207.041 392.524 mo
209.39 392.524 li
209.39 377.83 li
209.175 378.011 209.025 378.268 208.984 378.561 cv
207.041 392.524 li
cp
210.89 394.024 mo
205.317 394.024 li
207.499 378.354 li
207.682 377.043 208.817 376.055 210.14 376.055 cv
210.89 376.055 li
210.89 394.024 li
cp
f
208.909 403.156 mo
209.39 403.156 li
209.39 394.024 li
208.909 394.024 li
208.909 403.156 li
cp
210.89 404.656 mo
207.409 404.656 li
207.409 392.524 li
210.89 392.524 li
210.89 404.656 li
cp
f
171.847 403.156 mo
172.328 403.156 li
172.328 394.024 li
171.847 394.024 li
171.847 403.156 li
cp
173.828 404.656 mo
170.347 404.656 li
170.347 392.524 li
173.828 392.524 li
173.828 404.656 li
cp
f
172.838 393.274 mo
171.338 393.274 li
171.338 383.085 li
172.838 383.085 li
172.838 393.274 li
cp
f
174.875 383.835 mo
169.3 383.835 li
169.3 376.805 li
170.8 376.805 li
170.8 382.335 li
173.375 382.335 li
173.375 376.805 li
174.875 376.805 li
174.875 383.835 li
cp
f
172.838 383.085 mo
171.338 383.085 li
171.338 376.805 li
172.838 376.805 li
172.838 383.085 li
cp
f
124.5 404.507 mo
117.289 404.507 111.34 403.52 111.281 403.509 cv
110.655 403.403 li
110.655 402.77 li
110.655 397.818 116.009 393.718 123.109 393.23 cv
123.212 394.727 li
117.337 395.13 112.669 398.323 112.195 402.132 cv
113.921 402.382 118.807 403.007 124.5 403.007 cv
130.192 403.007 135.08 402.381 136.805 402.131 cv
136.329 398.213 131.507 395.008 125.438 394.706 cv
125.513 393.208 li
132.708 393.565 138.344 397.766 138.344 402.77 cv
138.344 403.403 li
137.718 403.509 li
137.659 403.52 131.71 404.507 124.5 404.507 cv
cp
f
122.375 396.771 mo
122.364 396.021 li
122.32 392.98 122.76 389.97 123.672 387.073 cv
124.359 384.893 125.311 382.794 126.502 380.838 cv
127.784 381.617 li
126.655 383.471 125.753 385.458 125.103 387.524 cv
124.314 390.029 123.898 392.624 123.863 395.249 cv
124.675 395.237 li
124.71 392.698 125.114 390.189 125.876 387.768 cv
126.551 385.626 127.502 383.575 128.704 381.674 cv
129.972 382.475 li
128.839 384.267 127.943 386.199 127.307 388.219 cv
126.518 390.726 126.137 393.332 126.175 395.966 cv
126.186 396.716 li
122.375 396.771 li
cp
f
124.991 380.084 mo
125.291 380.104 li
125.485 380.117 125.698 380.133 125.88 380.16 cv
126.372 380.226 126.88 380.341 127.338 380.492 cv
127.758 380.626 128.089 380.773 128.302 380.872 cv
128.647 381.042 li
129.6 381.386 li
129.854 381.467 130.193 381.584 130.587 381.77 cv
131.03 381.972 131.469 382.226 131.886 382.52 cv
132.03 382.617 132.199 382.752 132.353 382.876 cv
132.908 383.378 li
133.207 383.684 li
133.256 383.737 133.305 383.791 133.354 383.847 cv
133.33 383.792 133.306 383.737 133.281 383.683 cv
132.856 382.852 li
132.69 382.59 132.543 382.356 132.355 382.104 cv
132.031 381.666 131.653 381.241 131.261 380.874 cv
131.115 380.746 li
131.142 379.617 li
131.507 379.313 131.895 379.043 132.296 378.813 cv
132.447 378.722 132.645 378.623 132.824 378.535 cv
133.504 378.247 li
133.906 378.105 li
133.976 378.082 134.046 378.06 134.119 378.039 cv
134.058 378.037 133.997 378.036 133.936 378.036 cv
133.004 378.072 li
132.696 378.112 132.423 378.148 132.115 378.213 cv
131.578 378.323 131.034 378.487 130.54 378.688 cv
130.294 378.786 130.079 378.885 129.891 378.978 cv
128.861 378.572 li
128.777 378.354 128.674 378.105 128.541 377.83 cv
128.307 377.346 128.014 376.858 127.693 376.419 cv
127.507 376.163 127.328 375.952 127.091 375.678 cv
126.447 375.051 li
126.407 375.015 126.366 374.979 126.326 374.943 cv
126.361 375.003 126.396 375.062 126.43 375.12 cv
126.954 376.19 li
127.026 376.374 127.104 376.576 127.158 376.754 cv
127.311 377.226 127.422 377.72 127.485 378.209 cv
127.501 378.33 127.51 378.436 127.519 378.542 cv
126.831 379.406 li
126.503 379.431 126.164 379.467 125.808 379.534 cv
125.497 379.591 125.231 379.662 124.881 379.758 cv
124.037 380.07 li
123.987 380.091 123.937 380.112 123.888 380.135 cv
123.957 380.127 124.025 380.121 124.093 380.116 cv
124.991 380.084 li
cp
135.466 388.501 mo
133.985 388.496 li
133.984 388.491 133.893 387.935 133.612 387.182 cv
133.287 386.29 132.73 385.372 132.121 384.719 cv
131.412 384.044 li
131.29 383.945 131.155 383.837 131.033 383.753 cv
130.685 383.508 130.316 383.295 129.957 383.13 cv
129.628 382.977 129.351 382.881 129.157 382.818 cv
128.816 382.717 li
127.655 382.226 li
127.482 382.146 127.214 382.026 126.876 381.919 cv
126.498 381.794 126.083 381.7 125.669 381.645 cv
125.512 381.621 125.342 381.61 125.187 381.6 cv
124.941 381.581 li
124.186 381.613 li
123.312 381.677 122.28 381.973 121.439 382.403 cv
120.717 382.768 120.271 383.113 120.267 383.117 cv
119.178 382.114 li
119.193 382.091 119.568 381.526 120.287 380.813 cv
120.802 380.297 121.906 379.33 123.481 378.678 cv
124.438 378.326 li
124.882 378.203 125.185 378.124 125.534 378.06 cv
125.664 378.035 125.795 378.013 125.931 377.994 cv
125.879 377.728 125.81 377.459 125.727 377.201 cv
125.68 377.046 125.616 376.886 125.558 376.74 cv
125.118 375.848 li
124.685 375.086 123.974 374.28 123.224 373.707 cv
122.584 373.211 122.081 372.958 122.076 372.955 cv
122.514 371.541 li
122.542 371.545 123.211 371.642 124.164 371.983 cv
124.854 372.229 126.204 372.811 127.466 373.95 cv
128.194 374.661 li
128.496 375.011 128.697 375.249 128.905 375.536 cv
129.278 376.046 129.619 376.613 129.89 377.176 cv
129.912 377.221 129.933 377.264 129.953 377.308 cv
129.962 377.304 129.971 377.3 129.979 377.297 cv
130.553 377.063 131.188 376.872 131.811 376.744 cv
132.155 376.672 132.464 376.63 132.871 376.579 cv
133.919 376.536 li
135.645 376.541 137.034 377.017 137.71 377.3 cv
138.644 377.687 139.203 378.064 139.227 378.08 cv
138.599 379.422 li
138.594 379.42 138.051 379.269 137.25 379.207 cv
136.306 379.126 135.237 379.247 134.389 379.525 cv
133.487 379.881 li
133.344 379.951 133.185 380.028 133.054 380.106 cv
132.961 380.16 132.87 380.216 132.779 380.273 cv
133.058 380.572 133.322 380.889 133.56 381.21 cv
133.77 381.493 133.938 381.756 134.154 382.103 cv
134.635 383.038 li
135.355 384.602 135.508 386.063 135.536 386.796 cv
135.578 387.805 135.471 388.473 135.466 388.501 cv
cp
f
119.137 400.679 mo
118.285 400.679 117.592 399.985 117.592 399.134 cv
117.592 398.282 118.285 397.589 119.137 397.589 cv
119.988 397.589 120.681 398.282 120.681 399.134 cv
120.681 399.985 119.988 400.679 119.137 400.679 cv
cp
f
121.255 400.069 mo
121.041 400.069 120.867 400.244 120.867 400.458 cv
120.867 400.672 121.041 400.847 121.255 400.847 cv
121.47 400.847 121.644 400.672 121.644 400.458 cv
121.644 400.244 121.47 400.069 121.255 400.069 cv
cp
121.255 401.569 mo
120.643 401.569 120.144 401.07 120.144 400.458 cv
120.144 399.846 120.643 399.347 121.255 399.347 cv
121.868 399.347 122.367 399.846 122.367 400.458 cv
122.367 401.07 121.868 401.569 121.255 401.569 cv
cp
f
109.381 405.708 mo
105.306 405.708 li
105.306 404.208 li
109.381 404.208 li
109.381 405.708 li
cp
f
112.272 405.708 mo
110.667 405.708 li
110.667 404.208 li
112.272 404.208 li
112.272 405.708 li
cp
f
117.505 407.604 mo
110.314 407.604 li
110.314 406.104 li
117.505 406.104 li
117.505 407.604 li
cp
f
135.726 406.096 mo
132.548 406.096 li
132.548 404.596 li
135.726 404.596 li
135.726 406.096 li
cp
f
139.868 406.096 mo
137.203 406.096 li
137.203 404.596 li
139.868 404.596 li
139.868 406.096 li
cp
f
40.9355 400.752 mo
62.5396 400.752 li
62.5396 376.716 li
40.9355 376.716 li
40.9355 400.752 li
cp
64.0396 402.252 mo
39.4355 402.252 li
39.4355 375.216 li
64.0396 375.216 li
64.0396 402.252 li
cp
f
67.6724 406.059 mo
43.2344 403.21 li
43.4429 401.415 li
44.9331 401.589 li
44.8975 401.894 li
66.356 404.395 li
69.1392 380.521 li
63.2031 379.829 li
63.377 378.339 li
70.8032 379.204 li
67.6724 406.059 li
cp
f
43.0874 395.715 mo
60.3877 395.715 li
60.3877 379.062 li
43.0874 379.062 li
43.0874 395.715 li
cp
61.8877 397.215 mo
41.5874 397.215 li
41.5874 377.562 li
61.8877 377.562 li
61.8877 397.215 li
cp
f
54.5103 396.584 mo
53.0298 396.346 li
53.52 393.308 li
48.7817 392.543 li
48.189 396.211 li
46.7085 395.973 li
47.5396 390.822 li
55.2397 392.065 li
54.5103 396.584 li
cp
f
49.3442 391.113 mo
53.4351 391.774 li
53.834 389.306 li
49.7432 388.646 li
49.3442 391.113 li
cp
54.6772 393.495 mo
47.6245 392.355 li
48.502 386.925 li
55.5537 388.063 li
54.6772 393.495 li
cp
f
50.3872 387.229 mo
53.668 387.759 li
53.9741 385.864 li
50.6934 385.335 li
50.3872 387.229 li
cp
54.9102 389.479 mo
48.6675 388.472 li
49.4512 383.614 li
55.6938 384.622 li
54.9102 389.479 li
cp
f
51.2886 383.911 mo
53.8569 384.325 li
54.0815 382.937 li
51.5132 382.521 li
51.2886 383.911 li
cp
55.0981 386.046 mo
49.5688 385.153 li
50.271 380.801 li
55.8013 381.694 li
55.0981 386.046 li
cp
f
50.021 396.507 mo
48.5405 396.269 li
49.0205 393.296 li
50.501 393.534 li
50.021 396.507 li
cp
f
52.6309 396.58 mo
51.1504 396.342 li
51.5757 393.708 li
53.0562 393.946 li
52.6309 396.58 li
cp
f
51.0186 392.144 mo
49.5381 391.905 li
49.9292 389.483 li
51.4097 389.722 li
51.0186 392.144 li
cp
f
53.0024 392.464 mo
51.522 392.226 li
51.9131 389.804 li
53.3936 390.042 li
53.0024 392.464 li
cp
f
52.6484 388.354 mo
51.168 388.115 li
51.4932 386.1 li
52.9736 386.338 li
52.6484 388.354 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.1
%%For: (Andrey Magda) ()
%%Title: (\762\763\760\750\747\754.eps)
%%CreationDate: 3/24/2016 11:19 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4cadQdZB^9?jM#;V[66ugJ(RR@95-5_`2Gq]N&7&DYKn!k3oci-mDNsc`-grIL?\b7r@O7);9lK[["WHr8m]@gtaX,W&)
%k25JR,IQgH7LFX(s8:d&dYmBfV)'kqY$(&?.uit*]32.U3n\,Ig$Yr>ZG2<We:-oh^+#pC<bf&)?`EErZ#g.p14/G'^07SuS*bO,
%S+=u3JbCO(IbTEY5QF"^m[rpt!BRB*]2/g,:$$!]5JGRh"?>e\L1S5?cO[_)V@SDm=n!Rk9[?9^J,\G3jqlqJ^A*]l^E*+:IdqiM
%rH@_O^s?@0@2YIrO4EL)dOM\`h.j7s[9-4mnD?!KREAOTMnN;\<Ap[O_8ku='U!^(3bT\bTj/Xpc_URLrZD$\$mZtp>;br#Q#,q'
%I^W-tb$jBO*p0[8M^@ksM;W0-B.sPt5\-94M5!56e6B=i[mFqJ=`2qfXg2=1+!NEr*[P(aD#?$:Ss==j)u/o6,,H-A?e*;+l_t\c
%@_'qLm@S*:O/r;7G36rciM0_]dXKrLG!TFU@3KE;rFWT<"9)9nI'#r^TWq#ene<Ijp-kecg=r_%YQ<<RJK_aSh5_?L^FQ7\-84GQ
%<G@s[hbcgDbn*u3S<O>=S!Iid6IQZdA/PTmPZgtn,q"U-OFj.mA&B:<l5m=5(Y-P%C&i,9=XMbch0-3-PhNTE!W.Y^8-djE."6DP
%Jb<oidL`fFXjcXNeieuar\52%djSjuF_l[?rjc<c8jJ`B2)"a6l4<_$8G$)U(BR?=2^(PrJV='pJ$7OL_<GC1#@Ho-S%[BZj1P2[
%s'*d5RqJ!cU"ZH@fU"&`p/,T#MesA>CtE8`^A#V?9_bmN#B0os4M[W=ftL5b+O=B);H3?5?*(IUN@F\uWmWJ)r_I)]'*"p&_d`?Q
%N*E,UmSKkePQ7T!#*WNn#5a@U\7Q*IESq(ZFl9_VWog)oV7TQ8T4OfJibqno^C.sfeR'%l;PK&")R_,l/nF76c.E0Q=%S9q#>(D%
%kgAMA_:]@oK-XmiZ8UAH8cg_V$709BpF5fij7=otQ-o,h,_R"_+)&jgP#O&<XOX<em:,Ce>"WY@H_&@08[DR3J]=ut'nqY[$b"']
%_tb%,C'oD]kL^lZTbPtR<n?S0e]$5heAQ7$h)K(%Q+TCX/R()m-TEk`V8mNW[[L4[ho^i#FgJ["]8:IrmU<Ah'#=_jitO#O;m(]U
%).FCPVE+XV#X_%SHBuVX+9/L92/C`;?&_BmF<i'836K;K73jD*jN'm.8(-.VAfOOJa<WtI_FuC?92mL/!X8%3bVdba(Ydb\WE)%Y
%h<@u*8QZ#.UFcZW+@(F6hha`u,.[F5O"!,b-5671BCbP/ThBtP7nA4^)]q\"_7%;cL2Fne]U";r82XiH!A97ENrPq#mPKAmC<[Mp
%Koo*ZPA8'+Z)tQ@s-"T[9I@W*+,p\Zj(eb!TfW`t#d>M<mYB247RM0%D86i2Fkj$@/'L:6UM]9%g:TROQZBHqSWE3Q/_a#45#sO[
%:VjfsrTD_]Z(A@;YV2'pm=GGo`OXEcr1$rG^HV!#?Gf0e53JplSC\J0^W1`0O]qar?>I?CX.X"jl<1;p!Cq89&n]kb@XjipA[PQV
%<uR=?9!.J<]';rdVu%G+"MS,!%:eX"C@)jo2D1_\IMHW]T'EUZ]t!D=8_5BA=Ycq,8@UG*m/0j8G:sVK_p_>;R3\m3SUc^7VjiCt
%$!?sc3>S&?(Xa)G`cH5sh4<+^'(?Z.4Xi!>H`(8d%:R_R`H7&;F$-q^EWRRBd7Q.uVThMPHgS-\9\<"'nZlQ5`_&T2T*RfDk&Ik&
%.ja6.ktjEG.nl\YOjk&N3,-8Nce)C*;ouL!5C:bY8aK5[qFNDSNT[CjWumS;`F"I*9M[c"T!3R$B<,>&oP-r[&<SZ?Yo-STF&\^N
%%fhlYECN<ro4Z6AUeu(h16+qnCUB!R[nb9u.d;%j=g]ucLIK3<9Jn7gNgm_*WNs]J(6`^%LnT\"QYa"bC3F8cQ_:tgTj!O&2SK6.
%0Y^A"/7s'(aNe7,2bbhSAp.*8ZZ?m<]CU1X]\hH/B!nt4gWd[l0#;SHN)&aQFN;AMDDAP'9^NTo]>`:f?Ttmp2`\$h#:UX4pqf)R
%47`Y@E+8Ce(Lh_o*!tWf"5OpRbF")^>U+qM5E[nu;'Je%908ntI(N9pr^u+b"/iP;!i\nsKfcCTSY7(E9W;,EiK<C.%&p$9>J3Ur
%)jZUA?20`r?uNhnpq;66YK-6,+-Yoo83!jlb-4M''9pX.U7n'SRhRBlg0_hV$.o9^]N]2"o\Wfo8[1+t.V`51P$\k)@sRB55:I*4
%%+BL01#1H>1gI(Zm,iUc]R2<u`(W^b^/[qH9mMnL1n%";Ha-Q8eU)P3-].D.M'p7XBLo7mjG64/>d!(OKHtreU_B<9'H>SKU5#&P
%g&>,kBTJN,[l50Ds(!EiJi!@!X`[dZfm3Qb\FGb62OAKM?WF[?R:s!2:Hmb1MqqjGe#=*%gV\/Q\o#7<Xn\1"MUFe/=Dsg;X)O'k
%^StSf9K;mmj[/+:=b1%og:aRh\k,k:B!"@N-,(6Q#Do")WAb%5ZeA@Hod!Xn]c+>YX7Lju-8qbs^k822#CF&:@2PUK*mEkdLEuiq
%b*nqgEY^SXXuR3@MW;$MBjXh9R$6=AA[PY,+YWPN-b5#&i!.KV0;^>pOCNr!=*r#uK3V)(o:DpEA5ZXe7CJ/7KIXXe2kIfG_d_MJ
%Z#?_4DR",mfJd.')pd;SnRCC#a@J-\9>XWAK"BSnSo,KDY+D9[P2)"cH8CYMPF8ZY2nu[[XUF#[d`4'A9JZ61;GV,+R_Z0#g?7Df
%,\8KpI#;-dpU"bC!HY\=P+FLl@oD+\V@`L^=fc$S"A#b#_PlT'3:+tQE*Sj?iF&oW2XN#*9S58Vg6G9?"%J*h#0cD6(X7qHeRkr3
%h.Tm4)pNQ20m"@GZ#mEV3kOX*QG?TTf$C4=rQJQKT.SX?r`ReO^$B<;K&*Cu%K8u0ZD"+cQlu_Jn5T=([GFOjJkMu2n1m_@9(S'0
%Z8cMJJ$L7T&M!8^F!fGo9V<U)-4Lg:p,1ugK39N[)CB*9kO01F3S._:AXO6bU*fJS[:3I.bN<qY$"g&mKpTcqbH*>/n7<BDnA878
%B`2MIn?Q/@=Y.3:(1%aa08kON`PTg#ftBC*ZERFr=tCe%ZQdG;l9<ZI895TK@QkT-k3[3c[9@9FmVOQX<_T>YW)^Hb`TkfmiE7uB
%acD<S^FAr1@CW3n5f0l5W^t"EZj3U%''*KT"'$U\LOWO$MT+NK-O.V:MWAkRkAoiXaQ*iT@W7j#JS!O?a$g]?q&CAeEPMGj6dVp9
%"=t`VXo)hg+ul"YHp-tfLn,E/i-!S?K-suh0sPuaFdh<[\K28gk-:"[)!B-9i(M+!!RNO7R:EMZ)"5]1_9i*g*o]E>1nDU:IhD;s
%Ng32^T''rR2Si%iMm+"]N/W%2hPn`:&JE(h[R7Z)::O:c1KIpZ:@onf#3@*O<dD9KXtD)AFj#81gisiulMK%I[a&[5Aso4`>sGA)
%933&]"uTW(;RQCKh+/n3H%%-Q2T!m:9'$[,C7]_bSWJn8HQkV6MDpa4W,l)m2uh%GM0dG&@Cj!mC&SE[1U()Ne5jo:;Yk4%)d(&N
%S)4-/-W?I&9YX`AGs1%>rVjB%F>NFDHF'-oR"m%`]K*VVALB/lMq_/06Ug,[geNGeBr7Zm>U,cc,21>ZO^5JE$`@ZXK7)Vk/UX:B
%<ft?1nnDA$Skg_BEJ&YDf_pSpAF;+mc&k"gg`W6GM9n@iP$?]aT8lQbM]:`8_/V1hr`S-!l3GDL"nJW2)]'=3VdjOJ>Tj&Zd[mn@
%oq*8cRuJ/6leNhY[[-_F"4->@`uhG&9PVLk]3+>6CTj5X,`<0ahcRRRj<kX\qm]ktQA4dW6uI?Z\s$k\d=VO`e<=>oD'[a83\,A'
%q0(k4YL4gF\NSK0IU_>e![jkmWull/r^t[LHK%LNFjb&tokGW%"Pmj*-=k``]U4\PA8Fn5[jA3oJR!fr%PqP2G9M0C`2So&lnm>!
%"B.PR2cBq\0CG#l`cF`oP8JA'E8i[c>-kn,Wio.+R@)IH@t/;_Ras"NM\m<FlpM*MHk5hp/_j#HN)tT;e'uF*=Bu&tR"g&SGA$5\
%SJqAeqPJ=E_Z#C?Sq2=-CWqZJA^W`rLC!P?PMdM@bk.OnR>%Va!R,YK].=>FHEnRU_g/)LYI<V.a_-20HeMZ5><GP&L7)/7Zr.3R
%.Z!&-8QWAFW@)LVo"@NWBI;!F4=OFe:Dp-W=0p_:RS?u1bkX20gCl^i6;nl:B7J>^2EL"m?=9-eSY+*%&%67-B27WtYMW%P]#XJU
%#E,F>gLq6]ns69*r_1A#`>QsD%Ebd9l)Yo1r'N?/X2gG'7F/i<5(='^iNKuRP;!;JhKaV<AT@9b[SHf?8J\RDo]0q)*eH)kjmhFX
%/Mf1=UXB::[%'%\hlbIu^ChB2(r1q&p3ktKD/p(hX#;HH"L7Ym`EHt?OU%p5SJ5#Ag0_hV_sBatgNAGAK`-q-S.nUfL*]!9R4/"k
%0eo!/^@[WKZJ$^.cDupmd089i<i+Hn-/#HOdnYcX2h=/Y'/<FW,TD_T,=1&u9;Pt.=">V#R>E2\'O.4Q[:5;7"iYMmg8tiBrt2tU
%d]%D7ceH]jP$s629o]lO_$mB4A:E'&m!/GrAWUAr>#3X&rnKiaXC'JG]:G13$Y>]=2EE(@\(BAF==g#'f+(t`[.#MYr:/IWU2POd
%4c;HNmC;p.[ET>/2LB'TIiRK*_(kq7?[#c1D-HSB>O?J<I'7haEsY7=k];YG2n[IF=7QgOf0"\&Uq*YpHc)SQrJS6h\N439@(&5q
%q2+1%5Yp.REj_6EG=EjJYjL1`[Tf*C>4WrSG2L1-h72S<(7&lIq.@G5-.(+pjnmY651;6P`[f2C-.tpS1?#$n4rHG3<Qg5j9B,1_
%`QY?IKUF)?+T@sU-Bam(Rc%m+jr]+\i*,J\Ts+=s0(U$0s-,*2LbF/=1s,9O3Hl7%]o>!--]/[JVri8mB\GM.$EQB\?"cu>92-%l
%C"f=U/V6Yj6SFM7,J0Q:\_9gQGHs/P=h9I#j9[eK4P;l^_<H3MHbNhGS<F!;(7si``<jSbCD[BSjL!7&9d:5h;a,8Wl$jm8rgSFt
%s%_@i3,DV3Y?!:d7K-N2aa#u1RCIt5o;q,^=b+JDS?l]4Y0hBhh@.W_:@I12:5oL*]%^Z`,3S;%NjC\O^<Xa7XEZgbQT/Wg4oT+H
%(?^5a@A9oQSmub>iubC]cchnj^5cqR\>$PoW\G50f,VL92CCRuM^'0^G[t;"8(rH%/EV"W0PrE5#8[VXVbn4N[98ltRJ,Y.`_^P"
%I<WSN'/268B2FaF1$'cZrk0g#2]Q:N(B(>RMT-@V`Y.''?*%_`fHb$?]$d+MBEWC\U61+a`JV["O0jf[NG191M\V5jMT2a!BGg?K
%U618&)-P@SK3/h/&;fCR[[KL54YbNBaZd>F>2es5(6cr9(XWNgDn.q^7(OFaSoTgUL*SsVQQ,)`BeNtFhtBYrT:<AmZ*8TRRFR?i
%qTt.E'rL<Vd(EYo9@dljA]D9*=^a&B>KlgWo=`+jDpn6j"MXK?chA393R?E<0>YK\)4g7Ci+t.,>>4f-'>DG=D_^5JG>J"r/DRlu
%7h`VeGrW(!8A>p]^8[Ol\La=9cL^P7j7(O@q"Nc;p2UeLi#3f,#S2"P>0oAPKq5DGj^pQi]n\Utq.SL+=HY\\_Mh3%_p"&W>8XPt
%nbOJYjG*W[WF]ONHMS((0hl>YHF#PS-J?4Jq!"'_2VP6LUEpa"B65*[m"R00:[=c$1Ue0fUg[kJn4_iebfC"5N,N>M-!5*3?5=K>
%9's,dX-Adl.L3:R9%>['QK#*ohdDb,Fep%kG;?R"b`6[915&F&2Yp/&k_V!U5d*4?h^,ncK4KIH[)l<0X]hu/WE1"orF0OhLR`Z&
%a<fJ8S;EZZ=b8[+o\87+9[&Oq9emnf]AYMCikO!Y7l0^U4L=Z7aZN'=S?S!riX<-jUQ!-5gUFL.4rQVm9[&Mg87JBmh'=7k`:t*7
%PtbJ$4)\1Ms%T_8H=!`(P+>7G9s0IkeOHC&+=7s#U8@g#P.3;OdYWrp_o<aG\[6C>VuuU4P@C@jqlBKR!BX]Y]#AhZe&YE^MPUG6
%6Xre*rgJ'Kb?eQP8MTHVBX;`B&;_sgUtB?;)[S'$YuL#=HQu:C6lJTh4=R_m'q3Sui2g1dG,r@jnKjAonT]K=DUt#18X+%#I4)j)
%]pWE&hOO)ZU=cEq'6T1t5?3=r#fp2<LQa,XR$aGdboFrE<c9sPm,B;55Fb@u:85t`8X)4FiDl>%UF9`+p">`pMislIAnLg3jNoI'
%U+FTar9sR.qcT034Iei3_SkdX\+r"AEmlpm>!nH*cD'*;UWh7kPgV[a77kA7m+C4+4H!Z$cD&O?I4NR[=d11*b`57sS4/9WC$,*A
%]NI?qPK7L_aI:1d5Fe#&/E*<LAhUO/lnlX&Xi2Q$0NV*\.?p7fZI%,9`lqdP9r,^+Bb+;>=Ugnm#9Qs9f#q6<*d2.(kl*M.Qf'ai
%KqV]f\k*jP"DYM%FLPZAQ83faEOsUI97oa%MpU_SB&aH$FFhg(.`]$gp4<4fJ,\nZMnTSOGDERIr-L]FF4"$RRqJ#9G.ZA:9^NW8
%`="B!#OO:rESQm0p2.6?X&Ug?iq&rnc":f%rp>t'A%l8rPY1NS!>ElGquPB'e.4PV<^Zcp=,edZAJtdOi-uMH7DAT_L[;WH]6i?3
%?)r(?2nWl^s(]nffHlhJJ+685Msktk0>;):#7(9Z+8G3=(QJNg?20!.^@rB7$SO;4^H/OK>IB>6AY]h*+0clIs*Z:>EWlE<^!QL)
%56W-Vf4#ig_"D".i7jskL@E$dIEP'tZqT'r`,_D&oc\ru9MYH%DuAoII/3lr?Qd;:Id6N+,?=^RI!LDD#YH^:"V6M6%b,W,ksH/[
%-BRb\4Y5/6h/7p$GBektJ2f*DQjLIAV@SDm5r5B*_t4pT;\ZBG13knrPH=qmoM,$`aOP8rY/oOVs0<D3Rd!':G?B`dq=5?Z&BUUd
%I;Dt`V#K8?Jl0")7c!+YERQ4ET0f<icU[bUob=tD-[iM,)GE'4p%gqIg?JS=]cY`E7d(q;9JF0Pjmhg9=gNjYr]f3apS#Jsi2l%/
%V&o%lkDEOVhU:YW!3f\eT95ff!,^MPq0Mg4$AmkPH<XotW0C_CmaC>jG@g#\q*CcsqQ&9:ClELA+>J="eoQt]ksYQAGu5m!U'9dr
%c-fU'ls,3Y,*K*&"bUGfH4jW`%M5E>SN3ipP?\iu)X5@^;CVThToAV:QVNa$U09ZPE4-aeOeeg$XpEW<$L>HiRfuJI*=@jTQ?o*>
%ZT\QTmuOL4HDcSe/<6FN&!LeoD=j=XnQ0IC]0>i:Prn/Y9n@c>J0j[6WhoMGj,RoNerD6!g'E_&]nJn?csFVY%Gh^\N(%kc:Ld+j
%ZgiF&4g)dsT+ZTRP;LhBV+%E"mjVZO%*`t%3JsH8Af$tp6KPk,d&n]$ImTD<bVV3V!uXS:<_j6]9nrfOj4[J^UL*1#bMZOZ5\7h4
%\MEp%I!I!"c=s8G0EPR3barOGj@Tfi7(lX$:i'D/MAMQ-@C+L"nJn^qgq0uV=g<-LC%Z3]ERIW=BA9gdV0mq`a?-N8dB??7Xl3Vr
%a3_RYAPL'AZ/%QY(>IqM#nQ]dRTYXc$r)tl;J2,d=I1AKKht[t:(uZc5fsF.NCC>B2`\<Tn:JfbC7;'+4]25[Z!?]MW*\gqojbsE
%[A16A=Js[`NT9L`T`/fYKUKMQVUo[^Nf'BFV-X&g(m_<Cc-fUuf1fPXS$EX6Zsft7CfT2g:6f;/W0XeI;0L^57]07&j#(9g<%UIX
%=n#P(?aM=]iB>f#h;O48lQpGl`K[W![Dj:m@7Ac>m(eoY7K:FE)o%9$@jM14,5]9$V,M+.Wh`B>Is4gQj_D8L<ioB6@Q[lo]O**h
%HhGlc"n\pP1B4BIhRK_ULSj<:)UM5I]UR?8<_PC/+ufCacD=JMC/D#PTrLR-b<`>d!Y$$2ajEMrl\"kYdjlV\WC#]JV%t9d,BYUh
%%sj%Od8HNQ]6P\m[:RfY)eo8n_,Y)#hlG:\&DgF@BO]oS(gW2thZ^h,laqRTk]*HmU=b0_J@A-t0@uo$j2YAl[a6Q?CY/cPe9Zuc
%S69=KZ*nM=LAjBk-TU`SNf&g62$F%6Fp?0`Bq6;tZ!d;ERcQM7oM`fD<XUa]PBq^]"iGNQX3tnEZFf<-JZRKI#e<qa@AK`*ki&FQ
%Is:n[<g'7)4!.$V9ERnpC('kU/l)<RrTjSh7W@LjrYru--FI+W79<qs0]j)6<qOIB>+uB_"iG*O$9XQAm;f$CUEHPDf?J4*HQhk[
%<$T:4`EqsSO.YHi;k7;j\USBZRV->CVSEsSBPKoRpSS0f-3Jf.:Xt1Pg[8%0ZrK7MC$2MM3WmK2or2AL3g+Wj-4I_0DHaPCY&Q4W
%T\s-\L>^&e[maX^ch8:?c'6f>FEK?;4,:l3^9,(YMR4C$V"$@r9#8S1appqR0FlRaG;IlqPq/OU,)QW\A=Y-4Aa6%3UT&>p<GbRi
%iNJ%JYXnsfEG>-C4m;>T8VSQ+jiHt*(lQEHWui&m&ri+,!3n'nO=W=57hGh9*JKX8[1\P(Ai*f#`M0@j+P:\iIeiROgVi,j?L!I9
%iHrP(HHXrn0-#VXAPD:I4M=Va*eXF*63TdsA>!^\]!ZXjEaJ+_\l;I>!936PEh6$q:lIs".bA*"W\oskU/`7-Q*&lCP]=\ML-(uE
%7(J\@QR`9LcqR_RGjA/*Y87A&R1=rtN3&G$Bl@+bC)sB_\csC\TUL$nVsQD(">"N4&T2Bl#V84-%crYGB.FS2"Fq\jhYHMCVW4t+
%[.-*?,5l]XGI:@#!@:2]2;u$`&rM=4XtrIQYmubL#p$*[WP8aoVi&QF"L09alnsf.J%>YLU1?)B)Dci./"Pro,AqrF45c\"<L8h)
%.:r+`=rTEGZSAh.<peIrXc^:*;b,SPOQBY-?!$IVYU$&W")M?]VmE/n^nc!u!sbTC2(EUXS8Pd9i*kl%*1$.8N;mIqrElsO&Y"_K
%e!L;t_1F>gUG\,\'&/tS0f0b:I?;su-N#`UdnZlB/,^MtmoZ;^UGGf7+]0'<WOf8gKM-!_>-X>X*'E1.#$Mi9X)t1ho;.Rm*KtX8
%W7"3?VI[pMCE6nQ>1!%^[B$l8g2^\_-)QA>"%W>S>81Gp1S!Wf92oXb>N=/)UKdu[G$I(u9YnAf>gHg>igfP?f^=]55fEqp6%,t0
%OLhLa2(l-t>fDb?R(QaA?Zl3[Os%048V4m,:#c#sH)$i]f>^oWQDi=tD`1(R5"sSmS]O'0a0eqQfSuu5`$IFEU0fp\d6$S^je=/u
%-kB%+ZO:"j(o'Hc&;Hdr(htoAknPLsnTGBTFtS\,"g*`H(8e*REJEA$qC-^.dd'Qga4^I,>Nt?TJm-[k9@e"T087f:>?oU7JYYXG
%o&6i83/<;caB$O),_Z8;FK)d=<#h9e`hdL[8u!pIV<EkQIS*K*NGs%`7>J'ArIp/.ZD6Daa>0OY-b>f>fhEnse'WPBhp?aLqE/SS
%"QbY`ESBMt-c(m4aj,6mdO8sCM>20qC1M_:-uH6:O?3FeP)Z$mPj5iL[bNmsh+mA)A3Da@]N$J!%\#c8_-PQ]b.+=$6oZ!a2F],K
%;.@^fV>BYCI[s*als>]XMdh/%@&Fu)'VfsBFXjq6M,n"Q6R3K_,."$I_c\75FI=U'nt`!Q_fCII<GRDGe\<WB_b0g=,#^s3qUoo1
%0&@M`jMaTV0E$r:lt<j9\:0QSZWsk10p!nh(0f>!G$uq+K$qXjO2S"a[;f44FMU69U`'SSmkq7GGi2gCZbCqA[ntg/2?pWCqU`6<
%)fkAR[TsV*boCBjp&[/X[4TirOsT;e_1U'02W$`I\5E1.o$Vu+Ye%NuhQ:.f?Sq2`bhlQ+I[I5Qe"-BmgD;s.^%JM:]?g2AkNdgT
%&,3Qe]oo#FZ1`erdrFdn7ORpTGHkW4hqIjkI_<)!dctXk?<M&?bgo8B:0XN?g"jAenYWOuku<\LeYg_c\TI],`B[R[njb+TcfLME
%rD1&]glJYncDT3X9YFTmAG2%qQVX2upNlY*F8u44O4qMG:e^<4G^1&tmCj[6qsWBhrfT:`VV_h9<DU+'F_gRus)i+jPHI-lXXs/9
%bIckW.#-fJs*f:@bFO-2mr-gdC*2$Q[kGAH9E11nOi[8%\WU+j\[D82iHn$".c&3q]D0s1:Chp:p<%`+[TA)'pG9jjpDU+G+,]/$
%'GLIJIT"lK\Sme?Qd4j8AnK/6n7;Fhb4d8ffnXM;fh1`'ZZe(k?#Gm!`@LjcIBmp#\7A$t``gc.=7:WGYC:h$hQAFnJ%43]nth[%
%*'a4T$p<7tG^4!j1#Bp^Y?RDal!aP4e,>7`^]*>/eb@ZVkB<_.g,#@+XdbJa.JL.>%OC4%XSD7$UV'pXXqdXmc2FQ`X"0J&RX\FP
%4FA\2D.WH"n%IU]$!k40PM?!$h0\9sS)9fR^+4\>\'FDi-+_D@9>Jt3n*rPWQI"E7mnEmQokaNjOgiIJoNf"8Qs]=LkLPN[&+Xq9
%Htm.G*e*X=W)+*T`]1TBkKk;HT&hp,Vp4rtY?:Yfb0G3#c2),@JHgTXSihA.ZXW$f?TdG'hETiO.0"PjNET93)!DuV]:p-5[Ja!(
%iN&u1\bu(*;cOgSgcO9$;\F;WdWt8*T=c8BbXq6CPMGufX.MJmiktZJhV$XBRkJf[cS?l7V/GGbIVD#f@bI[])?9$CH]Y6)C$3D.
%k<17?VS!LXrH>$9"grILKkRiSc.r-b:74KWFGl3O4M/)mT!]2/L15=$bpVtgSI[CF>OD.G>A&BarGu_M^ob%.BYh_>:UZbO[si$\
%=k?(q7)^&\8O5'M:S.9Go=:=#D7juBiLaDNap:0%cC.rV-f)D&PF(+^TJZOL;\QiXr=A9WLn125qjFU!qF/pr$7kr6#H^ML9CM)n
%cC(s53*0h'=,b;\dg]Fn-4q\e_J\N.V+E_W\b\IM?1q8Z\+dcnE\"q/2)tS<J!E%h[_8<ZT"b[Bo@6u(T.SYZOsQ*%LY_?dp[l-C
%mWAn55Ae.p\bEJ7&l9"dUN2IN]iqF$=`64Gf\"4>qYTD_IJ_KYi6t;B[rqEr%%h>qYPVk9Ym2=;[b@^,A3*dV+'O`nmCc>DD,f(.
%e=fY[4[LILJ+E6nVjF.-M_AJeD"r1Qn9DEh>-;Lu^VA!p<M(o,)1hC70>,NNIe.%7h8rtX^D"9U!6&b<0m:9%M6qG,R]ijk")n,?
%1jgt3.:)n"+A/;e;CaLYrS[:b!nbYn%l6_`emgl!S)Of0Kb#4(kji^SoBP@U",bJW\k$eOFlGVFa;05rR#rQQnUoVBk2EejODpH1
%T0Bi-8W80#DH*9E\S$?J$5L>Z=-8V8bPi?5e_TB5b":hH#kH5eki*]P5C)tPZg$5gn]FlW>HPUg,BJ&_a[tpNWu%i4boQNjI7r@#
%4DqCq-i7+@gU3A;)VaSalDPXT]FULWf"87Gs7""J,Q-^VB_Bhep4GI$1\g4F;)ufapYFB;'C4'E+$'1`rp^mC]15[+_HH^;1)YA&
%dldM.gh,%kS)LLdR-l-qBnlE/#%4KWn$laGi]h@3b."I_Rk8.ngY6RdAN>Z;Y9T=A)(5^S[XWnu#*G.B=><c@<itE!ZT%6/Q0!WM
%V#-)X6u(&()Nm.Y''-NkPQZl["OGJs58S>oG*rV$2CDVN0f&<SMQoo@5KlKk5Hs^`^^MRH_@d?CPb]G2-jbnmp`33Vfsj8M<Xtqd
%Sr'anY8JQ]6A>hHj^Z\"WW]=LjcJ.RTpUM`cX8&*7-+%5R;+o8!WSk+LFS-WJNj'f15@GeTPp5N@E"%u@\!c)p?5LUqi7our.D7"
%[?(ZNRPU+2Z5AmuC.U61SP[/#cR".DiY@?eqArO4<E:A,;_>s_N2ErH.kQ1H\sD9/oLA.AfHRD"Urm#EO/NP_`6;4(*u4?fi`W94
%A$`B321=G+ikg];?pYD3c")Y<-+.^%#_ql!KH+l%A_</Xk;cTE<eWN8P+CuC`0)!`N<a9JOb6:D.sjfB,RLfc.;[CUf'0)5Njqs*
%-k2=XnVjIMG,(7"1*!1P9J)Z,@mW@VHHn?LC=)_s]G&gih&`4('&@Vn2<L=*q++g[\$&l\T>CptHKBMBdcW<qr30m?`a[.Ge&WN"
%?b?FVpf4A57*D+5Hdr*Gk1/nJmO;h&]Bj5A<:A)[B)]/anp"rf35"inkM:n0@]3SGY?W-=G\Ffas27Z.9%+X>@tBj57%6i<+j@,r
%D0lf07=FegDY==S:pp4\:PF29^:O?-jt0GrT$W-;BYH>$S^j!H-hlp%:Id'Mqm;MHC)k"5*-_/B4&63!bL(6D:eZ<g>\]*ud*X'q
%@:U\NI6RIp3QQ([8gghaOU]O'd92G!W]<KH7d9:Pbm;%r4Nb?R5Q2]o,NHN5\sI^8rllfs\$o"3]:FRHS%GU&D]:fs053Gq8]T(t
%d'JiUI+"Dm;Y0jr?Rr=#kANE%CXp>KTVX_7ZYXMe>B`=+:#<sBMTjrj:#:Pt1?R6#^k^-"554+9Bt!lU>MD-@03s)Urn%@A4St/p
%dm#<@Z%B%!OlJY"EUE'7[=9qBJmsm<L&REa&@G6<WK<JPH&q&J`j=I>lD*ODKK&V2n)-t_4Nq+qq3YHg5'sldgC*(qP<pRqaQ2Rm
%3^>a0k3io(*PS0nJ5Yc]\EHdtMU*#:WsP6s5r""uTEif1`iH7]pnIIWbuUQ;'s1'FX3.IoYZ-(7s*jeqbjBlOcaU)!m9"&NXBfJR
%TC/11O1rQWW^NiDhrN)?4s?s9UHs0\F[_a)j(K8b$heH/_%l(ImQ&q=r;=%-O721S)SPUj;HOH#"ZBHMYC-oY;W6a2S&6i9k%"?I
%?^Ku)>fs^)IJb^iHW1bf.%P9?0MnIHH=r"&iRM((c0bCp9<:ojpTg,mm]8Wu[X3<Mo]p92g+`J?qeH-;bX2ld<TdZ.7A=_T=4Yh^
%oS$+T\V+CmQg6L2LRQgCo2!8*C9CJlT18L?5-ekLK3RS!:S,<OrY-ZKpfe]@52Lu2n)^)g?T<@DNd&Z2TP^:/Xf]'V6IcQAQ[;a:
%(%7Z@nbf]AUQuDIJ:3,\@)/lrSTK$M>NXVi`nQ8_D2lk^CNh__H\Xg@-Z=nbE?Noh=g&_=03^?akf'R/ebtCZ@4gA!+(gj6R8.p8
%SJ4iOPP&HjNJ_5WZ/oO<jNa:<Z0K>>Cgqas<Z18G(SC;[%Vm$ZSGUESo'GDga+GX-/5G,,-XWLmkSCOs]NmM1'I%tYbGC9BX'=nn
%IpC)MlbpE)De/\'-E,j;lY!Pm>PkY0,t.S@_ptho<k`uPWHNLiGB6Qj3IUqW`PLHcXrfcI,JM67BD\?7If`apF`s?=p<L)=8#:X4
%:#>hq56G0Y?@W!]\oI`/lsac/6[hV%`eFW)kRa?5&AG^Gd<e0t[DAB21R<5WDRTacph:sSBcRo/_=6k-W8A_6j^+MEhc3\Ghpi&]
%0_dfG^N4-H^?3^:Ep#M7c2Ctgh9(-%.36t\om'D^EV3f*$ES#ffC,fSI[<&DCggrb.G2m1of&5Hg8eX8F*P(cFhRW'3/<6<s&aJj
%f\lCD%@!aZ(jqW&DtBkGQYZPr>0hZKTp[S%T[8-O03-MGfOVZhE7VTkRkNX#E"#o234]'128@oT+8(%jSe^rM76lmB=QA#6gU4V4
%:2TV!lBCsYrSZ_e7Op;#RH$jfSKGLY4s$8*]j*bufp@BbRnp(F,Q.0fT<3?>R?Ln'go^hT!lJ4;=l!7GGZ3W@`/W#l0%":Se'a#t
%d!9[/RA5tJT7%'`MRh?\<hJf([at%C7IRe]@5n'EqsM#e*4]6h<_K'+H_mLTD<JU_*GGCip[5gf@_Bf9^O0>n?[Tt>\T]Tk]:Yrd
%h-P@GYO6&KEu4Sb3rXFUSHV6WqKRPEH)6@TpNcAXrM<Flo$*`3[83pgAdbYAE:VrdEW5Ue".VpbP>ApZI/D;Cd6d,ki-2dpBA8K6
%fCtoiT/.iB&+2jXjnYLD>Ms:5>W3#6GXu`/Q+m`)PSa)bg!!N:+1Lr-jDuh!Y$CX1oaS)[4!tn14Ltfhn(VtmF5)LD6EWAF_P*ZZ
%F/_[1NKk1A[QV$,)YO#CC\(]prH>;O4G]\.ftMdbIC\`m]_hEAdkB"a3*nU(&U(_b(Ep/Urj#hAg3X9MPF\T-!PPT^NfPi5]lj^n
%Z$d.[&"c0W@,27Z]Z+CIdDs.Bk1)u.X9n^eX4QH<\K7nAlF%*js5<0/=^u',S)5l)Xinkh(hS,e]Pd]kRhi`>jj"oKQbpW6p1?Ke
%CYYadh*/NGrQ4`afsNKD=0FO6Qih!73F9u!R-2ZgoutfhdA65t@3@O4o:G)#caLN`Q:nhe`S/aj26%Z\!Wd^46Go8;^"U)fmH[62
%/%ri]q(8@g$4YlPbMRTX@_t8%/`m<jkX"odk`!gijk8#9kOJ*f2?EJHr,6%3DJL]@?uG%lpZe19o#p?Gq:ss.EIOnKJ=Usm\_+3s
%5<5`BEn?*rZuWinCGOolhofWikJc$7CALe$0pq%<0!9JLJL!>N?r+CYQ#W,!hsN%>cG$#=0dF<?N%^s4nql'$3q;LU+iPE;[]N'_
%-U_I[:cs,.`ejAh9_7i50hndG6:ZB>?^De\fd#3([h1gQL'G)QPq*pEI_gl]ddG]eo]E0OV=,2j?U4k(mZWRG2da8#rET3WE`5on
%BAQ6:s7k!!#Hj2q">c%>)Ju0c<5R'F^9-V4HlJUj7[>Qr>PX8D].m7__/[+f50kmsg(!^e-@L=6jW8kJ,Nnd%FjB-6Q?W(4]7)^6
%TfGqR03Z"=Wpth$H#IU:rJ``@LRI2Z>AMRfESJ%;HF3j-fQJ8_Kr(i=QiFe7'FsjE%b<S"ZMWb#^%aK%N^aR<f1J,;bnmF/l"%P+
%8P^D?s12/,^3=e5ro?AhQn9>AkH@*8F'#bZ$%8UKn&&T=fYmmRr"RlU`T*TKOmg!7/Er5h_[lPJ]iJ_!l#"=K"=E3`e=DcPQNJq>
%l(-Q%Nus-]\\7PQN)Q*j\\+HQ*Srrf(RD$8lf9efF<Bl*&Ojb:[=pU'Q@$./HY(^@Q->`<V^8^sfi$YUNUt>"f@]u5],B3V^hkNk
%XM=aXf#rRCB%9c-CjB"<PHIVU/))Nm'LP$T$"M)eq@(9\LZR=eK@W2hql9NMIp,LKBuO&dX^",LF<:>FhjthJ#1o(<[]po3CiC#W
%@`E]gYSinu?fApJ'C9nRGVT>J]tNE\Xj3[PGB9roIf5\8Cjru8Bsd==N7mAGYU!T,]_/U`#>+MB#O6XA'<i9+nu(<IX8/lQQ':DQ
%UN4c#Uu;kSl`J^\!")uah>J%XI+^MAah5r*\.>U^OspdikAj,B`N0hnQ5s]Pg0)[,Ibt!jcQ$i1f(V8>AooKLo7!.e;6H-8?KE50
%f1Q%>]i3V[FM>5:.Nk$6.Fg0FrSp!M=2dk;R_F[f-bITY4nB.Jq'Y',XQ=N:%.1L;!B9)uC+eDbm)+X*nn@o8@rmq4/.m38ep.;i
%m^RI=<l\,_FPkm0Fs#htG09-]$dEeaDboe@0luluboASKhn<Ye+'g>OTJ[[Qo_-2I_Tp<Um5pEcWiM[rOr"PJ?`K4Zn]T_@LWU3N
%]4Wd?5G#<tPJNL>BSbmJOV&LCpu::3Yir.`HX?ToMs'"34U6W<lK>T>hg_uf7BP;9hB&!7TZb&TaY0(*0Y;dT[$#c]kM-nJgqqIf
%Hh[+o6\@dUWSjrj,MpU.piOp)SN";ITnTArKl:l)[f]l552#>">Mh3>5!95s.Y*9o*q#8=GJ=:d0C4nL??s)D5@&QD*[snu3n\3W
%N8lsan(EWBr'T8fVda+L[(P3go4M\F&$[,8^/dJTe(RH`K(YJLGPd9taCP/W36(jkLV$4T(HC9mGn\DphVV,l?9Yp_l:'=9pNK5B
%.qP7$4QfiFmK7;(;tT'-,7ER>rN2&tX1c_Kej"kVBc1OACTD]G,Lak9nu@;#OM.1;f\6,sG2$s%SX?sk(LO;gEG]Jc:]n=L=GDi<
%h#rHW0'Z42_/>sC:0sdc4:(I.LZc@P??diu+$WmiG?23)/fWp3rUAfp)s[;%0ACE7g$5-S%sOU-0)a!3pK&:jjL]WAO%kupeF17b
%i9f2M0"3I$pA]K::(^ZSWAo%I_IJFn<0#tO7*["M*tZZCa2;(X*fEg7l-mNHSTrf?ddD@+ljB;A5=TCk<pS/XNb1Al0'<+h>GCZ.
%hsi\f@4m&@heY,BQgJCuP&('I@*o,_c]!l,+G+'9b[=riW*?^_@du1QQ2Vm2I=s-s`.Cus["_'EOI]??/e4AYWk8EKHf4oB@0K+l
%K&S@uX1L0_R-kKo0SD(KFj_nN=t9#4HqFWBMDNJON[0N$aA=o(3'1hUlhbql3C,/8GDjhsg<&ZbXe1Il-*o/;Js'i+3\Rh?d<(f+
%8?qT79(0=EX]%0)r1>9We<O"E]@u//*/g^=EX(i*R"K^[b<u"G5,)6AngR%tb4eoVo,W8p!C(o^1T'^@'X*mtqRF0NCWcX)XZi;1
%<9BQ?\5_$(/j$X"iA_`!IW_!k(gk%C'Yhl8V+<I5oAnY0@lPeONjtS;$7U"(3$PV>i#G,>jq,"\%8gmlgTqSgQ%e1U?DN-@K8Q_Q
%Pf;3q`8M0ll>!Q?>?.uknI!FeM$m@fPU:KB0rHCqM@i'2Dq%1?o'B?JhR'(/)aQ<G,\:YsJ/!?i>_Q/kmi#-2&O0`8_;Cj2L].M.
%ogs(#C?/5qY;_D>;a8"jC&M!h1t$?E5$=&'VM>Re_?T*OSPm)R)L$Hc@YTo;(W;)4TqfbaD@/l[c,2g;^2iqM>59[g2,6WtqikT&
%nY3=eY'uD:R`s&YAUG7$1iIX(h0/>_#n3?EOmle!a[aAq)X0!spWbgbDSFff*oWsF"AE42P^Dr#g)+u0C4,6C\-nSu-j-l7`8qmh
%1E-#bKJn^U30-X@Bujl,jPdW.miY)742P!U^%Wf.((,DMLUtAGr)^4QQ$Df<(<id?Uc^Qfk`"O(KT1"?\-ogu."OgB+sVQpB_sO&
%PPdo`;B=JsL,bfFmBVN;2_o$j?V*(H\BpXA]6RHD(5fjWdL111Bqj08ROX?#EO8YNX2;gA:j#=W38%o=9[OaOb0W]0o;]GCGeN7e
%c2Qpe'4j,e'IR=FZa'3M^4H:QKig?sae4)6W)J)&_1$0b,i7J#6&pX6_U8(Q0AuFmNP<,%>+1iK;Y>RN\=QH0Z`;EQI)I3br#QN7
%Bo%VmoO&A?i!dG4RcJr-'<(#=4YEndOIeHZE(9lgnpMf&m31^j10tA?(O!W([rQNBX.M8,e_1iNN];@>WK7meoL1t^mddWSEh\7V
%<B!_t!UDsQ\]cgRe+^BIX0UW`FfWm+RD.$kbIk;gC177.$9f9NjY::;P:]H#8#Xm<XL.]n6UO:`m7X=%1E/&A<8'-<I1J+ciR:PH
%IJ,nZo2%7jYt)u2rl,iTl\?q<$<$La<m!k<E/%/,&YCl`Tc%LcI$?*;B]TY5&f4pTm9VEQSf5[p$5qNsST+ushob_Q=T)0G</_l(
%qs`3eri_*bbHsaOn<Wi`2G@*Mci6"a+ngK(T,6uYone-g%qTN-Ye8T_"Tt\%`)*_M^((V&/N,4r(&3UDU>QD9T^1p0DF7Qflq@@b
%MdUU3l:0c\fk)0a,KjZlp"d?XH]9LEV>pi%_cmTRRY`><7.4\:G3.!9rm^`.dU,ulXl?o#S(F[bohl`=;J5LN58*`UCF4D0lFbL2
%p[s>Hs0)OjCPgPAQ5J'cWkU%(QUR]k=DSf>d`=n6oMn?'oV0tdf.-1O;c]#;;,d'EJb_>WQEDn]2i_RHc'CY65C0<j8#[$fa`tZ%
%O*bEbU^d3n?RRa*5Ag2rY51H<Dud!bBV^X7[1imIbV]7)j4Jna9uB\0J`d'nVLp"qFMppY[MPaFQr/C:Q*u+>8O3TP0^W'SfO.;.
%n^FWG_k*l_5dG]i"c1[P0HF>JQI<.AZk9g.7UI@6)G!SSU;DTi./8tt-1:qVbEAPX;`S-4:q2),6(o1tj=h<\)ID-1E\Z"FCYChD
%<De?o'c#p623]/[mX&Z7<D^+I7j>e`+;^V`R!N'H.O5-^e.nXaWs&*=<M3_lP*_-.-KI]U:1e>'I/K9k<a:,^SKW30IDJ[*!Q`cs
%dt-]ZXOTXb,h5m;MV`IW)\=F5"(DUWTiLGYM7!kLXL''1f\1ognE5NA$AK?EJ.cW?cS@?h"WCLOY>J2R/5AO;:6L^?G<^9`L#q4&
%-8Ydgb)Lr;q\k8OAh^)u7U/:pk7S-NJK:t4bQrKe-der5J2m9?HWmF'D)4@%-&K_&'I;rh$-@MfF-iGfAsqo1%],9s9\WPiMU(ak
%qhJn3YZr3rji\f\8!f]:7L8d1/]3Q%9E:E_lft-W#3c+;Y>^U?P-9O,SKo@]msa\629S`6==S<.VEMuH5jTI6A'0A`Ni++ZEsW"a
%hfl>55mYusM,o<4`.A@29Lhn?VesG<Ua-Pk\V*AA,U$=ZIdV)\ZfF@Oh$3N/A4Fa74(4edJqgfgYiS:YOZ6%X.iZsAdim*rYqE[?
%0oubs1:i)t"$r>fNe+R=[k']^bTuTuY'P!>"+s5t_>*Kp[K[Lh&-b$8`.h]g>mDBH1Xkk.BKDO4AYT9K?4?p,@6JT9PTX.L1M!4Z
%TFHm6<`%3\eJmR9mt$dg2AnIC6*R;.E0.S\0dlH2"e#oX$nL*7)ig](6?jNMiW9hL'I"Z!g]/"ik^s348MEbc*6II\(18;GMm9j6
%Z[1V^l**j\]qcu@3]&uYU<s<H>tX4<_dqWq&Y.Vf'/"N=IRpp&FuU9r.&g_O$7nS15939kArd*qp*#q7SKEi_o>kg!1I?V@%&4Ue
%+^f$=%@M8I_jkMp3f;MF%+'X$q1.jZ3Wt(&kX$BPj,602+SER2C#mY:EC)a`Pq*ttgcY)X?qA]Z_Cudp^.qFUZuQm2/#^N\2?ru:
%(^F%kTRl4V\Pm&YSqc7'mr9[_3"0M!U``q]'"(CeIg1,O(c_seNP8S9LcC"^(-^*@-NnXK1F^Bo-mB+SM@(hRP)VbVDh#i/Fg/]m
%1:bW6%1OguW"F>>ZR=\43Bj9nRB:?%bh[>[5(toB1*&l?+t]Kb1CYtI6VRdMMF)o7hD0^KQ\^1%DAb)'lme^rJ>Wk5ZUR]BZuQm2
%.qkVtNkU`e"!Ef,Wo,fT/"8l,[Mh=<%8a)de%!aJaU&Y#fB00P-^.dm"mIe*.*rH4i^2*EgNKP'G1nf@=-jNQD>6V[;h==+'&",F
%_\h]kS:Vq?;Q-N:.'R:C"AuEYaR<5J]ie'`Ok]T>p/(qCR8*r`Zk,Mh/tNZ\Kc*<&*n;\:q=.5q$Q<i8U>s@Q$T-!9F9$9l_S1oJ
%UDejFK4+I%=Hf0ThBD,-+4W\R_f2P0>kH4e(\=;\73LG&HqY2%BY7t5gL5/GGG-^GbogHg'JRT6!kua/$TOs'2P2H7fQ7Js8\i^"
%[7iKB%&@l!I1EeuTZB"_/4L5,28eF^_D#-?bT02KN;d/++[3cSO]4"k6hf&D!T]Z_.+E@K.15iB(9a9!#n8sQ,nFh1Ke@1Wb[t"O
%?m\QA0\eYs?j,%,#`][>kNd0>+K[pd<4&0LQJ'jD4@Tdc\'hN\Ynf.aFf%O]'+cQE??i0clPDOpV*d;U)@E3Z8Msm6i%nr^'s*L2
%$ag%%V@gs>:=D-MYEK/<Jk^-uc?d8.UM.4!df:&o&5Y(4MF)W-:ai=U?OJ!1KNX>O`\SnC%Z+e=8PNb_W)O$IRncY0oHmY<W1K!#
%F?Q0$e4IR+\`LtL=ffY_acNih;b5Zl7>P^!$PA!A+MBZGPt_KY!dD1c!tT.`E!74?*seY5J/_BebFgl*fr(o8%^>"^#db./JMAYd
%BF#Vs"=fkOJ>F-nBOqZB2%!O3i_cgi_u'(#cBU_8TKP)=\n-OQo="enmsJ&$$P=(q^u_U5MF'G*;35*j!8hhnO@PNR!e$YqUP/s\
%re2NZ.gkgF7cBY]rt,$<i**3XgRp>rU*_jX@Vd<s&4L`%'npm3;,@n5dgi8Y5-$(h`2,Y`LSKQP<4/l(+W_(lW?W\b#D?h038sJN
%lZSu*=DWgE`!n#Jc_EXaY>"eS,.&n`f&V5qh/T(5oh@YY6\_=c]5'+(AGsoB.Yh_dhFe+=TJqC%(R(sEf3'/^g[TPDpc8GNKU//;
%3m`'Z_s+30%RuK:#)3E<QUsQ\U2N)D,]!,fi)LWM<]=EkDnMcLTC"p49Xj-!bho(U?(_rA;5*(Ya4,godNDd1E+p5fJ\oCUW#6a8
%D[;FS<^<&(_gNjre.Y/i=FOrLj:nC)X$BfN785NlaK;mkUO?pP5hW`OjhN!L4-#&!OP/STqCmSTNbXY.$OK.4[OfcuNLC]soL^Pk
%a7<IPcO=/V#[PU94:6*9dUaRf=Zo2J1,6l;XfpLCXQ)d5+XIU3,tC<S#Bte%S%DfH9Q`0_Qad0LF^".YW8U]20^T/3*9%V*Cms/$
%KK_=b)E@si--eeZ4[i(#1!&_nm=Y,Mi_^Jo+oFua=q3NgS4@P_*RE7Z>o"'+8f8\k>b_KZ[BQi4![:e*i"JC.+.HF&aN,f$Q\>QR
%ob9:*`#uOQe3<Nl%Ei8pLXFtOL(gLSHS?L`DO:\iTbDtklP^&7pJAGYR%8D[0Z(AN-nB0BHYt*;Qk!P4eYsuc.o_)*Ef-5p@=ZsS
%h#kNK&TZ^Fo``t!:uoZ`Cth6hog,l]$M8<%1.^ZZi62*lEJTOin<cq6$"3tq4A'W$dYcR@?9L_O1,6T3mHYgPM4l)*e@<Rc&pMbN
%CH!(j_!<-3`BtYd\IgT&maHD7.QHLM_h\rZjJTpm/a0>'$::\$DSYocI$]BZn0YAL1.nKFN"Y=^c*sZKn4q5YVJ-7;gNY::!8Ul8
%8L1G@K<(,I0N#\Xi;8)-^d8aR9f>cSNG":UAbJ@&l@[5o]?Dc$i$VX#YXh%o/OWIkX"mfcBb]Q(7H)S!j.#!,pjTSY5b0Kb(0n5$
%d6Q4d>4u';+q90?K`QBs<"fNog+YG17KU'&$&5+1_TaY"gu,19Eoc1OWJ,-[BVBs'f*8j>4[al*%>5T@GTTW,AG0,%cRqm+fKl.Y
%L8gdn&BkR/_81^-RK6M96!Il\"nh5kC\9j_aD`]9@.kOoCpN/QUM/VL]`\]T:fUQ>*Xf"76B2Na(n?PGPB8;$6Q_`Xi*[]0Woh[6
%a+>f<mE/;6D[6FX:d_[q"*l^]#nZA*P<lJh!NrK/hSmp*Ek#i82!dDcM$#Vm;R?XAH@R&3BVn.'#GqD$N:_tB:E,f^ALFrT")T-H
%OM,=U#7J+cH%Sa#e&WX]Dq4G9l"JmMacWmXW2kO\3+uW*gC+jn)[0qF1l6Q&*jc?Ndd_=ZQWtGg2G<:&-*Cq$JeO>-N!m!TTe%$Q
%*;hTr`R:k,Gd'B'QSa+PD458UEA2Ud[Ml:\B\'[g/=UaO7(:O#1iB)mU/1FC*kUR"GgO$9+kjBD2TSs>H,sr<<b(/EDA2c*"B^J3
%=Gk:\#HgNWGfIVk^^2oIWuhME=lb.d@!l5bHRXPtbn^t8'^R>hdmjBKb;ufZLH:/8MiJ=T.Y(pK!^+st.*QCQeF,q+$0kJ1o]bcB
%)JH'M>=Chf9ER-iBTgp,2'?g3m;0GB^dW'j<*3YGPf)QB(g)TG-J46,=2`!4mo5FR++Q)m@:pj&PR(n2BB*SgLkd%rIKFa6hD'UG
%'K:D,JZ=HT3@6Beceukk;b8:8PJt]^>SXUqBW.r5,+p`hTffLkW$\AB0h;*'5<LNBUV2iY!o^;gD&]u&b'G@9IKO6N!\?`)dq,#L
%Kh22f'[I(G*`FAr4#6rW'Bt+#M46l6Zre"hg*X"j7Q)$XNErHs?EpG<pJs0p[?;OmEu&ek#_RnLl"D5ll>.r)i]o*1lM;"?P3@Gf
%'oFc3]EB.<U94cZ5V/l)hsN18iu)SBQXQ]8e=#"!nb,LAOVC?qEVNA'o#IM_J<Zp^GB[:drTgNc4J!kQ.0N7EPSe[7+;RrPDd/Se
%hds,7&:i_[b5fQ,#^!Eb5pOMs.E%u""f7_C/opeJI.:,)\,ajmd6\P,Fq[.b*`WnlDcI4V[a5DTAu:-KpbJ7UT[6">KhlrE"NM,:
%[%e@jOW=uD#_i[7E@+E8=&Q#jI]a\\81B@]R:Q_<7F=F9Kj5sPU7Pe=BRpUTmA8Ef"!qP<BN/!21][k[K/+<iQKHL5QU0G<\'+CE
%&=6O:Zd6Q=0J[mg%!EnrlnUON2Cg6meErIB+-/kq:fX]$<4>/NgN`A!#=+Yee+(9<!3#1cpL0%W9mi*h//U;G.OjWb+<=U\4M%rK
%:e_N9JQQl#"!DP%"MWbP!.nO_ZgL[r;Q)M+Bb]RSQm'iInR.p>2[4jIDY#uZVJ2tegh@J^d><j7co]n]\]?1TZP(1E*sEAtd3)"(
%*fV*Bl-,p[573!C><Is)$>O7]Y6YL*kX7m+4HADuq>)KFEcIge+c;/NMc_jD6-m",FQcr_LkgVDNRbjD*ASMhSah,0Vkl]50F1Ai
%7aXO:'k<Si;ak_c`;lg9U5af8L.HN)AMQs_K%?So&s%Z(C5OV,A@Ta;*KP)Qn-'`b_l:(4$W5DGS"XVU'aI#J*`Wo=_\_6.8YUmI
%O*R_5$1q@ANY\?;9YUaZNC#b-.,<1tfUpfJ[V8&@i^,h8qDR%#*3S6[^8mq2*Q8an\cPmY.E%uB"h=qVKCRpml-p_,e`5if-!JYm
%>_od6I6f"teLB;IVEXFo)u<TqfSQK3&/(g,EZlJh`f1]@I-h2M@;LZpSu*a^%)Fn`DNIcWn6Dpt;GX94,ue>DLKqk0on7F*Qqf2)
%EY=7oX.c8>P+9P3!5JB('!53m7Uc+8IOZen5rp=43B,BPDhSco(PY94["DGr,W3+KV:UPk-$H*.2d%)UKJ%KdS4,_<K616E<7Xj,
%e$p7Qp@]#^pbiPnCl;6@59C)i^l(%>kOU-fC0h@tGaG@,(eIK%Pq4kgIm3L23khZCTu0KXRh[d]7>fVl;*R?@0epbOY'jKE2!oq<
%LF+%2OU^K)g#e6Ok1(S[(((c`,KVCBdV>WC+4T.dR!k/)"+GSi,GuYi(^^umPiNMtKDaT?rcr`sh;he*ni/"'F0Wqc6d]4%\@"e=
%A(`FEFqPc^A@S5eNt0NrN$rp^Nf?>u-kj'I9LD;Xm*(^_d@'V,4X!Q@bXuPQrFeFG>BO.%a2S$DSHlGc*\ih2FNu?mfU\Z:955Ea
%'Sn=0!d8hF_8FT8BK#A:TdA.\OW?IL^9Q-C:-(35M\W9fceqfY#[3%W^eX+`ekd(?;2rGpZK$PqEQilT3*I0EA6d)`khZY.*r<Bg
%Te:G;LujH1T/Q"$!\Hf;QoG@NUC`J9$Fd=\@g*X?a."5Ii4ORXIrNROB)FYmLn](Ho(WqSNC#b-.&\9o0M]`$rW/<'R,Zu;5RUH=
%8c++R7NigQ'Q2[5KuUJomYK;I*-'^Zg?5nK+?RIW#%(2_7hl3`[.=S.aP3&XL2>1>TnOm%*jVHB;2@^WKj-D&?GIaMXQ"p[\j8hl
%cJmTL&hQLKS)"<#6n-'LMS^s8o7WunBeV'g1KZIloNTs'&Q[;%*%.c]kfrmMb?OEFGZr8T#>nu904ht-Am(G'Glh)-GaPoDA[-r;
%]P?<lF=:+4$PWab`R8J67A>,&8"tR(lE_/j&rcs4#&Lo+.>mARd]G>9Y,$f,f;EE2>M-e^7+\e[\B+eEp@W'8[*neI*(nHpZ9q!$
%9SL*_R^QrgMaq\aLVX?TA=NCGcdsIr_FV$F71D@njp=7MBm(Jr.,;\4%dah;INLXZ9A'5FKH1NP.]uX)7i1MCP`<:Z\3_BVHK[rt
%:J8k</a+Slp]?]pi_c8`m<F`H16Mkk"+E&Rjkbk_ED@:Z_Hap12@A]L<sgffi"STi\T[L(NP:@i+j(b.F/W8/f18!+@Hli0870)/
%W2uX7Vm.tlDsU@C'kW7!M@H@LH3tsY,a3f>q%6/aL-fb>\*;uCA5?R735hY%3gLRR#TRh2,rl.njXO51:m$rX%.H@+`B6isI?RsL
%f:(!?Ck:R2%BMkl6BXZhb"-PFZ*]319`ngiA5Q`3/YU4g)/J:IUmJ,Y=[>>K@q1&Hf]Bc%#5T*"UnX:f3Kd(A#1ap1<XKQkUQH4I
%V3S)qTT<0!/3f<EjVQ9$EXL7<<N*!l+t)%\i-2O4:3n]&-i:9oNYV:j(caEuNak'V/Ee2p7*CcEF"DYhW+B$Wah\O28/i?XH%C4u
%QK@%45mPg"#hh%\/?!-pbul4Pn6#'P;]&Z)o&K(4?j.!,Ms7kO5,cOB&,KBYh>f`6<+7Qm,@U+?AEHujX3[nQ,kO6Yb+UttJGV+K
%9q9:g$6!T_n:'.;oLFE]E'Kd^M\Qp23d<+)ZMR$/$Y%0b%a)r7Jm.8S_2SpZcETsE&AV7%O;Hbj6N[].d(t-QY"h1<mYD%omrkh3
%*+CWb%VU]QI9)t"9WQGjXQe/c$W*ct9C,oukW1Qc!Za,[>Z_$p62D?)kJokLAqPi\%ZF6JQVR)%4BDs"i3V@Zih6dnqr.F<X$GHR
%U$XZQS0,BQVZ7f:n:2>WEfgGt,KX>PQ,$%l_DiY^QNUtj<@SM1YSlYh,bc#$0j,kq8QNHa3Sd,chg+KR4^Oce"&FK(fKOdk+`Mf<
%ct]9tgVIP<M@=tC72<fCcFE,M[[mi$&9'Nf,n6!U8PI],;UVQc@;Z.o1,/J_:)Z5WF=MG?N3n-V=+[q>:;[SH:3Z4r\VAJMB<`Q)
%1$C@+`TAtH&dE!T]p)P?7nS/L+%2=Gi70l[:.c_15_Y&0.8$?"!uscsAB6Foe<TD-p-XJh6/Wk0SmW==ANu'ng1Zk7qjeWOLZuHP
%+@l30"Gc0(WBA!IVkbKA4:U>Y&qjf7qtV23@5k>s(>EMr7k`6YE!cF$,n-5+(Dn"AGQ\%S3AB+0QSpogN,KA_N#Oerlf&j<X=:CS
%2o*OqLF7``[CgC2m%"sM^mI`-\1J,%MZ0O8qPh<"h*qZH3eJ*7lu<N(\+(ate%fWd?p>XKZc+79e3##R)E7a=oRXGpE%[,oQuS`7
%#BZ.2^&ha_7_g8NeqE&*]!r(/EJ_I6"eR20>=3=":fn?fAHW9%7l"2U>EK3*2I`uGMF5/>h4omZ+=N+?;0#bi#s_bQ@kh@RgL0Sl
%*VQE;h3,,n+@"[^FN%M$YoWOQMLhgG=Jgr,kRb#C^a:>"6UrP8gLJb0X#>@8s'td1E5(Dc\A<\/IIJlB#\`^3;Wu)0n/+P%ha.2N
%d\17D840=KLmYnd1QG.PmX!F$[gCQKb]-@CQ_IaD18Dhfp.Q\R5D%am+R3Rs$<kiGh4?P./rN0%H5Z).1%#MP)..rNY`$)G\2GK?
%cN[l7irTkh2Oc#/S=dFk4Ceu6Xd0dM8F>ANP)!dc=p2&KKH<=:j!e?OE*NJ/U,uW\Fgrja-4BVQ(itX>!(I2o$1JNhH5q\!;p+SY
%*_(UQ,4G^C,.sUWUik$0igjE5@>a"6FUSUTjtf<=`0Ya1bhhWZM+WkPFfI+$bT93NWcP=:ln!Z)^;mmeJ4,-?d:IiDF+bl(gu5OY
%2QXGIg+OG!>`A@bL]It/W^0^i-jC9A9?a3qZPTe.ltq<c;[.`;bD(0e6+T7ZZ43hX*A"diMtAG`(O&,=Nu&^BqiVZX`1_qu-lnK_
%H3jU41q=psQUHF*K,[a,bMs*:OkJa:%AT8b%;7-p4(Nse*>g.u`e^CGcpWo#6*#8&/sU(;6G3IZ(t'[sWAE%a4]`;!L<pfn<<MT]
%,s"]+DTOHh2:o*NpcuEA@/t7#_389#aj6^eI/O>9^p`@Lb)c[a@W+T4(#lN7$W]1)E2UaunAkX*bQIY#]M\$\i^Ga@5EARQ3UC@+
%?fkQWs+(F>_$mWY&&GLFibE)hHH`)R/06L\KTm=7%+PVg9R2b["f]CY!B`un+O,_P^hSVJ`H*'O&XQl,%),=AJqi_%.Q4:MX[j>h
%DS4<IQSD/P5:JNVE["C<cuYjWKuLsHWk(+.)^'@Rk)g@n*]lQ4hT@V_IV6sfgL9%;Kq;[96Ej8E^kr;chnYO%FSSJd>3l53?6fi)
%H9*K_0dq8]@,,An&Of5D`6l5G);79H/X+Td9J^K%'cl12+<i?H!mV*+cjYfXZU1OV'EpP@'[np1>B)[M[tRdq(rGIA@)Cj!1^'V+
%ek]kqLp"7J=CO5[*"'%;"RJr3?6GpqI1!4RKd`':bAJB+o+AM!(5=T-Kb9'@\\YBD.1O+dS9R1gk2S"XfL7HS2QmhX!EaNke"tMH
%6uAr^U@U\sJ8ljNiea^DL)[Fb'^9!X,!POo&<%?UK8%CfWrnP6[]JN"!NQ^DRY1s[kn$-S0W-*>#CUb>6mLf'/.B3WQjr"oQ7Pti
%OS'X,Mrb4UL5bK<eBi:+2ARA!_,.'kiZ_BbO#O$)PKk!r`!.D$Kb1&JWFP/uZo.'Ha='?#[ne5[@WWYa0@47MqQb+X+5Oikp-4"H
%Zdt"G<2_'smE)E"i!Aj2p/U/j3hJhMA+TRo-j$tALFE["G-*1;gK<:NqsA3_LosA.Rj.i"5Ri=o!R'Jm\1Fp@eLqV;f&I8kJ^q(h
%LP,O^7liW]FD>^[)%iC(TJL7kOSQ\"%no;7KMf)f5n0/%OY!`'5:jB"+,B*knKlN?+NA!U\Q+o(5qVu+Iq<2APPSBVn@ET&n/&RM
%0\Q.R:sX%;G03Vm00Y<\Z:_C[X\&iU$Zc`g:HUUY7+"=(`P<(qIMcqQGVib*i_b*h92JGBMaq\c9_,;8lm"KLNBDb<^d8`'2q[3[
%@]B:qW$H<i]\o6`6*W=7p%U+&+_@#Z=GVJn>/!n8jc;nHJ_O]>qNBl`G*EjF7[Pn>):(Xq+-.lQ\&o+#+>M\9AiLW=#5@FCW9'(1
%'nKS#L;-\)AO_$L;1\4&^>Z$]a.nO-D),V[gD<m-AO_2IB#k+0rRHos2$16@,5,*-GS+`4;._)Rf/o;;3+:Sh0,XD<h)a#1iFnGl
%$ABa%8K\dJq/;H5=70tl[<Arj!>Xn(%JXVE@mO0,(]UE3$A\#cO9fRg`SZ-A94A5[6rC1s!nA^;UPcpjZK&c+caN]'iFj;p3,@HN
%7NigQ'Q00VW2sERrTnL1Nu^H%$<3c3O"(LGcuI"1]<k$AYX]3t_e/3<$8"YC(_$WUK*cDdoq<N]TlXk1p6nPq:d<PA=B[LkG918Z
%E*KDJ\>2R4\m?N:jeeN*<(2ZcoFKU=UO+NX3%!D7MRK<,hHu;M,efX4HPqs'UQl2qZ_'h1B+':3p=2cn8&r(!^s^F9[AleOd+W_B
%2K4(!&-O./Q!ooRJ=j=jhU7%Y2aI%Z9T@;h>E(=hn%"*X?i;Z$Ot/Sej9=GWo'NZBmm47g4:d+&)n+*h3Th&hF=%:[fM:Z'c2!*e
%MScL$';Snr0[RiM7go8hdVeS?`T'c`iAT?iV6JeTLUSS`a%f/k>Pm\+#AX(4memVk4D$r89FTLuTYdjk-]fV[<HmqC",4;*QUr`O
%`dqSj(iC%0EN^2):uL:_dpu_phcdA1.->icB[7o9dp(,uH<*'8ET(5"M5Rn/i+rjE6$7.;?8((IJVbW0!1*lV\HWT)1ZFB8$u*UJ
%JD9tn5+_t?N7]VQLKq1fl#@"M`%_'*oQq=V&:("a#.k`m!L4'53]9bhE%O3BkkCp\fpS?9Loo[H<aY*!Z'ei22TTIgemC$8q,>[E
%b^C9pQ]kaS\F9jSWi@hpJqHq^>o2sI&S2hZ*qpe%H5Q`h@@D)4bctP\r:E4%#6`p;2!A81(U@n"g8Vk<._Z*RST$g=a2Le9>\/ao
%Q[#^[MIN5J!SqX7*I3Sa17NjN#N?:5:i==9B+(8\]mq+t$"[$XRQf)<),4@.@f,J9)$T%EU66E!Me%l']-q9SbBksF>WQ:1!EFjC
%*D7/5!0"+"diC#'-*V03I3;jd[4)"S*WkHO#Ut(7"N&&?AFf4X'pl)S%^D[ALHdtCJ[dfig7K@;*AQ#(KS6"5L;W=mV9P^$dV`&M
%%&EX-5Kfscq^)Mi4?Q9YQCd>')[3S[?pP%^N$/:OY&mOfjDVJ:LCg-bI>h=RhMk>S^(01*2Uc!D+j.+.#k(5KO5&brG(uGSl1&F1
%Kr;9t>7=eFl9j,s>a%Tt;;(J1JFDtGGs:&3`I2Q"3:?hAI2F#91Pp0W#!'W>6U$7BNdq5[]TkC.H&+tF5q+=<OJ=ieA^W93F*QJs
%kDd=IoI>?0=qqYXN`FcSq-b-)NF(>hjb#3]e"]H[ea`HOG)o@J-FP/*YP9-L6lP,pTO3`imV4.VG.)et*k+K3#m7:<#B,rZ[V0dq
%:c;3gJJS5PYBJBa?ja:M1sTWe73O_1CI8d^.V`:GTRoV7&2&`()/;ZCo_Np]]D.[<5)j(iSq`\Y_iou\L'c?',*8h(L2&Tr;#"S]
%>H:pN>^uF$AOodd9$NJk,LE(!_2sD!6k]`;OOi,(WjT9qEqZjqKFmd!j\Rj9L:?S=@LPWA+qp"Bi(W!+!XnHNGT'bATT1ZQ!ucl<
%<21SD-brgN)1@\hAB%M7&)U4o1pdf[SO!&/)MNE8UN"Bh%59uKerQb:5l3TCe21q`W`dE'kc!jQi1ORtiW-o29@"TIb$u<bmVA33
%%U0aD\`;(j^A3cGK#>e1NY`_p:_sP<cX5*c9k7H,GVhmQU!KHGl&ru@!]JAuR1TU;;Ub3WUD&e:`f2`?8$"sXlp;5s&Jtd<N^2)*
%`t2$mffi*IFU2o3"VbNJ6ZGj@6<+^W%)dt"!jto0KNUYIf6!_nnT_A*l-pEC(TX7(IYsZV@ZXfBi6lB%YiCWe$]LTk=rN:,,ih'S
%Z$95BK-J0/.)#iohNgWk*3d.\EJQTk2oo]rV%S+@\qrmOK61fu<)uhXPACZu48-DI:$WkV"C^ZTHQ+5KIcOh/Ka<RZ#Q]:<>GDaj
%C)$[Fl6]-U@JY]hB*>qJ+%HPD&J1!.F&:%%O"(30k>gOoEI',9_l23=)Cn!k_89f'XIru3bb?YsK-9d*@9R!JN$pe8++jd(ZKRl3
%V<:rH_f2T.e!54=0J2b\o`E+GLO2?RKH#J2\8fs2!E2jcB[Zi&%-E003R4EpN/]E>/6b00%:=[kFe6st2&UroTlAEei8nVEQ;_p(
%Qq^EbE2<luTj5RPdR74Rc[dXL0_9%Jni^Kq@>=)r!`D?nKEm0P)cp<V7C@XnOs)DfLu_`I9(>(<+HZ_A]E:p(Nm]tK75WD'pHE+d
%M,5V#Hk,?Ae`*DrjUdgE+Ioe?<1R!l;fttTB1B7ni-%@Z,MV>bD2ru_f>j.U(@W#V8NVZ]i?`3qB+f=%c-cTY]oZ0eF`<B2@9&Gp
%_6&6]=-^aU&oB$6-A<TTM(lpb?!nCX,bUDK0i9)c7T?pjYA@aOSUZD6ilkWE_4)L/&XZ42.N"*)$L*)BLPGW%iM:/+Qrhjo#uUnf
%\MT8-G-R'2g&2Yu<L3d#*>b7d#Hn\@ZsAQ_"N%rO=@(!s@P,W2hDe3j]a_S`]-pS_:Pl>>?bBeh_$W5X02-CR.eCYg.dq='DV-VX
%6b=\[M&rr-+Jam>SilLs(U;W;@\0`qV/t`ka91K10jOmj'cc?O@&*u6XbSih*@;7r]S",8a4hKQH1C,%]j#Ue0SY,nYZN?gj*A;4
%gC^N[@E=$P"W%Td[(NkoAk#c-O#^BmKHYn8(rBL(r5!HB2\&c3s*WFoQb$;cUVLJmSa]5l?#gW]6,tYn1W*2K3)&H4j%SCe2iP/<
%1P+sJ*Xg=FU+fSUPrB0lbJZ7c-oX+AK:HAgPJ\97UO-jf9EAH"$V'<HY"L8bQKPOc*n+`SPhs8mi](-R$aVgb1F]g?N-Y^'6M)$0
%?6#4/QW=?OPh9FWeCRVA4eon]iIpPcS;,C)%i-ugJhA,(^p'Go'Y:%_%,\'QJX#6>e('Tb#%+UN>ETc)YkY_RkO?8B*qS**h9U*9
%^!FL%pgRWe&R*hH>js47L<MpCmU]`W35YJ$*B^hU5RX2%(C\^W'ai@aQCr0S^!2e9,b&eHZ#=-T&?fOdbi;tne9)1*3f>jTSH-V$
%>Ir[M3[V_C@4N5*@=Urs!_Jg]?Dn-4j?G]8_\P:TcTbIR0Np"8eYKP\O#VKXY%86n[7l*;b7pp1>"4Q==h9nB.>pV9U^1DYOkB&+
%]KX1V<gX_@RK<fRBcY7b`R;F5iXR`8_80&W8>!#&NDVKa5J8Z!%%jg<*&0=78;(s`8i79HVGbZ4@CW,%Ke1.Qg*;JHJ;WO=.1hH+
%kVKuDP*n."`9YdD.9=dI/OE8i+#iWXjTi[]`u-[<F:8T0dacS"=2T%<'5qS6,U.(+@Z7KEV$N&]Z4NRXLlMY3-Y0^U@3sMKY!%)2
%![IYtAfs.$A[$O\TjdO%&0K4BgSA:ra;8D^cQ8uno["Do*nF<7j:R:=C`2+)=%J!Y!W)TL'ppgHC=5-IZWDcO`;grGa7.lD%Mj/J
%hR$a1@&rY!TU,Q&a""urNc[.qKALLO^f+c#0d;__$P<pWiLlK"(0&t*Z/=TCKZ=ZjIAc[u!i,,eT;'?a)NE_(i6FXo@Fqdd@:Nl-
%L!UGoJ92=WV1`_W)\j2BL-c-t/BioN$'+Kb!7Wh:2pr+ea%[^T\Auic;2HjROb"GpQ78irMG6&Y_:CRGqLRnq>Rnj7<oVt-*df#i
%Us>uU(`j&fAtiMK`PH#GJI#P`\cO%S=_Tq,X&>@"O0gBILBcsf3P#WNkAP0h@R24%cj>)Y7V7"[Dc&%nT>r6%$!I12Vh_l.d7SA2
%2][_*;'6O%&F^NKpbnpa,od4#57m!*U9_;J'a=.I>ZS5L0<GF*O/*sbFA,uhjrq$ME>G*K(]g!dI?T@#_0pM'N;V+1+ZN]jcuo-C
%KOI@^>h*oJ#+GZK2@pp7Od,X9I]>Z#(=D(QEf:EsOh3`1/9NaMoL=[FM!DeEb8:Td9[H95ToC3m"U/QS<M88?;%c"7!d2o+-qWT+
%PQV)T)*B5,^8At@O)\9<RL%/TM,s1MJ.`?d1p"LRSDl%dfPVCM#2-p4(We_RRp.F''1`B>p#'OH*c@;?T8)Qh,XIA&B;[RYpr7[m
%.5,(k),%'*NbL9;0/UdPFnqGCKj^tc4J<h<(gpJE:no,jWD>-qWe(;ZMCMHlUF6G?<ImatkfK3CXiV+0CtfGB)+PY*G'A29)rg6.
%MM(5JXLDXhGSIg9OV,MCA2.(]"FfQ3@kg?.(I>!X@E_-+FYO6Ba?,XPZ09\Zi07gbF9iIiigZO&!<9[L7Q\q>Cd!p(:@]nrT`:mi
%$HpS%&Zea$C\Vr2oQ\]+0fft#)pf<CL'/PH\d6SOq+===Ch!YG04%-k#"+8[K7!8N#RnfC<ZFA3*!H!fp(.?k+W:.#jAR_oB7UKG
%AH=E3K*C1CG0a_uFO@Vs"@nIg2`Y!ur7Rh?G+^H-@@0lHDmRjL<abk$L?7qZS:'oK(pn_"lXLhW@6_lTM(A5`%9nst7rmNTb3TBs
%NZ_<G-uE)n4:fBjndNkb]b(/9"sQ),M$$5k>++^Y/6F^G1j'N0&I[`U*>\E-,7kou(L:@A4qHDGOi%>^F<Iu3"iLr%Qk\1M98HKb
%+^'q+OC#)EM@(hRP)VbV@uhI8T--pr97rh5;(/OHE@*ur4=:2!UnLV4.Y%t&S/RClrKZ@RG=(![:Kg'ihlV&ZC)Whi6DCc3MOJ'b
%OP<tMRBP-ao[lk>^A.#_-@b100ar?KaRn0G^DP^rVGt'NAeY&dWPJ0NOPUH[`AJHa`d6DkFf5aDN*mVp,f1]W9c@fSF90/TW2M-n
%dLZa#ottnacC<_n?\e7US_\+`BF=:0C9tT[I[l7rPsS&@39Mtu!021M+sM_-#BFcH1#T>%fQ5b!?dodtZ<;;=/CRT8pFc,l5/6ik
%aD$_g,DjPML)?H'%s9c7q45lH3,1@04%o/"Rm\L!iNUiQ:FreB$Lt&ai>,HFA?gBN^_`;3<a;:pG'ogjZ5BT&Km6Qo\D>p>l?j`r
%nTV(KQBGpG2*CSm7sFg`,S&?Rr:uYqZhkF;RAU!.&/9jpVJ*->`SuU"g%F/D@*0`]WWi<[!Wp=abX&8<jn.LY&Hs=a`D<)C0;*tX
%"#B]$L8L`kMXiR-7OUV?dgXS1qU:%/BEWEu;:$mK6&FdWeJgs<O\hEIZs4_E:C)YdoLu3tD>)Q^rCn>M+f#t#rCLF@'H2-:=ko;4
%BuJW'&0lpcGt5i\3.9[!$X1ok%c*X50KM9+k(&'mc*F9Gr)tP8jVT-_5&?kKgE3679>ppp]gU1\e<q->cq7334C#:9Hn.gAXF.g.
%f?,$T44ZKbj;WLa'SRR]@;i:>Q!=uX,DS`XI#>`%iQ$naKl/4t@j2>lM4o(jJ.7S!osYdDH<ZlKj5G;&q0FlYcea:#9%;F#5CHNH
%SF5qga[*LJccFnO5XDm$m3/7hRXD4D]<0=!&#CeH4=HiFNe<N/&IKtV4G5JI_/O64nnruZ/l:=FFNsj#]l.ViXB2]s)u;eKUk_t6
%r>=7F%>G>c^iOQghejC'h<&ljj*u!L'd5#JcE@$/6Ir+ooW2fhfqGkh$:V&;7f:=&%4J#"7jH4nnPT4e$(cQ()<le+fD"GFs0:s%
%9t:`eFj?7+(!)+`RD.m\4O_Dt#0L\5P@M<e?4F3[S)9%0r<^WKhP1\_EILh&%l5%l`Rj+2DlSuOGhpGhW=p*#IgXuQW-?__aE]PI
%8Rq81+]7AaO`X1Ig=*D]NJ0mf,lX*2QKqT>9/He`1M8YUW>s(98*Hhm@>\>b)<81`K%GWUZS^ni6";)G3aQ1VT(=6%29d"C?'.7q
%aIqV3,dV6-g>K(=mb"UMPtX7*n^7BjS2$@_Rp0QFMimBmm`Xs&j)Cr*An*KW+:]OOdM@Xb8#B&`&eg4bX3u6QDe#[7l4dW!n=#0C
%i<@Uq:"%bJ#&?019BT!N!=C#Wa.cW^Mfn(P&W_St5("<EfL/FW#+AOph]?nE]71?226O/gE>r(EnC1=d9!eMQ3XnfZc>H=l-\DI5
%f7-%q+ic6Z9'G2K?]5N&4^c%/8=,,uqe6kTT6D_BB#uq?0.U,W*"?rn7-=UCCm_c,pU=IrR8"h/d[HP!9oTArIHn7TaJ6PkfqSWj
%HKqo)Ai#BU(CFoQ5i:R0@AB3aY">qbW&=Y<m@\nj:0X7jp`9$UcAPpS`=t:sP5_g5M\c1eG`1d;L04F06_fRUI/>ND'-m!+=JW@X
%&:6!JL<a^+Xd0Ysp`ZskES$%=c06>t@pgMr@:Z8;6pDbc,_*4U5g#>QM/&`_9e<C>'Z[&36i=75SR&"+EdVhJ+dQ;h[\'/sj<[S;
%VV!(f#EpjJP?_Oj4Fe=f\(igA"a7"Sp=S^j3<nUcd\5&uJB<!(;ng1[C,dC")$9&4A1OF:DG*ik_t?)Fj,n:n8W.k;W#!N/le$HV
%DKB>th[m3<Uf2f9iY#RT,^o9Hc]2/XLZ5<`98GZ1jT4nld&CK=)a$+ZP!:'NI3pH>k$]B5@9a"mBA$k!rmYLUb3jK,]k]7FNm@5M
%^3]LGX`_l0075qs`Dg7m+@6QS116`<Zu;luI"1$Qn!rG,-I"J_%qN9iS`m+j(eNAB#dqUrX3"B5mCT=Hno2i"MCbJ@P$hXW`;CAh
%A?T`.*TPV=kJTW-SMDUG7$B8uQj!'?fFWIfOf*5L3u^,fOR.kl"L(%tAioLZ:VT,Y^FsI>\`D96JuF1D9pd:i(7m3IdY.'q*+4T*
%[*t\8E.JVB87nW79^mfi*5t7"!DVi^`qJ,OG)1U(QfPqmquRc1>YLUI&Y:th2)1AX3hPA6Y_O*@StkF;:R]=o;:%#.!JLPL2ErHC
%/4jp)4grsI_n[EO:4b*jPhoJ[@![qe@C3<l3Kptgc$I1ih(+at;G/gh$"!GAr6/kVOk;`Q5rnUNX-k4eUp0X;p`3Ti^Ih[39eeW]
%.Q8TogFIS2e'`OKQ]@4loU;b>B66>dKO;45IHg,QUo9>fbQ0.I5%3o;a9AO?BJTC:s!4c>2e[_7K&Y`k/fNfD.DgtJ"0BjlN?N4N
%?)^+'UjGfA:WeA<R@;K.Ork)3RL)eeRP=JF,26ZpQTej6$BbT=+O:jPKpXYO<pakU]k7Yq#:o4bf*edlqiS4JXrL\<8n8@[#9hFc
%hh'<7K3X?Cp"?NO.?%Wtq_GM)Hc/,sKuM\<dp+GE[3p`4dCtCb7*A1R60\Y,%(Q%NholA<Pc"O72^^_6<Sj<[BjHM/WO_5iAM<:E
%AFl$9A^tmr1DqWcYo;`RkH't09?soIq:K[..ZL<d1WaCdW*2ERH<%=d\BWCZ)X0NI,Vim/%/rkXkD6-gP5dH75-IE$gmV$hIa.N.
%)KC`+%ULt%bSeOaaLRuQG&0@u1eI47Fe7Y@G$\V(b>C4;-b1mE:;WQc1RUF\CeV^h(3`h*[a$qu6#.pNPsq3^'P+XX+X3o_BW[C%
%(n?.Cnu=be%nYa@dhpH0$N0Bfn2H#n+\a?UQU5%)_(O23+r81Mf)`al=."T`kI9CKr$>r%:q%g,S<*QK3$5Ie=`fgd?BXiB%O)i\
%p)BmDq!(HG0J84'j!.J&MJZ!!@?20.Agd8E*(AdGdf9PXM/a=4BdeGl)uMReY7?hcc?bSnXN+/MW?8H%a;71F3Tt(*>"`<bVL*k)
%4;(gD\P#X&!lrD6)q%&+8I4T:c*ls0Tnc9Ig0Fu*4n:UPf&f\):=<l8X*k9ik\.H[(QiDE2Mp5tTQ*`6g">]oV(@fXms_+=c:Y:s
%Ii^^^qm('O[^eMUQK]JMMK-o#630F\fU=hMY%T?+IC@IQ-lJVpBP6O+Vg0,W)m*hq-oj+Ec@O-6nRs9P%l%B&%YKF<(\^XsAD(JY
%Mar(fO"`Vb1haIa=gk6'6>u&:<E)IC0gGI4I#K7@B2'N]*)np_e-:,:-E,eO7TrQ_V(mtI27_dYHJqT@(!iN*@9T)9N2!ps@??W+
%q!*>b*>Nn4*PRm*[&@[2m+tT'PHfU.EnbQ-f7Ee(=FMfi,Vg)@>fV7#9uRggR^P#XcP:`SXNet)3Pe?D8*fN2hi9=0Ng@piJ:Y'S
%g6[]N>3"l88#U9_6#j6i7'/d<p(cg5!o(#]/]aD,m[O_#n<+e?dS"k6]=WD)?m*pakAbd$@M&?gVo.R@q\'Uj"H-P$F(8X8K$ErE
%OlhU,d!guHk2-DX>g^l1II=?<nI%CTcOC+`CWg^o6^:qnU=Y6^D4p:GY#E2#\g@:Nk/8YVVdF-fQ[I.iqWYo/@+U7o"IfdJIX?jp
%DdP1F8X&8a'\66a))JFek]NOPilr2'^5,)AH`34fQ&kcg-ls4+lLn5aHdkU]<sA)#'u5<!!<6%"r+udK7OZX$*f:q7:L!#am9YVS
%2X_]2d#B)n0_X$=TQ[MDe[bok^OM:DnL<BuAE0>,9T<K$cCc"Y9m1:tgnX&rbL2.85iq<4oca0-d;R7;[Sbp_ia!ef*]4R:39L?a
%#'+fo?WCYEflW,lV2AS,8l%on_3T&$D@%uD%2iRT%2LJT6b6AES0iP&W)ql=bC"epRBKtj'rJ7e*esnPnARO#Ma>SfC]V$'.gIAP
%k&MNo7Hl/0hG3](d4sDRXS8$"O)>7WQt*(hNt9LOAbe`t'/^L`'(4/62J8s9KuI6mC4PGlT\#$p^pu_=KR<?(Coj7B/Z)b(=)mlR
%@RY:pG=Y;iKsBaKWR3'?LVJIbCt+'JY"hUp$N5pEFmpMe9f"^kfASUQXRd'R[N'?[gfSA%iFq$2Wbu#C08SI+gLsF49*mX-S[0pE
%</&q_H."WdnU$SpLo4F/>pkqlPj/8qTboFOiu4VH1>VhQ:ZBb\&aIdS;2WKpc?4R"?,@#EKtbZNRcpamHpW:4R49.tW:Ok>g(6g3
%s0$N(J#K[tms;CjHcGp<m_1-p5c2tjrVSFA%i;Y+mDSpaM&B4]cdR$2G]FQa%4gBYh%H%!a.#WiAr;)Z'T`+83UnI8QIC\UE0"lC
%T,2bD$UPg%8/Nh_?fNb>`>bGKBm=W&BLl8MqjB8U2?Yug[">c5aU0PG*s"O^,k#^iB1dte%)b5#XS,k/7#p9V#N(K+jG0E'^^oC_
%d;a:B#g>l]m70+'j'0%hAGP18A4*CIqqG9:2t?$U5VID.p2DP:/Y6d?[Tf@"n'*m(XhTl"=KsMpmg90O6IBg<e$!9:^>SrkN[:4)
%\OZ$m(alu)P"n(CMF`IuWr3_-aVM7-2;\u";\5\L#4Xeh#inIrJ*BmZpm,V,>I0$"BN8VnC[7M2J`?!3)_sn!+c6#89F!]Qe4Z@0
%AU6k4h\X*6Vs-OKVRe//i=q(Ui>O<<:l4h;DOh/)'!=Q^-]a/q!bX7B8\/NFC@T(SL_D@4Ies$1RrfqC`(XNFeE+NGD%p8^5U\rH
%K94O_Q#Qupqoa1t0g/qNP4kE:d%k]N-0h@7?G\7ZO9&3Z)EdT(DG-b0oM-4?Ono*TTKHOc]ur3I%$H[_?ZBnb>Igpul2muUi@5m'
%=hK'h-1TB=W*$2`^YgQoFQ;mcU7T^S(F24k'7]oF:9$>;!c5"\VU$Rfj8:/Ri^":4?$R-&W\UH_PK`YXErYX!lb@2n2Q*.sb]JhT
%o,m6il/c_"Rr.ET>o&^_T4uujqW39#4\B1-o3:?Kj0f<KGjj,i&6k]$ddgL4Ga&3OE_hamq/9$F:Mn(p:Vl@mNGroqS1#p&WBNqi
%_blrLE3$5$`EW;BR/QDi>4Ci]B:9UkH4@7p5fiKFOgs-mm7:/3o@lDn\3srraQHuY`J"@WQ:$1_$$Y29BoYF*lTg(=s1IZZE/tnD
%^V2]60i\qs[\>%:MW>bbk]NPC\'X;Z,N0\$&mjJs=>]dT-fLllV>oD/?3b3q^*VR07`)ng?T>tXF<8GLl4VqSpFR9HZB0"K!Hd!J
%n$)KL$Q.<RlWT>-f`Y)#D1c+!#%,&KPrJdV([t2u*Z@<`Xu'RfUjM`VNCH0*@-fM+?gj4Q%H5lp)Vmfb'*UI/<d*(Hi?$ef?8.+0
%(&sAe*J^IMW#8"iG:CQc:Lj?H5:-S-?H=o7.8O"3h$5m0p%H(ZrCs'20Ylad\*WcJHf]5Z^YLNf%F$LkXBR/Eqep)hgL!0D5*^7+
%&L:<FAd/EM?qr$4jg,\6IV@_1:5BFC6HCJh#0fsA/dsI$LPd$4s$__bc[_t7T9)R9g&+lJ0D5T:N#U`6!l>[SY"McfQmVe-(^^%-
%d&ddONL-AB0]&$"X<JKW@NeqlM__;;K]Og_/la$NDrn=5X(?`15$I.f5%9\H[Q(sa]0Zj<-^Sm@-)T4QLCqr"!!ju=j!R([)?^R#
%8,>M&P\aa6UuJCnrRRS57gTt6Y!h&<SX6oDY3lpR@f3%B,,,NCEg%)pP%9OTT"30CK5MF^]`h]=fH'6fK^<sVfD5af0J[XX&<BFJ
%[8)]8%&]2u6XriSHBK!da8f\R)"j!@;T-?O&f^X,-)f%ng#IjU=+A0Zjgh'b`;%E<Ot>JZa9u<=7b.f\?1TCsGqA"K<'MBUZD@br
%))FbsBRM/aKi/^]^Xk"@5f_/"<-+5?!4A%:idb4)QAhinO,Sj06-ukY7*4ma1-7g/oA"3h"uZ@$K5f,&,,-8kYpmW8.Y('/bFo.9
%<E&cd<VJgO7a8"05^W1@V-I(>gilM,e]!,o>erd0kCB;;]d_ILVLkbb=QZMk0l!=9[1Aojnj+aR1EJTnOOM4-XegsOI;XTgC?a-V
%Q)g]:AHrVrm-M.%n6-pVhG_ETlN3%r^MFXlFK/&JOqh`E0i;+LWAJ>Q+$Z)/iW1bJN^ZG@82-kDA)GYh_9Z-Ve=JZF6%.[t80Gg/
%&u(N#="7!l?B>]L5##,2&;?14>@5bH]u<l#BEE=A0EUR57A1H-!T4P$brm=H"Z,aA"3jF%DO>?Jk$MR5$kD#AJi4,INOnmck%#N[
%SQaEc:ZhSPQQ6;3r<%kOD1lY'G(f%M\^oP44%kC(dS<CsZ,26g]+53S\4=EUh5d,P75(()a*lEN<B5Wg`Lqd^*3q&XhauHXLKb5n
%(]u7^Oo#P!@c,20cARH-cFQNmC':L^f79_iQahM$I5MKJ-qQKsrg9+j/m[,J;9t-`=RspQ\YXC>>f1I2W.1NR3HP7X?Q:2Zqfqko
%IZ7^F:hRc\YM4bp0Y0n&8t79Ug?6]$3;nb$aUHn'6B'8[*SFMIL;(95Z(i]UG[KIu)R86Z*A59`hK7@F=Kaq@1Ptl3_Eu:%PF6!=
%]G*=;R8)Y'rBf.?W,r2S53O['(EQUrg/D%-B=T\+JX@qD2s7o4pW^6eqTh"];_RlU"pTtrB/![gfVn&#/m$nTo*`^T:L@#]LqJl>
%6OQB`NofpimFcB'>/Ti+X0VGA"?Zd.IBUE5;C:'BlJ`et%S)-uBI[b9"@\4.\HKc/4k"qm7WT_LAA]T0KbS?r=]1ep.*9B.rAMd@
%aLb!ESf8,P7IZh"X->a()Q3r/mJ`DqY!,RVY/9VIb(*;dPV+YT_JdUaSZs1.b:^Bp]>tp04@^2U^8&qFIaJW2c9oQub,W6fm1a+c
%]65!3=32`Yio^c8UmY\abo.N#4HAP1!CS;$DA:r![#F-l&T/!Q'1WLo8$Ab'92$eT3MFu\mF)Qo*q`:XR@V&]&8[MbP?lg[KM8br
%pbbW2!3"G@5GYS0g&Ij\p"O]d<mLl@534FF<'g(BaA_&<:#_3*B!"E#g6"srJGV6#4+NH'R[&!RKX?%$l+;?.H+1XT6N(p)!Cb+c
%.Z1kOX@Sb?MdV(71AT$u-+Cq"I3]UCD*l6pi@;euY0r(kr)CFa:Zkr8,JVZa,SKm6^9VGST*_6'=L.QhT:j4MXCU@",+^EK-kHY-
%T;)G:1Z*mSeUr&TbD$*#H[`).*;8Ud9Ko0P(E1j"*+IRCim,?QM$uj>aZF0Y!#.5'E"J=@ou;PN6%r;CF,*+4%'\1BVBdRQ\'9PU
%M@:Zt(4\#2au!Y3@46K&&thOfVU"lZM]c0cnH@+[K$[;X10M7^&]TR1ikZE24rVG]OdUe"18Ks=PJR?a<7u,AKT2Q90K*<p`^DB+
%2Gmsuc3hGW69YI"g.A4ie-,=gCb;>Q-YHjlCRW9I6P48\I$7\e)Eq"JjmYSMhNS$M6qWHl(P1e<p*Rbu*3qj`TaW-3QOGkqS`&T^
%DcYdXEF>+6e:a+oBr7O;PAVe!1a*0`5fQ0mGf[4`@0-FQLBL52Fp@m"PAD8CW4YcRA0D2`96HqngCs<qdTcE.KImP+85`((%me7k
%Ypeao=DJ3$W>gq0[26uP.V%bW:alufZ?f<DAWe(MrrAi%R/Wle'cJ*KitNPm6>0;Z)5cpsf;08cB+8>WK.uAFef\`!:"D#CU."n.
%j'3>e6F*.9'rWa%dN/r?f,E!.=YcC58d0':+Z/nW\[KOZ+r*f/FC9hM?XslZ9/Voh`%Q9m&`i?7G6GP]<6Bpjm2.qI_A.)#lu3A]
%WEe_5"N;rla$!&`%?q0,!9M;8W&j'<iK&:]JdX2n3G"B*H.aC#8m"]-oHAKW&;i6bC(Zj19K+jtfCZ)V<+q_O@p6$P6KF!)Ej:jI
%5rQZ"kt2it'tZZb-X*$oJ91mT/7?0\lBa+N77jdQLc7][*oT_Hp;WAJFkJ+"*\(0A:('1+PL6i&^-RAZH+,mr>ehFm5#n=@P(*Vn
%mW68<!uE7dD.0^]jt(u9r75Ra&0DRR.gckYMkC/N8>;*$&kR(I<@0iR59Z9U8s'T6N1<&([8QH+iKRB++XV<O2El6XE3.fl"oa99
%aNpbEk)Nj[;slA;ZYnH+f*BR:[!&XXS^\o(?^)ZNcNlq:HQaEJ\F2Cs:*hAXNF;KoSCeSHa[o7GXSXEi6q[7Zm:@=!oY+_D5pdg#
%"0od6j[>Tu3a)@9541^LM<%fa4\TD;ie#<@EcDbL8pfcIV[,?Bn`3Ke-_8s3J!=:DKucrj`>7.ia$bZ_"\+qr!bqf1(!Hk'TS.@9
%aU'o9de&<)Vs;.JW(Y^boYTsZW&Uju/l"RpEtEMb,f01@XX]*?_S>1(:NEI&gPJZ!^aGA9+E"%(HVd_#0K!kOZb:G^,'frQLM;?#
%ONS&N(.(7:k6;RL!tlh"OqJl1\O/m3\&X8oVWVR.Qr7LX&XkNEC"=?g->"ot'fX`iDW9?Z,_H.:UK](pAU6lk,=4EVr5Efu:Hfu(
%.R4X(6%Ye`bmInNhWkJ9/QC'O*g<0#]HZp%M%#2"31-&\K@$_8l&)1dVd6HWoZ0Du*([d;_.;-^51E:+QpV<+.AY9pLROj8'iK*u
%%]>Yb@,7RB5nU:J4I/L\A.h4AP_u-/E;4FjNN=aGjQ7B!/Fk78PCo*UfHc>(C-51CRX$B.^;VkjV44NDi$B&MbC4uWI]&^EOX^rC
%aj)2!&iV6?3TtPeQfq!^=/p9L0P4;qSQhW?4j%Yo!,\7Y@qft]OctUu'jRWK:iL\7!-6;`]&o0P$4e^b`fu,u]RF6^"B@``I@c9m
%'9RUhQV%-81\%I<J-H>LP2MhX):DBIgD)=g?0==mj%JH)VCkb(.W^jKMe*621GkrkO.&>*""Nu(qLWZ;R>83C;O:Z%ng::4J#TBi
%#p*bXd,VQEhrK0GF6::X);6e?3PFolJ`EKJQ6uFji#&"tIP_8bHG,k,^@+Mej%VR#XBu0,1neV7P4\'GAs=,^JEl)(Z8\driss+6
%5D)YnT1bcm0\LWe</Uu"PZs63*)&s5fA,52i40C<LFXZrrdt#bV`L90UhA3=2tlhkT8j@L$$)<]E#a,5#g]aq'QC`]PC#D@7g5.p
%R%XKd!=``W)l[SE7cY<0_V!g\eq/frKd*3a[:AOhJkiLE`aoF8Bl_B6`>B1Ii"<!Idiu:c`P07jNqY]aRc)N>?!;MFprEOJjuCsA
%#%!*KiP"Pi)lpmi8A/ZeLF9@1BoN=uF39WnQ*'S>hORZ:/<?AZ2EV>0^<iqS4:7-1\Z=TJTB3ea3F4Mbd>oC3*i]lu!&&CbY$l;G
%-6s>pX-$m3_V?Ji::2I[051p_0%HpmL`("m`7gEBjVY&.cJ4q3=6B=0*C,sD>`QGqQ@pmBXk_Mb#=ip#S]dAM(s2,<1WQ"LZ)ORl
%A?M@U$Ff7p3sjnFME\4-$@PoI<+c4^ZBJYsCp-Qh`c6%?b^hRb*;5bHH1eog;]fIt>V!-,%mjXPQ6`maRIRd'IHZ55K]jim[u49a
%P"ft,d'kZ1)fjHG/GQ`=gRM_[e!_sD[9V7bcSQJ*ZpOWJ4GP(R4"N:,%4e27iFp/%Uto/IX&JA_Gpn/W\0g3kl6J(Pb%*9"`\r-7
%Zo,Pq^X@s3;ea4LpM+:^)G<nY@@uYM2^g_*<+0%Pl`ZV3GaBOPq2/Jk,YGZmPB&Mi=<YM7Uce4b(3eSlPsY#`,2&EGno-]GG5*Hr
%$8`X>`=5/(H>Y#+pqc&.=EE]k+<(,3<_Y>05E&SDo,CUPi#:5`Do%&/4"B)Y9\Ifb^>VL(4Ej\6">eI0Q_lLlO5KtG(O^&mi&9,\
%k)A?dl\A0fI%o5D+q%`eAPO`L,Lf8/;)%\1lGSBBm-&W2%s2&=rC!DkWG#a]f@ESaF*_^.QiDP<aKJicbVPq!Z:\/T#,YQ;D":?-
%ZFG<uP)6=iliUK:n94*.=/M5o*5QhJb`4\V3dNcD24>CY.S`^7R\E`]A2gJ[qZ`s..C+HPjE"l+iDVOiKE;(`(&HX\lB8_W@T(U?
%J3-o\2g/ejC"g8ms3Q-UF\Z_b&sMMm'80H;lW3@&1l.O)4L^i_8Mbqp;8lLH((8k:"Sc$>/7Mf^/GCI8_&O9'LM[O`;3_8[VE&b$
%9^/62G[V3XHeY''\c3j2U0@5@'L(_!Yr7%qG!t,(-Q$9tUNZ]E8&elEJ^VK%"r&*t%-$0T,p=K?9SpBsM;Ubt+$qnh5=6''`/S\4
%)_iWkE7Ser>#g&eTd<05Ik8[i,,U]_9EO!&-5]D-*%fB^0iUSof_/*[1qUScZpe!Ig!8k2_I`r@JD!/&)E5E"/`^UF!b]K<W)`Yk
%2ST*#0&^B5(-XOt7P0mU@1<tBS2'?I*6eZ>2K)Ei`g/HZcS!SgZ32XLHD%C4q'lMD>LZ,cM&XrjD+V)!cRgu[D#_o,1/s]<hKtpl
%bSIboF!J-l':`!2Mji,8<+jO_jC][#oeVXW)`DMi>0,+j"_u#bW*/rZ2SR\.NeJT*DUo%,0'&g:^_=?j&C2d4ma#gfrV<W]OP5)8
%LXVNq!u`H&82FaLB'#C9kUVi%WM5GaX\:6s\,I^GarU`#U_-.L9:m6=XiaRi6j>FP;^de13O)I0Uauq8@s$>o[pq6/+<a'2#4AJ_
%f*kmtn,BN[jGB%J-mF-Vh7G"Y*FP-K^$GIk(>PP^qNeqT_3\ZC_K]&fRVI(lR*:_2$Y/2[8B?HB.F2-F`ZY&BUq59-b'_mMZ?pSO
%_'V\#<A(8RA6]d9XX.U!*1P*tgc"_rE@?Y;g%o8QK!,6M7!F1qH'^P5'VOT$=\3Y2U^bu4IY+V(9@Bj:;[]^bZYNK?%]@t"-=(UQ
%SKOB[Z;*VRg).adIt7l4)o#R>kid'<7Zhmtq\cJVk%@PM\6IA_D"AH&X0j4TW^!o\jU.$ql9%(e\7!H<>#,lj'pb+/?.Y0_d3,=*
%)hc\nQR-6[RMf]GUX(C[0$>c2C4CtO1`,_GZi=s!F+LAe;p_Q<6dtJRk:/BU%fqBfG_0U\"J0%;lh*MZb7+`8\rkL1][;rk^q9#-
%ao#[_8$eU-_uREJ"g/cCQrW=iVS-$&J]WTeO#=(F@U/^;Xe+HnJ:@=6S'Q#hrV6h#!@KoQ2Eh=[I)mqokAEi[3^?EXE#kS.K)>.H
%hNHrS2?E8QbbPZf,-(0>6cS)M^3U](S_j[i)AB(;-1[d>_57N%EM8C*`;3a8.h>HkoW'hkZ?+AFE\qcg:'.>9=9EUg>4>+\[/qO9
%<lBY+Zbrh-?+s!.62r(t2gmi$H0ad#0`6D36'@_A@$C@BAk@QFR&8YHQbe%^\#mi&HjcCHf*.GX#XUi2Znu#'oE,7M$c5J.7B`o`
%0_=gMO(<od+O3fH,Pas>%ou<[]E,2<4Bad1^BOApWtV1SZq5\H"i:XO^JOEG!7scqcYpY6$iDUTa?0TGQ.oS&_6Y4X>BcFiJ`cQn
%IVe?<BY(:I/"H^cB^X2b_.IV=YO"a^*&Y&pd#E$ML!%;R6=^Nc'bU*NW][M9muJsd!@H?MO\Dfhr%Q@YR?&BNQO"iZn'D)e:Gp_p
%oA&GYjnNCi3F(q6Nt"-/'M[F?[ij@$`7<]39?"a/([o[X6D'taA]cqU$W`WU2=DG.lX^D_cWig!Q_<=),b_YSRZB_ro;'kak:\uG
%s3fBZ%kW+l)cA/$qh?3#*XI%.d0a1q,ftYJ/aUf%61aoUf:k=^j3NH&qBnG5@q)mdo@l@nQ&QWLKb1]F<Zj^+$!nB(Fl&bJJhLu_
%R*DpqD+arIFPB/U(2,535/.8.g6+3k%b$Lr<@61TM:ifnDssp&C;_Lbg[o%>Sn@Su_<_jfGZbSd#i\\dG;MKX*%,:u5M&$tWdom1
%@'hU`i@)161;1:^)3;cX$h6-<QO>FfTH]!`ek``&,&ap@'-,F3G9Mah"RD#DQR%)Kr^II9;'irmJ:0T6D_N>g>k)10r7NUHSTi`'
%^,bRK9aLH4FSF'$`YdBH'8hdD]G?NDmbIlLMJm=859"YaTT]Z3/Ul,0RI3uVIC_LD6&ZAbBlg`?VV)?=T?#%Y,_`2IaC5ba8:Q$L
%bF3_Xj2"JR/doYH!Ud+K)?kBAp#kYk.]h'EXq`"/eKuZV//U7NeRcJ/_p$.j2si)?:EXO'p$@?c`@)MTbC4gHrjFF1AE74.U*;>?
%+$*Pl!HE];.a]'F>k:c=%A8Z(n(^,S(nb3Vlr6PaI2gq".8UV(=EIbR^HsW\+B-]X9S"/4C+V`Xi_Sqt>CuYqG!7WV+cJLjDEu,Q
%juITmT/2"sMZju&B-_$pB/]uD,)u>'qIol0k\J?WAW^!P#.7cAd]E:D$X[cmk;/X7gU(2j8rsL)0=22JCt&$Eqt"%]At=qiKFd[M
%=<%5&g,r:9cD@tcfN5f4rV8&?F"?pE9M"'7D>Nl6&fu*g8Z'#$Mo+k0XTep9KTO$%#nJ:=)aRXm"H^=5$FrE4=;?9#R,36DhZ_aY
%le12I"\OS)rQL]m=4k)^^hHQd0>\7kEIb["%3g(.94,IFT@-=4EgENB47Bbsqee[c0WWW`ZiSW3"tY\Ck./(,hqe#d,^E&^3/1;H
%lN!Ko^RW2d$gu>ZL'Xlb](U=9.!Qc*Qb^PGbAP/pq<MqU\S5e.a^!r?mU,Je0+0hZYY19t`#!$kb2.aDF"dCEG<jN>bg0@UDF*mi
%9C=?C[5ePoa.9%LnO,1kAO0Z=$08?dSjDuDINq\S(p6.VnD(>AMZZX&qtU()m(:%LY1BV#TLV58%;9t(Z/<bXgRmAT2uRu=dommL
%#ZT%9L]a/QG'n`Hr`h[:Y.*B:#da)\1Urk!8!?(pD6h$3CJn/9fj;W<+*iQLeg*SfY)p4a%gjQdGLO^%PFINL5"r"Wm3MUj:*QpG
%]*c6g*`@!'o+0YR_ICaGod`lFP`D%Dbu/tsRC3*9mB+)'F+G"=gtdbD6"(>5mHs'D]u2Id<ur@"H0Br6dTo`oh2T,=,L;$.Ga[o@
%1:JX!gI>g@^6u8J,'*,_^T<Vnd)pa7c1cSCYC(p!`&I,+$+;g8i%5OG3N;<q\9L"HB`I_r3tS9QOS"[iCW<aMTLe+McrI,nFB@cc
%0B*^Tpp3?_K_'2V1lV5&_XE)`-j_!;M1UJYBl)#">^PO3K_ZDnrb'I>a+8hFV+pb\6CgZL1#3-F$<F6rlMF`P+7@aq_M:aN`#5R[
%@H*Ge]*TkV!oXBG*!r!O=`cgS24dJP_K"[k\ds7nA8rt5<ZcZQr+O&j%aj,YrO7lT./.q*\5a70Kco5;)=lEN>(WoKDct`YJcqj^
%Mdo-Fj>95iMbrWA7M9DZXh-o$2f[KI0]a4+X5BjX=4W9pB=Dm@-pk@>`9#c@?'6YLMf4ZNi4`.i]%gDM>_J=M2("Z_Y^Vl%RHTkT
%*b['?/0_+ldHcjGoAF'pKZ"3F.OqSbL:r7X:d?:d(C8fZVG<)FRfcJ7dnmo9bD;7]hE_GINZeT7*J:iK.+T!A%SN$H*t1e>k>&;s
%EDQ#f&(ft;PJNdD4'O?*p4:fChX&>D=5Id18"gdI.+-\2ABGJ7(<jRR*.t^tYhGA`dA+sE*Ph:UFJ&9\ah0]NTuh*.Fq3ed.B-fO
%[m,kulTHN@B2,ntW[%sL2dAqAZ;<e88,XTD$\q!7XKn!4brMN"SiXO>)b>NT!Z+ZF=ia/M/cA^I0FWJT=GEDH&3-+'Hi/>HNu;/k
%npHO3JQ"]7?1]/jA(]s<:(;1DI&_7JjK'Rl:/HnV(bg[1^paDtVmn8+'ir^%-1qYa8_@UA(XMQRE?Y,o^-C9Y`:m[6r::I?M]?XC
%.F3^J+el*BKfVsfE:TYHqs%AjnlZ&8K<W`KhH??Z_DI.gI0F>b;:,sQ>\o7$&(%t<#N#],G[B2nXr%6]rOC6!a_bQq$;/^-CR8KP
%Reu)pQ7VC]Z?J9.1!&nRZm0o5rZCumLWR<,Ct8SXS]Ab%VJc1T@Xk>.p<Qg]iJL-;Fg@TYL40Ch'c,ltm98<i*/d-B<nfr^:Wf0h
%PWe2!mOR]AR)NV#(W&J.hp]E,.7R0SmOOXJ>3:\dS)Q8BEN2a5fuXA;,PEFc)*:IWDXp449eDBR`_V'=e:j*CJTt0ShRkO9.b_3_
%227s.hoPc'X3YFIZ1aFaiRq]bM2L\u.Q,VsU<L-rAj"P,E0"0/>Hs6PF87?7XVEG<>am'd>c*mP7-/=npSaAH6:2/0<)U3D.dNOf
%+#k#el@k75>tod$DScMZAU5rq%V6!,m-5Q$Tsjb,g:AO6\ninbd0HP)mpDGGD8R5S6.Y+:oFJW+(tKO&G,!T>_@*t*pViG;NuA<X
%fKZ-/.\kXid%qUJ,+6UjHCZJZL(uQYma3WF"gN,Or7T1l;*fc8Of2eZ+pGsBj.5buH#0^)<np:G#;WOE+Ek%0\ZZkkYl-dC``1\l
%crAaXVJ)iXZf)EmIp**Qb`bfX<kh7IZD<%k@oKQ[)"]jd6tAu59=RL$KGOchGi9EJpEpNISB[Jcfc47%'X\SAd4O=BbrJ6`)+Pc<
%B;9enXFtrm2iURujEPK9e!oDbY7lo4h>8l9pZRq4F%bareL'dHPDKL+h=<`:7KCOF[*\,,PGI-L%KX&srr2@S"aU`]JQR-8q:jp"
%+.u,T?sIq/&.AI4k8)mJXb;&nTtknS@(Z<H7BPeK#O#;uHQ&pq3C<0A]G98j`q;ghO#>;AWVT[f62BG^>:#KaKAZ&iRC#fSg;:H'
%s3S$]*Y<A#M:Kk$^.V@blU7eB6?X4PYipa@AL@%m<.(Fi:Rs]$/ek*%@Wc"2=@d6!-:B#7C;m@YS..;db\jrT`J8]sfmkQO'/`V?
%H#WI.'`(_Zrb/)n\&b_O6$H$TfYpqC'JZ/fm)UYuG,Fg#8k=FY-d5!+p8ED8Kii#J[fO`u>?'<hMO9rB#?IP-gHPPQ9AQN;q<YWl
%HMJ9OjA"&o4ONJ7_RH2!kJtNQ6&gO\He,]],`)RdNino9ftd^U!1Wjs9"7C#K\*tgod75g3IPXdH(HdVjFn9.-LS4MZh>As7?V2S
%<HGEs!=mBMM\5'T(ZWD=UdFP@8uNm9'?,#=F0fe!(>>Tg<,6-cXX6.forp:A^BUs0IE2d4/[HBbK9A&G$5njiCelUdM!`1()S4s=
%Pn[-!V*poMKq^S=[?0B!A@l<GX*S"*C;Wt[?YX3XJW;F?fi^hQM5c1EMWRkbc<u7$fpp@;5YP[P,]j.GdN[!I)H.qX78.TSS/7I^
%-RK$Vm&o/efjg,2%'o`iLKU$Nbnt9<Nkn2-%'2GUE*KJ33gF=]f+1q-JijW:A#H@eT:Xr;@TW2WDRr+nII!&0*EHA8T\Ga?lXH2k
%QJ?`YLSHZ4Bkp:XaS*G>f94qKf'klJKC@tepiVqo(+.M.?2Cd70e^F2Y7oGM\P<J*ka(]>lNt5nNqKPi[:GjgRU]/unL`]@rCtO.
%P4ImHF;2D0a/i#-W;%CE-2_"ki88c`W/_b%LIO7hI@dnOqV#cX3`(q.f;V\$$2:B\?p0%18qMi<Hmm@;P8h21<$/`U;o1]/-+oZk
%&fEl20f@G%`GF.%oi3h^Im'GqInI0bY;nV1XWICn,h""<hh']qF,oncS)>T*UTgpReC8N)@3MbsgMM#u5W0(pgOoML-_8k-m$(VN
%BrjaC^MBR>0f.Nbd+:1TmV8%3Dt8]HHU-!SHs3??'K*:gAQWV)p80i'T0I!hM5?)F.h-1'f.p:O7T!=170@bcJ.-E5)QeTWm9NmQ
%;<7*/q25h$2!^DUG=%L\[>=GNqI.q$=sIoP[bQkF$8->1),KY-3jbk$4T0S.#+aDQ62=3[R]`ej(>?1MBH-e)>Vh<u\8n+IRZP*k
%0hC4"0'egAUi"0gCJh4kP-u;!eCrfqEU/jgm[/L;CC\`TE#m.,V;'rdOD29lkChOJk-Qo*Re`<2RJHV`Pa%A9RY>pi(=i7uBsSC1
%XZZr.GFctEK3$2h`?$ua!FH;&d64/Y(E8q:`JDuGA]ro9O%+0$@[S;n7rg<C/7^i[U9("&Vp2_cmu&i=HSe"<ip(V$RQH1sf87?r
%E'A\g$2<YLn:K8T?#19;mt^$RqTp4lde<T@nU#@NGS,^7AO]-a,A,5#k@Um#NU#QfS4m-'_/,`JS4+O=*_HW!=$r23]?Wb?U^UV/
%$M'd.R"nG`DUBiB^YuOQEtO"l#A09#>FaoV(E2\l8@V0LKH%<.cJ>hVQ@t$%UXt?k]7?#_O)>9=:&hXbg=naLD3&T,\8c>MpD1I,
%;(Thbnop-5jjs'Z7<dWl$2<Z0p?:]5k1GuOdt=+Z$6O#!443@Z4kAb-/G(!$m,(*g"OagZ#Y"=67C^$GG)mOJY6c4,(".hcS<^S.
%[nWS-kQ<l+CThF`>%L6j_s1$_C*OC=Db*TF@L?H*V7&U5#&i!l;[YUtP-oSID9oJ@ls\H45:;2"QUSq?7_X&oNKQ46[:$jtdt.n>
%kp[gYSZ!HpkWZYo2YGHQc77+Oh,O=F]Dg@_O/]Ff#ffotW&Nd`>J`OL2e;5<AqnNCkGCHp)Ac2>Q#Mf`[N6G^a!\&KK7FK^?*2#f
%GGEc@+sBGIjUkL0!3`Lg2;9h=^uuN@TXU\<gP=*t3c&1m4HR<%ku:qGDAoded-EsabV41EBGl#HCk$5X)Gk<^PMVDp_:rgt?@(>P
%FgE'WV.rB&5IZ*:[a2F9Hh:DV0/s]Z;d+T20qh:N?L'U/%!in-<Pks]cuF\U]c#<62.s.Ip+YCRktkq&Pot5(',+,7<PR3c_k:Tj
%=]FQg@Wji%+Qj$_Ft*',P\u6@VG8dFKCZL;N`t[]a5D`.\o-#Xf9UB:ro(fnSZ`1S9SBs2&!;\-e+8I:e;`a=Q"\GCRbQW6qUh&G
%Iu==96>57>%<4pOLPV91b%d/(5Z]h;#62]eqT<PHA+H("k,0SQqbreULbB4<NbCD3j1@$a\(u$DZXDC)r+d4[o2o%Z.&J1oW6T2K
%k<Y4BnZLqC#M\uSgi/\?LJ\j:Bb)m;kO%Ve\du9TeYU?(EW0"dN3![B'Suma#BBREkhsE@qbZl#-OW1Kjk?PYE\M18J9[fT72]<0
%24<]lE0"0/0=$p(9m]3R74?Vk_I2U39)c<@5p'`iA*1--7A2S>S,,Oj(j,es$M+loB+%^Q7Wd*$fDKS]jA+-].Es!4<.iK])/7fZ
%VkuXG?-YYYS6R(iiOd=Le:l=!Z^OT-nHnTSfVk[?[c3IiXRBU%d3-lBXJ5[H\4(*.VCVi&Nj,J3c:FFAG])kdLf82[cc/^BUafr[
%llNO=XjNQZN9l:8b;VJ[aqhGJdk9-F]Im'()^U%;;oMLG(>5NfFB*6PRr*CdlD##Yrm=EPEP5eF\K*L<`QVr[crt,W`(&?hg#D.Q
%g;TM;2q3(s_X:cR+U,*E2It"<W)ddB>:k)7lAJ#X]b2+-aID?sSJP2\YGbgXS@>0/n?^$"5XQ!dWmd!UNd`MI%q8o*,gq>7#.)ME
%8iYoYq2S/(W$,djW_OcB1:gFZ=>u\7R+n%7VWm)CmVCZ'OCq?=@g320Wf]Whp@pmWM=DQ+kj+7&dUjV?`4fi&TIoo9_:c_64+%Qk
%*Lt6(EXq/ogm9i&fj:/+O8:_9&R\[#p$7TT7FFf<7h8&]=#XbCq-4u1;jA$WClUeu`OCMIoS(Ou)C)d.m+,!sm,d19?r<ud0*/Q?
%9A<?tDW*+hD_&COoF5(A.O67Qc;/App$k\b$9ICmN`J!?4@ut%#$dG%TAP7(CC(2PS;_`*YBM3SqDW^@."^LXIQ/Y\h=o96hsuNm
%n08YInpQoQZtB&G5Mi/An\,&?,X`-GL<eCmDW;80(D'B>+ft+\n*a*u^u"1d8Cp%m=*ab_p<6"H,sfKh!Oq"drq4kFnNE?6dd(!;
%+4!;k(Q.S%I\)d&^b'6658&4@*:86hOu/<-#K;3bGc@k;qg3DmGbrY/cWa47@_8'VB,G./2L:qX=@N\S'(4.!i<;:nBU+`!:oH:O
%^RZVj>3L+'8SFs';o1]/-+pTFmG$:Rl=4lL]cJ-G(MYILLMdDO3%`.gYOu=GkT&@46f2'hO+W^:O1oRTCpA>/CrLVUSrN(E[2$GD
%s)<(/T2cmQ*An"#6P(As\I$QJk4/^0$fXm#q)YYHmnk<;mD7_*;<`qr9.1EUB_2Z50+6dVZ$a.6p\1TunDa$JYMccWJe'TSFS=f_
%^YbGCXnLVH8K9.^UTdsAQhB/&['@sR+mujCn2`i-?R<4;qB#V20sZMHHB?RDBKnZ=@9,Vrf[7Z^T_Q*s!b"^47t5Pnpq<'gdP,),
%es:7q\*nk-l8i]s9"INBf-2shMHNB@*#FZ1]8@#3('2<"qW$!Xkg+0S\*GH9"]D@'7qSq[$gE*F@h_Rc>TF#+lcYN9O8cSQFF/,2
%DRM(;J7^+/dCVo0"h$q^(;3pFX#kh1QoWa7lJh9+Ar2q]ma9q"RQs3skg)/")L;Fp$P7<)cG,?>KY&\C"PeUkqpk3;EFL-JD-(Es
%Xj_449&"$]oVT51!On`trjVQt<p]0H>MBT6$"\SLb^4F<\EQ]Ss0FBGTPQ<3b=hX0rZ5>H?JUt9>Ba6;qmee^01"$]S1Jt,-o>a7
%'OW3AUIN,c:8A@tq=0qYV=nh!^JXVa:h]>srg%Ma)@8(b;+,'lT["7NBWCe\?P=3$=d5L*0[F*,_EDW[lj9]1n_BQ0/<u&$7?XCs
%M&(@N\5!A)ka(`'*Y$9'%]`0Zb2a7Fm@h;E6kQmSA=%]C8%o`H<@$N:So'+SXWS>8ic#jV7F@>]+b#oXDt<m9rmnYsMG)`ZCq1Kj
%'jTaA1S3<9?a3>-b-ke&BYH5:fL4,]]UJ7O]Qt'$f4q'O.>*.7,7]1@B<<NQY-Tm=j*0P'X_h=k2Iq`RW7GlY>E*lBm>i?ps2mG$
%B?ns+DVEOK`lU,2rrT&bTI"]Rf84+ud0'gU?'TAanl]=D[9_KLC.nHcjr7Nm;;&3MYj&%EMOr(,8`C8A%f%.a`e%'0QZeFYdXHVn
%T.A2apG;GhU<#`s!RD2m%['%!,`PT12_c]tK]+Cp`!oFl&_s8=$,%@eWD.u6fo8;Ci/L'4d6bE`oGd"mbsl]d*mHY'B)g`seD'^%
%on>bR0#ZFu$f*s?T2&'$$UsT"IC#KKd-F)`YeKP.=Y'8ZWP<k">BiHc4>l3;cFC3+:UBXRkJJ<T-2dW%Pcd$%f#7R_rZZSj0\7c4
%*o.H8o!TFU"i7%2^,=u@6'KIdS<)8075]-*CTSA),'h-!!JQ_4m0AlqY9NR]=>WP]-S''_*^e!G@`qd8mB!(Wf58clL2&#cKh@D^
%gkA(?USpW.MBSZqBa80QYgFWqhGtW[]?h^u>_V%qYfL!L7B[BTg0D*EJ%6%?Fi`9;;Yt1sksdd4FGd_TK=)G#\HY(k:-jQZoe0?F
%(mg8VL"S3r_NtGu!A5BW%%?0d8Mc/Oe=a-g7bV[pF&Us;Vbu$E&5^"l%sduA+:pbASR_1;ZE(@J/?/Q+W%9K\[Rc+Z+7p&JJ*9>u
%\'d0F9=:_LDMp;FG\HBcI>=Mt8^aJ7]6ViRo\#h3D:e=64aQAq1:1bc_+'!K"uulT5HpU57NIZ?Mt$Q<%CEluFn^k)_i(Bq,g)CY
%[:uA<KjH-qQ`HsJE0"lCIg7.Y;=oVp]Xn6_?%GJ^4o/!J].5SmrS4,J[/0st/24!V!q1SU;'Xdc\4=jHe'i!P'"BGGh24t:,Ps%d
%-g0Y?:JF<&kOL;a(ODWc'YhiWP]2\$$-1OX$OjKJL:[MHKR<?b5^-:;^AGH0X_@G6kZQi46>(jn5I[R'D'[o3B7];][#V,2'UWc,
%Vq[>^QM]^Aq,^a*5'J=umD70)BGkrU]'TT5rRQR*pQ2%b*9eLkUel\/j=g-7:5hK0ehmaZ^fj]ubsf:`4gS^#I1]ue*j[Q-XN"-"
%JjNaPkUJ6:Vsj#]L3i8B[:[fI3[#"=kc7dc/]7*T51<5?nRSk4Wfg>hSd"7;:LcJ3Cg[qib9?I*W*R)0Ua+uPH:5B#pB6`-W'%D5
%&=Drl5?5\d9eN[]TN7>jXWIK*0fDn/H\gnVd?^(U2Jf<SJAA>L<(kA.HY?[0C[=tq$;LAe]KfD('S3#i(K<J4j&l>5r(s.AOq_,*
%:l.tJS:+_+`+i=N.(>=Na2K$q=J6f?g-^m!@I<ju^)f'seO\hip#p.I^-iT5Uip=QGHounLWmA%M9SSm4u[pSB!n9-mV)$0't)eO
%/u?]GnllJ($c!mn+iNMoD\\B"?K8:gC$gG4"u)62lpU*8#tW1&O>=5)q`UWTVNnW4R9#t/M,&Oka4X*_a-]jR5",E-qDung5Z;Vg
%X#:14&6M2->--ql0gdWp>a1_8DHUn%?)(W"Rm&Z25KLJ2+eqm3]YcFd7E:-.C!peWk/"=%AHn*4,Yi#QIA9O6%oDsomG"bp/2JSo
%I4O?\2eS!uMD>b;'!r$"?E6E3&4elhe?hst&-J?S=ObM%-R"fk)EVg5o%Z*DEBE9tAr(0iCRSs*-";g'(UKD9k%<uPfJH/q_\l:\
%6K*8#IME8oEFL^j/<,j:K:Xl1rF&#fND"Er-"949GiSr#1T<Mo,rFe^Nc/]UH_$FJ#Lhct/p6H<_EA7<@\.I:]Sp8h*7p&r(C%J&
%lg>X2-0ce+VX=kl'tour6j=rMR?oMn.1de`H:-if+9J0MW#HE<6oCs)$2L\fA0:E"g^">q[c_?MnlR>D-j[u^qCnP]50i2+*3EtT
%o=dccUVC7RO%:oaHM)CO`MpYXjYf_Q9^GAuFUYS)51FQFqD^N@;^68i0$])cCkmm'""s-uNObs9je5X61?m<$Tm&LPkB')jF<!d&
%I.W7*&6k,N]!EI[BU8>$Fe/-#G"GSVkon9Y#B5-_>+8>^8LpRfelo(kjZ'W*!LXHLG7?(dm-W*ZCfL_U#<dF+3p)]"5+BIhYmMZc
%gE*[eIEg5:G0JV>;mqDHM6Tn$$9ZCHEQh"+=M%l,K&1)$kE>0B7u)KXbm7OhZ(4U*<c&/s%<uciYo;<l<$B"SIAI'J%-hO0StRb;
%52ZW+qI-.!??<QbV+]QH.J,6^7uano'KJ!K1Vu%Xqa%Je[3]KFi45\6pgAF6fDLIp&?cD'W<kT;MJu2h@D=JOTX]8$cQtj/h2rLN
%_:!qHk($82#qDFJaj)/m>4c9s\"i;H?FMetFsohh3^">OWpeSgg*B51X1es1,0)+bTR`&V&u?JiK`Pk#VYVXU?&i&G>>cjca\QkS
%qWlC,X+-.V--!qF9C/tJd4_APn'Hi:V=m!8RU`TBrI3Nuc"Pb_1F:hO<l/c\'#'Ba6>6@,?`m/s*8<Uq[9^<hgnT'64>)nl(jbCR
%%tfjjZb'kF[O\h?Hh8[IpsXRG9WFG>bg`q+;6+r9f7>]FELr/,56/t&^\gZEltYQgam+B2,(mtV4umfahDTU!+:]W_lC9L"7k!fT
%.\K7&B(I&4pjUcY*o5@m5n?,=f#N!TFb*&bfD#%'(@_,+4$K\U5\\rM;_unMU(_p.c(c-*HZVPT?%YGFJ3n;jEfF*?5PF6&EtgGS
%L!On98>[L1WZ*6E,cn]>HL]7jY-+*+BmkDcL-^C'$7H-AF5B^]`ZWS_9]%43*Un.T_@dCM:*G>/2(B"d*mhEn25uRr?>DaS_]UcA
%6';3l"^Q1LpGBpN0Kl9E<3bXD-/ni3bhrjZ;k+e,M3oYNb]:[VK=RXAe(8ei<$DcLG'/qsYSV8:D9?cp?'0I7Z;:7g&$VM1%1-RF
%X3,<*#.W;B@hX0W\X#.\L4kiFW#<;ThY.f1:b+"`Wd@L"MH<tLp<7fR@c'tRoZ<:Y+N9*S%;V43?:7H9a)639>`/B\n(*Gd!E=,A
%k=']1@aYuGWO=;#3:F//@W$KTDob2"EJ`.7CKtVoO9VM--G'c95tA<iJ5F!L]o,X4'7R"J@dG6E:?2sWr\uWFA=4"cKbYYpd]*\3
%;e_&?N=>aGIDsg!)A#b$Q99%O=qfuUSef9V-(?X9\h%*__`iWlIFL=^ZR#Td[:iS*]R$?lR:\E4m]opZl@UM?:Hl-?=-Hs,99$4k
%"3a&[g'jtu](+Mj]=o030Em;,L+"r5fP^aY-O-b$M'HYEQ;7j[_Z=K$%@Q+*+KH%J_YbaQMZ"!j#c?2=G&I7tTE!FXoWd)F;Ugaj
%Meb->Y"dqW)f)[&=g`6U(Pq&l*&0mVg'IMW!2t.GAie@Z^<=!Z8`,+/rX63(kg[aE#:JZiP1q[8hRss<&MF,jd:Fdr7KlZ(OYA)@
%Y%IsK2>9ZZ%#C<?$#p^DQE0B:9aMU97A&264(6fb=P$Q\R/CAX9:2<CN*-?!ZdU=k`pJ(;USi5Mnp#K0=f@%5`quM%Tro[\^'2_6
%78jRtN__ZVHB(?^+W"PC$a9XG=TX#QW&\9bTBOuq>RP<*@YQ&-]Mc?3,EV!VI@U^[c74&Qi.dI_S/[G\ZB1Pn4lkVOD4i78c$IY3
%\IIco$bt7k@I,5dcVc7eqU,#je_3KF0%,S+h)puY%M[L@8_6N]dM=a65[mDY,o!+>V>:KuYrm?fMQ75FpIR6$5$r6TYAcd:>$:Oe
%*GpqAG&%/??$Ioi=e"Pcgn:$&&5sgnoVrtsBJ-F1]Or&15WapR.:R#t--Qj7/a1GB\EL?43F=:CC1I<b'Q;cH^!FC9_&Fn-J&fST
%DZ5&jqOJ.;*d$ZE3gOSX9-%]2dfI9TU$CM$SJjYQP*jZa;-O.)YHuk2VT:6tM[@KE'boGhV:_<-`[]LaI&_34E($_3cY=Qc!ej-O
%UVnQkR1,KmE!Z-H^]U5:"8f^sY.9CC%r*.%iu$;nNlGSNAsmI&bGc/sg''cE[K\bs4o)WmBDP1392ZGG,t'(r:@]Sd6#-&%%TM+K
%/(Sjd>_YP)X@ZC.FY;G;W,L"g>8jB7dYlJS<DP@;`R6?0LO6oFTR7c2eS?u/$%ZFPm*]`$e>d^J*M]m'q&):qAC^=WS'M]@GbWT(
%Q1Gcd*a%cZ@[If0Dh#&u7fCjs7a!iQ$e6;mo7t2LO)K"a'Sn91:f6Tq%LQ&\l<$oX,l0E;Q?$R[DnqfA8Qq%)7(-&O%;H^NH'YC1
%0(KT0>@O/\1'H`6%lrOtYfHaTjHNnm@n[>FYYJ8mjtIEJf/2f!Pi@jJ<L$V3KJ'</<[<>2dUgs^oN(YLZ+$`_HjX3+4eQf+[<]1_
%>Cb<7LKT1re29gQG/j3glYXILI51d[-!D$m;.1VJZn"]l*2Tm]Bm**`<K#cIVttpM%IaRa<?KSiW^2PZOcYbQKL[/t9'Ho[,,^-Y
%LEDOHR1Di>0@N`1W]X?lO,p>":::eJf@D'u`8K/hO%FHojkTMG%";q7oD'a+..utI55gSd)a,m-%"mcc//'IpVX9ju*HbQ42D-YB
%TNMG_?.68^=7F?GFWno&/*NP]jkF%0W_PAP:`#=l!<nC:i0/J!*u/bUG->20p\GER;OPm5qcf%0\-/g$kN"nh-JdDr(aL3O;o"EN
%.MS>J%\k^8i%Y[?*5.]<4iaE2T8VV"RZa/#TW%FKj'@.90rBI<!$\29OX/`:dMs3moQ]_dr>1Ng/_>if*;-6%f[bEB;F_@^go;F\
%]XGP4+usO&9C_M:HV0G[\>bU1RqY=OpN^2t8Na`sEX1XU,IEM.:U2)OC):/PpI.c*i=TW.^q(<2d!o&X.8>'^Lut\+<nsl<h-JUX
%Z#^N!H9[j)ncY`Zo4L?R/E&m\(h9AgYU\:G;5K(T/nuIVh9@&]d%^X\X(@ahn;4Ms>4kE35<DNDX?c##d]&BpQn+EiC/F5SX)fV`
%Gm!P":ND1H[q'"r$G&I)$S^riF%_Et%uiLA6G2-I-D>(#j(WbNf(u4B1dm2gp2$nYT0mN)nu;D+n\lc27l7[n(KDUPd<T#<=U!(r
%9gg9R"ulFp%EG;#FYmo;gk/#4VC"6_VDS$1U/cr]pU[#lcrL4k3n<#cTu32,L9mh]aW-i;Kb3m39K9m</_sdab,">m\$%iPA%ZY)
%r?9JpY.:P+ie^sE?_PfWLk?2S@3l*m,LTIg?"CsJoigsu6BrEYQ=i9e$E-tZ5n=9>*]6C8q1,c`CX&3OGPQE`#ZYGFb+_iqTChN\
%EUU[h9m2^m7ufbl[lN."]g,l:c<#ptIe=Z`;AZ7"NV6`1FG$'8)W6.W;Q#D=A?481OiRl.<KE)):3'UNoN:/bB0#"4-hk@-\Y0"T
%,9]\c>t\QP,lP17Uq2Z.'%]e?3<-A90TH5)DCIo[Lt-%+e_44ba43&C`D`TfMoB7$Xa.nT[#3CZ.e0fSHI^>gO^+P/S9B!2a)7(U
%C-'\7?YD6!S2#_>C!o`sbB!gm:k@_QWCMX^(c_E2;$*0sk-861OtJGJ:Z2<nkIskS_Fa<9',h[F2XbipUiJLt\$!GNrH=^f2?T5+
%Gr,c6]SW[:O64rhiHeZQ@)Alo=Pn4WGc?T7#>FH)o;!hJp3k0Z`KgQK9tVQ1Qn"7f@>.c`6?o,2C7GhuVr#Bt5>arXiQE!,$M;pG
%QX0$2hPE,9]Pc:2"&)&JT-_cJVVD:($;PT<),KYuU#l,,m<QN8>>UmrVI]PMC*O8B7KLo*"GF,1+HD1cD6MT^^r%b9itOrF@&P!U
%bQY[Q9j3ril2!bLcmPfRMOVsil3:>OVDQbRVktNXnc#RMI=;IE)u'JK_H@TZ\3cdKl%oklV:#]dB2:'LH\/t#k7>c&lQrVpotJ8L
%C0$RGlir/mlu;RLMjp:LY"O"ZQ#KS2k8G]sAd#bA0Wd8]oD'uJ56(<E\itpOhpE'!23s#PCi!2+I!c=9Z5knj;jYjKVJ+A37%Xm4
%*FRQe7J$I@\cr$.`^C^cQ0R*QJX9V'C,b@!U521(ka$1KD@%t0%e:LeqUh=<5m:nB2JObV-/>8FfUT_)A`+5_VZNE&5&H(VM'#-^
%>M*L@g,8QfCjg[=R]gr3\=m#]AB2mg-k1`5qKp%2K2I>&_<^,cd!Yf'XgX12=+dYVQ\@LE_6kGc"+fqE$n.ske0GOY.=pd-lXAJb
%a$1l,$QquL+S8.>4^P!em,DnhT[7f2+1".ZQaf_WA+BfFE)pYuR**#T;t3HmeK((onE[535?r]13=5WkUuIRVp\EmJF_HAn"e"7G
%H?+La$_#Dn4G5rFoI[%G?ic+'XTlEh#\/S2hOi\Wk49Zj`D<(b#RZeh=YI.dNCN"h/RlfgVGrKVS;E1!0S%m;k!'^mZ96&7bdU.N
%k/G?1$;O=?7E/t+J9<JGO?Wk&!bC*/\k6L2S*Qr/YF8o<4qUd6SU0G)qP\TEBu[bqc(r_#8HpUH9*?-PS7ckb"S`]lBqIiJ)+N>:
%RFV_+3AMF]'D2E-ocMCTl0K#+i+.AXf/5/ZXeZ\Y')@:rm'FB)1U73G%Jq?'jp*tak[+(C)Thqo6-<O$RRLS,1CW&9KDeH)^%#7&
%l,Ls/Vt=LC8:dPV8l:'BL5neXp+"?8H(;KM*a0O@Y"$)BT-_4c(QlhIl15#7r]\tC=`)rM!K+2a@6JTl2s4XkbA>p7cT[/lS`nT/
%OKKJXHgSb;-U3+1F#kO]UfTp'O-4+(I%GbVVKND-HC"BTK/_gF9*6H;Y@Cbu7-muDcEFTgHf.oUV.1'N9e/>rlCpCO4@spSnsR>#
%j8.O@`RuWVD.XER0R\WbK"R2/:h@ptQ]#`H4c+1G=l`3oJtTuXcM_7\QT:mPe*W06i%cE\j4"WU,m;?MoAk-s+@J'-(@j$J,qX[V
%I\tEN$agD"6jEAP&X9t>:h?2eMt:IZ#"(B;l-+I:po:;>l,fF7c03Z?S[6EOK(aVbba6O\.C2RY4-1pLb&c4Aa<08Prd'@`le`00
%hu:[o?iU'hr3tufs7aihq>,46J,>l<o_3k707WfHs7i49rla3sS%o!$5Q1%8J,.PXr51buo:Q$Xci7eYl-%uajj3u!ci<d,5C`L,
%s8J)Z#7*Ls+8kN`rql`f+9(E[r'.,qjKA~>
%AI9_PrivateDataEnd
